'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function childrenMonitorState(props, state, action) {
  return props.children.map(function (child) {
    return child.type.update(child.props, state, action);
  });
}

function reducer(props) {
  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var action = arguments[2];

  return {
    childrenMonitorState: childrenMonitorState(props, state.childMonitorState, action)
  };
}

var defaultStyle = {
  height: '100%',
  display: 'flex',
  flexDirection: 'column'
};

var MultipleMonitors = function (_Component) {
  _inherits(MultipleMonitors, _Component);

  function MultipleMonitors(props, context) {
    _classCallCheck(this, MultipleMonitors);

    return _possibleConstructorReturn(this, _Component.call(this, props, context));
  }

  MultipleMonitors.prototype.render = function render() {
    var _props = this.props;
    var monitorState = _props.monitorState;
    var children = _props.children;
    var _props$style = _props.style;
    var style = _props$style === undefined ? defaultStyle : _props$style;

    var rest = _objectWithoutProperties(_props, ['monitorState', 'children', 'style']);

    var monitors = children.map(function (e, i) {
      return (0, _react.cloneElement)(e, _extends({}, rest, {
        monitorState: monitorState.childrenMonitorState[i],
        key: 'monitor' + i
      }));
    });

    return _react2.default.createElement(
      'div',
      { style: style },
      monitors
    );
  };

  return MultipleMonitors;
}(_react.Component);

MultipleMonitors.update = reducer;
exports.default = MultipleMonitors;