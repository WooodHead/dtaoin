'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getParams = require('get-params');

var _getParams2 = _interopRequireDefault(_getParams);

var _reduxDevtoolsThemes = require('redux-devtools-themes');

var themes = _interopRequireWildcard(_reduxDevtoolsThemes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  button: {
    cursor: 'pointer',
    fontWeight: 'bold',
    borderRadius: '3px',
    padding: '3px',
    margin: '5px 3px',
    fontSize: '0.8em',
    textDecoration: 'none',
    border: 'none'
  },
  content: {
    margin: '5px',
    padding: '5px',
    borderRadius: '3px',
    outline: 'none',
    flex: '1 1 80%',
    overflow: 'auto'
  },
  label: {
    margin: '5px',
    padding: '5px',
    flex: '1 1 20%',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    direction: 'rtl',
    textAlign: 'left'
  }
};

var Dispatcher = function (_Component) {
  _inherits(Dispatcher, _Component);

  function Dispatcher(props, context) {
    _classCallCheck(this, Dispatcher);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _this.state = {
      selectedActionCreator: 'default',
      args: [],
      error: null
    };
    return _this;
  }

  Dispatcher.prototype.selectActionCreator = function selectActionCreator(e) {
    var selectedActionCreator = e.target.value;
    var args = [];
    if (selectedActionCreator !== 'default') {
      // Shrink the number args to the number of the new ones
      args = this.state.args.slice(0, this.getActionCreators()[selectedActionCreator].args.length);
    }
    this.setState({
      selectedActionCreator: selectedActionCreator,
      args: args
    });
  };

  Dispatcher.prototype.handleArg = function handleArg(e, argIndex) {
    var args = [].concat(this.state.args.slice(0, argIndex), [this.refs['arg' + argIndex].textContent], this.state.args.slice(argIndex + 1));
    this.setState({ args: args });
  };

  Dispatcher.prototype.launchAction = function launchAction() {
    try {
      var actionCreator = function actionCreator() {
        return {};
      },
          argsToInject = [];
      if (this.state.selectedActionCreator !== 'default') {
        actionCreator = this.getSelectedActionCreator().func;

        var interpretArg = function interpretArg(arg) {
          return new Function('return ' + arg)();
        };
        argsToInject = this.state.args.map(interpretArg);
        var rest = interpretArg(this.refs.restArgs.textContent);
        if (rest) {
          var _argsToInject;

          if (Array.isArray(rest)) argsToInject = (_argsToInject = argsToInject).concat.apply(_argsToInject, rest);else throw new Error('rest must be an array');
        }
      } else {
        actionCreator = new Function('return ' + this.refs.action.textContent);
      }

      (this.props.dispatchFn || this.context.store.dispatch)(actionCreator.apply(undefined, argsToInject));

      this.setState({ error: null });
    } catch (e) {
      this.setState({ error: e.message });
    }
  };

  Dispatcher.prototype.componentDidMount = function componentDidMount() {
    this.resetCustomAction();
  };

  Dispatcher.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (this.state.selectedActionCreator === 'default' && prevState.selectedActionCreator !== 'default') {
      this.resetCustomAction();
    }
  };

  Dispatcher.prototype.resetCustomAction = function resetCustomAction() {
    this.refs.action.innerHTML = this.props.initEmpty ? '<br/>' : '{<br/>type: ""<br/>}';
  };

  Dispatcher.prototype.getSelectedActionCreator = function getSelectedActionCreator() {
    return this.getActionCreators()[this.state.selectedActionCreator];
  };

  Dispatcher.prototype.getActionCreators = function getActionCreators() {
    var actionCreators = this.props.actionCreators;


    if (Array.isArray(actionCreators)) {
      return actionCreators;
    }

    var flatTree = function flatTree(object) {
      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      var functions = [];
      for (var propertyName in object) {
        var prop = object[propertyName];
        if (object.hasOwnProperty(propertyName)) {
          if (typeof prop === "function") {
            functions.push({
              name: namespace + (propertyName || prop.name || 'anonymous'),
              func: prop,
              args: (0, _getParams2.default)(prop)
            });
          } else if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === "object") {
            functions = functions.concat(flatTree(prop, namespace + propertyName + '.'));
          }
        }
      }
      return functions;
    };

    return flatTree(actionCreators);
  };

  Dispatcher.prototype.getTheme = function getTheme() {
    var theme = this.props.theme;

    if (typeof theme !== 'string') {
      return theme;
    }

    if (typeof themes[theme] !== 'undefined') {
      return themes[theme];
    }

    console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
    return themes.nicinabox;
  };

  Dispatcher.prototype.render = function render() {
    var _this2 = this;

    var theme = this.getTheme(),
        contentEditableStyle = _extends({}, styles.content, { color: theme.base06, backgroundColor: theme.base00 }),
        buttonStyle = _extends({}, styles.button, { color: theme.base06, backgroundColor: theme.base00 }),
        actionCreators = this.getActionCreators();

    var fields = _react2.default.createElement('div', { contentEditable: true, style: contentEditableStyle, ref: 'action' });
    if (this.state.selectedActionCreator !== 'default') {
      var fieldStyles = _extends({}, styles.label, { color: theme.base06 });
      fields = this.getSelectedActionCreator().args.map(function (param, i) {
        return _react2.default.createElement(
          'div',
          { key: i, style: { display: 'flex' } },
          _react2.default.createElement(
            'span',
            { style: fieldStyles },
            param
          ),
          _react2.default.createElement('div', { contentEditable: true, style: contentEditableStyle, ref: 'arg' + i, onInput: function onInput(e) {
              return _this2.handleArg(e, i);
            } })
        );
      });
      fields.push(_react2.default.createElement(
        'div',
        { key: 'action', style: { display: 'flex' } },
        _react2.default.createElement(
          'span',
          { style: fieldStyles },
          'rest...'
        ),
        _react2.default.createElement('div', { contentEditable: true, style: contentEditableStyle, ref: 'restArgs' })
      ));
    }

    var error = '';
    if (this.state.error) {
      error = _react2.default.createElement(
        'div',
        { style: { color: theme.base06, background: '#FC2424', padding: '5px', display: 'flex' } },
        _react2.default.createElement(
          'div',
          { style: { flex: '1', alignItems: 'center' } },
          _react2.default.createElement(
            'p',
            { style: { margin: '0px' } },
            this.state.error
          )
        ),
        _react2.default.createElement(
          'div',
          { style: { alignItems: 'center' } },
          _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                return _this2.setState({ error: null });
              }, style: _extends({}, buttonStyle, { margin: '0', background: '#DC2424' }) },
            '\xD7'
          )
        )
      );
    }

    var dispatchButtonStyle = buttonStyle;
    if (actionCreators.length <= 0) {
      dispatchButtonStyle = _extends({}, buttonStyle, {
        position: 'absolute',
        bottom: '3px',
        right: '5px',
        background: theme.base02
      });
    }

    var dispatchButton = _react2.default.createElement(
      'button',
      { style: dispatchButtonStyle, onClick: this.launchAction.bind(this) },
      'Dispatch'
    );

    return _react2.default.createElement(
      'div',
      { style: { background: theme.base02, fontFamily: 'monaco,Consolas,Lucida Console,monospace', position: 'relative' } },
      error,
      fields,
      actionCreators.length > 0 ? _react2.default.createElement(
        'div',
        { style: { display: 'flex' } },
        _react2.default.createElement(
          'select',
          { onChange: this.selectActionCreator.bind(this), style: { flex: '1', fontFamily: 'inherit' }, defaultValue: this.state.selectedActionCreator || 'default' },
          _react2.default.createElement(
            'option',
            { value: 'default' },
            'Custom action'
          ),
          actionCreators.map(function (_ref, i) {
            var name = _ref.name,
                func = _ref.func,
                args = _ref.args;
            return _react2.default.createElement(
              'option',
              { key: i, value: i },
              name + '(' + args.join(', ') + ')'
            );
          })
        ),
        dispatchButton
      ) : dispatchButton
    );
  };

  return Dispatcher;
}(_react.Component);

Dispatcher.contextTypes = {
  store: _propTypes2.default.object
};
Dispatcher.propTypes = {
  dispatch: _propTypes2.default.func,
  computedStates: _propTypes2.default.array,
  actionsById: _propTypes2.default.object,
  stagedActionIds: _propTypes2.default.array,
  skippedActionIds: _propTypes2.default.array,
  monitorState: _propTypes2.default.shape({
    initialScrollTop: _propTypes2.default.number
  }),

  initEmpty: _propTypes2.default.bool,
  actionCreators: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),
  dispatchFn: _propTypes2.default.func,
  theme: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string])
};
Dispatcher.defaultProps = {
  theme: 'nicinabox',
  initEmpty: false,
  actionCreators: {}
};

Dispatcher.update = function () {};

exports.default = Dispatcher;