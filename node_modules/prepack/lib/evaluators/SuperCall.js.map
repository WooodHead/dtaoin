{"version":3,"sources":["../../src/evaluators/SuperCall.js"],"names":["SuperCall","GetSuperConstructor","realm","envRec","activeFunction","$FunctionObject","superConstructor","$GetPrototypeOf","createErrorThrowCompletion","intrinsics","TypeError","Arguments","strictCode","env","newTarget","ReferenceError","func","argList","result","thisER","BindThisValue"],"mappings":";;;;;kBAmDwBA,S;;AAtCxB;;AACA;;AACA;;AACA;;AAOA;;;;;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAA2C;AACzC;AACA,MAAIC,SAAS,gCAAmBD,KAAnB,CAAb;;AAEA;AACA,2BAAUC,wDAAV;;AAEA;AACA,MAAIC,iBAAiBD,OAAOE,eAA5B;;AAEA;AACA,MAAIC,mBAAmBF,eAAeG,eAAf,EAAvB;;AAEA;;AAEA;AACA,MAAI,CAAC,2BAAcL,KAAd,EAAqBI,gBAArB,CAAL,EAA6C;AAC3C,UAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,qCAA7D,CAAN;AACD;AACD,2BAAUJ,8CAAV;;AAEA;AACA,SAAOA,gBAAP;AACD;;AAED;AAlDA;;;;;;;;;AAmDe,SAASN,SAAT,CACbW,SADa,EAEbC,UAFa,EAGbC,GAHa,EAIbX,KAJa,EAKO;AACpB;AACA,MAAIY,YAAY,0BAAaZ,KAAb,CAAhB;;AAEA;AACA,MAAIY,0CAAJ,EAAyC;AACvC,UAAMZ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBM,cAAlD,EAAkE,wBAAlE,CAAN;AACD;;AAED;AACA,MAAIC,OAAOf,oBAAoBC,KAApB,CAAX;;AAEA;;AAEA;AACA,MAAIe,UAAU,oCAAuBf,KAAvB,EAA8BU,UAA9B,EAA0CC,GAA1C,EAA+CF,SAA/C,CAAd;;AAEA;;AAEA;AACA,MAAIO,SAAS,uBAAUhB,KAAV,EAAiBc,IAAjB,EAAuBC,OAAvB,EAAgCH,SAAhC,CAAb;;AAEA;;AAEA;AACA,MAAIK,SAAS,gCAAmBjB,KAAnB,CAAb;;AAEA;AACA,SAAOiB,OAAOC,aAAP,CAAqBF,MAArB,CAAP;AACD","file":"SuperCall.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { FunctionEnvironmentRecord } from \"../environment.js\";\nimport { Completion } from \"../completions.js\";\nimport { Value, UndefinedValue, ObjectValue } from \"../values/index.js\";\nimport {\n  GetNewTarget,\n  ArgumentListEvaluation,\n  Construct,\n  GetThisEnvironment,\n  IsConstructor,\n} from \"../methods/index.js\";\nimport invariant from \"../invariant.js\";\n\nfunction GetSuperConstructor(realm: Realm) {\n  // 1. Let envRec be GetThisEnvironment( ).\n  let envRec = GetThisEnvironment(realm);\n\n  // 2. Assert: envRec is a function Environment Record.\n  invariant(envRec instanceof FunctionEnvironmentRecord);\n\n  // 3. Let activeFunction be envRec.[[FunctionObject]].\n  let activeFunction = envRec.$FunctionObject;\n\n  // 4. Let superConstructor be activeFunction.[[GetPrototypeOf]]().\n  let superConstructor = activeFunction.$GetPrototypeOf();\n\n  // 5. ReturnIfAbrupt(superConstructor).\n\n  // 6. If IsConstructor(superConstructor) is false, throw a TypeError exception.\n  if (!IsConstructor(realm, superConstructor)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"super called outside of constructor\");\n  }\n  invariant(superConstructor instanceof ObjectValue);\n\n  // 7. Return superConstructor.\n  return superConstructor;\n}\n\n// ECMA262 12.3.5.1\nexport default function SuperCall(\n  Arguments: Array<BabelNode>,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Completion | Value {\n  // 1. Let newTarget be GetNewTarget().\n  let newTarget = GetNewTarget(realm);\n\n  // 2. If newTarget is undefined, throw a ReferenceError exception.\n  if (newTarget instanceof UndefinedValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, \"newTarget is undefined\");\n  }\n\n  // 3. Let func be GetSuperConstructor().\n  let func = GetSuperConstructor(realm);\n\n  // 4. ReturnIfAbrupt(func).\n\n  // 5. Let argList be ArgumentListEvaluation of Arguments.\n  let argList = ArgumentListEvaluation(realm, strictCode, env, Arguments);\n\n  // 6. ReturnIfAbrupt(argList).\n\n  // 7. Let result be Construct(func, argList, newTarget).\n  let result = Construct(realm, func, argList, newTarget);\n\n  // 8. ReturnIfAbrupt(result).\n\n  // 9. Let thisER be GetThisEnvironment( ).\n  let thisER = GetThisEnvironment(realm);\n\n  // 10. Return thisER.BindThisValue(result).\n  return thisER.BindThisValue(result);\n}\n"]}