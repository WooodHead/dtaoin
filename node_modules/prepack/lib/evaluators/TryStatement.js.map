{"version":3,"sources":["../../src/evaluators/TryStatement.js"],"names":["ast","strictCode","env","realm","completions","blockRes","evaluateCompletion","block","handler","unshift","finalizer","completion","shift","intrinsics","undefined"],"mappings":";;;;;;kBAmBe,UAASA,GAAT,EAAqCC,UAArC,EAA0DC,GAA1D,EAAmFC,KAAnF,EAAwG;AACrH,MAAIC,cAAc,EAAlB;;AAEA,MAAIC,WAAWH,IAAII,kBAAJ,CAAuBN,IAAIO,KAA3B,EAAkCN,UAAlC,CAAf;;AAEA,MAAII,oDAAuCL,IAAIQ,OAA/C,EAAwD;AACtDJ,gBAAYK,OAAZ,CAAoBP,IAAII,kBAAJ,CAAuBN,IAAIQ,OAA3B,EAAoCP,UAApC,EAAgDI,QAAhD,CAApB;AACD,GAFD,MAEO;AACLD,gBAAYK,OAAZ,CAAoBJ,QAApB;AACD;;AAED,MAAIL,IAAIU,SAAR,EAAmB;AACjBN,gBAAYK,OAAZ,CAAoBP,IAAII,kBAAJ,CAAuBN,IAAIU,SAA3B,EAAsCT,UAAtC,CAApB;AACD;;AAED;AAfqH;AAAA;AAAA;;AAAA;AAgBrH,yBAAuBG,WAAvB,8HAAoC;AAAA,UAA3BO,UAA2B;;AAClC,UAAIA,cAAcA,mDAAlB,EAA0D,MAAMA,UAAN;AAC3D;AAlBoH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBrH,MAAIX,IAAIU,SAAR,EAAmB;AACjBN,gBAAYQ,KAAZ;AACD;;AAED;AAxBqH;AAAA;AAAA;;AAAA;AAyBrH,0BAAuBR,WAAvB,mIAAoC;AAAA,UAA3BO,WAA2B;;AAClC,UAAIA,eAAcA,oCAAlB,EACE,OAAQ,wBAAYR,KAAZ,EAAmBQ,WAAnB,EAA+BR,MAAMU,UAAN,CAAiBC,SAAhD,CAAR;AACH;AA5BoH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BrH,2BAAU,KAAV;AACD,C;;AArCD;;AACA;;AACA;;AAEA","file":"TryStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { AbruptCompletion, ThrowCompletion } from \"../completions.js\";\nimport { UpdateEmpty } from \"../methods/index.js\";\nimport { Value } from \"../values/index.js\";\nimport type { BabelNodeTryStatement } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\nexport default function(ast: BabelNodeTryStatement, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  let completions = [];\n\n  let blockRes = env.evaluateCompletion(ast.block, strictCode);\n\n  if (blockRes instanceof ThrowCompletion && ast.handler) {\n    completions.unshift(env.evaluateCompletion(ast.handler, strictCode, blockRes));\n  } else {\n    completions.unshift(blockRes);\n  }\n\n  if (ast.finalizer) {\n    completions.unshift(env.evaluateCompletion(ast.finalizer, strictCode));\n  }\n\n  // use the last completion record\n  for (let completion of completions) {\n    if (completion && completion instanceof AbruptCompletion) throw completion;\n  }\n\n  if (ast.finalizer) {\n    completions.shift();\n  }\n\n  // otherwise use the last returned value\n  for (let completion of completions) {\n    if (completion && completion instanceof Value)\n      return (UpdateEmpty(realm, completion, realm.intrinsics.undefined): any);\n  }\n\n  invariant(false);\n}\n"]}