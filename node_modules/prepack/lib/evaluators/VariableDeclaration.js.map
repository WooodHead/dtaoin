{"version":3,"sources":["../../src/evaluators/VariableDeclaration.js"],"names":["ast","strictCode","env","realm","kind","letAndConst","declarations","declar","Initializer","init","id","type","bindingId","name","lhs","rhs","evaluate","value","__originalName","hasNameProperty","rval","undefined","intrinsics","empty"],"mappings":"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","file":"VariableDeclaration.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport type { Value } from \"../values/index.js\";\nimport { ObjectValue, StringValue } from \"../values/index.js\";\nimport {\n  PutValue,\n  GetValue,\n  ResolveBinding,\n  InitializeReferencedBinding,\n  IsAnonymousFunctionDefinition,\n  HasOwnProperty,\n  SetFunctionName,\n  BindingInitialization,\n} from \"../methods/index.js\";\nimport invariant from \"../invariant.js\";\nimport type { BabelNodeVariableDeclaration } from \"babel-types\";\n\n// ECMA262 13.3.1.4\nfunction letAndConst(\n  ast: BabelNodeVariableDeclaration,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  for (let declar of ast.declarations) {\n    if (declar.id.type !== \"Identifier\") {\n      throw new FatalError(\"TODO: Patterns aren't supported yet\");\n    }\n\n    let Initializer = declar.init;\n    if (!Initializer) {\n      invariant(ast.kind !== \"const\", \"const without an initializer\");\n\n      // 1. Let lhs be ResolveBinding(StringValue of BindingIdentifier).\n      let bindingId = declar.id.name;\n      let lhs = ResolveBinding(realm, bindingId, strictCode);\n\n      // 2. Return InitializeReferencedBinding(lhs, undefined).\n      InitializeReferencedBinding(realm, lhs, realm.intrinsics.undefined);\n      continue;\n    }\n\n    // 1. Let bindingId be StringValue of BindingIdentifier.\n    let bindingId = declar.id.name;\n\n    // 2. Let lhs be ResolveBinding(bindingId).\n    let lhs = ResolveBinding(realm, bindingId, strictCode);\n\n    // 3. Let rhs be the result of evaluating Initializer.\n    let rhs = env.evaluate(Initializer, strictCode);\n\n    // 4. Let value be ? GetValue(rhs).\n    let value = GetValue(realm, rhs);\n\n    // 5. If IsAnonymousFunctionDefinition(Initializer) is true, then\n    if (IsAnonymousFunctionDefinition(realm, Initializer)) {\n      invariant(value instanceof ObjectValue);\n\n      // a. Let hasNameProperty be ? HasOwnProperty(value, \"name\").\n      let hasNameProperty = HasOwnProperty(realm, value, \"name\");\n\n      // b. If hasNameProperty is false, perform SetFunctionName(value, bindingId).\n      if (!hasNameProperty) SetFunctionName(realm, value, new StringValue(realm, bindingId));\n    }\n\n    // 6. Return InitializeReferencedBinding(lhs, value).\n    InitializeReferencedBinding(realm, lhs, value);\n  }\n\n  return realm.intrinsics.empty;\n}\n\n// ECMA262 13.3.2.4\nexport default function(\n  ast: BabelNodeVariableDeclaration,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): Value {\n  if (ast.kind === \"let\" || ast.kind === \"const\") {\n    return letAndConst(ast, strictCode, env, realm);\n  }\n\n  for (let declar of ast.declarations) {\n    let Initializer = declar.init;\n\n    if (declar.id.type === \"Identifier\" && !Initializer) {\n      // VariableDeclaration : BindingIdentifier\n\n      // 1. Return NormalCompletion(empty).\n      continue;\n    } else if (declar.id.type === \"Identifier\" && Initializer) {\n      // VariableDeclaration : BindingIdentifier Initializer\n\n      // 1. Let bindingId be StringValue of BindingIdentifier.\n      let bindingId = declar.id.name;\n\n      // 2. Let lhs be ? ResolveBinding(bindingId).\n      let lhs = ResolveBinding(realm, bindingId, strictCode);\n\n      // 3. Let rhs be the result of evaluating Initializer.\n      let rhs = env.evaluate(Initializer, strictCode);\n\n      // 4. Let value be ? GetValue(rhs).\n      let value = GetValue(realm, rhs);\n      if (declar.id && declar.id.name) value.__originalName = bindingId;\n\n      // 5. If IsAnonymousFunctionDefinition(Initializer) is true, then\n      if (IsAnonymousFunctionDefinition(realm, Initializer)) {\n        invariant(value instanceof ObjectValue);\n\n        // a. Let hasNameProperty be ? HasOwnProperty(value, \"name\").\n        let hasNameProperty = HasOwnProperty(realm, value, \"name\");\n\n        // b. If hasNameProperty is false, perform SetFunctionName(value, bindingId).\n        if (!hasNameProperty) SetFunctionName(realm, value, new StringValue(realm, bindingId));\n      }\n\n      // 6. Return ? PutValue(lhs, value).\n      PutValue(realm, lhs, value);\n    } else if ((declar.id.type === \"ObjectPattern\" || declar.id.type === \"ArrayPattern\") && Initializer) {\n      // 1. Let rhs be the result of evaluating Initializer.\n      let rhs = env.evaluate(Initializer, strictCode);\n\n      // 2. Let rval be ? GetValue(rhs).\n      let rval = GetValue(realm, rhs);\n\n      // 3. Return the result of performing BindingInitialization for BindingPattern passing rval and undefined as arguments.\n      BindingInitialization(realm, declar.id, rval, strictCode, undefined);\n    } else {\n      invariant(false, \"unrecognized declaration\");\n    }\n  }\n\n  return realm.intrinsics.empty;\n}\n"]}