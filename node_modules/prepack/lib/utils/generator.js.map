{"version":3,"sources":["../../src/utils/generator.js"],"names":["base62","t","Generator","realm","useAbstractInterpretation","realmPreludeGenerator","preludeGenerator","parent","generator","body","result","slice","key","canBeIdentifier","index","Number","parseInt","toString","numericLiteral","keyIsAscii","test","isValidIdentifier","identifier","stringLiteral","length","value","declaredGlobals","add","emitGlobalAssignment","strictMode","push","args","buildNode","valueNode","expressionStatement","assignmentExpression","globalReference","unaryExpression","object","propName","getAsPropertyNameExpression","objectNode","memberExpression","isIdentifier","desc","enumerable","configurable","writable","descValue","emitPropertyAssignment","Object","assign","$Realm","intrinsics","undefined","get","set","getNode","setNode","descProps","objectProperty","booleanLiteral","callExpression","memoizeReference","objectExpression","createCallee","values","method","emitCall","map","v","violationConditionFn","appendLastToInvariantFn","nodes","throwString","last","pop","binaryExpression","condition","throwblock","blockStatement","throwStatement","newExpression","ifStatement","types","kind","derive","buildNode_","Function","optionalArgs","id","nameGenerator","generate","derivedIds","name","res","createAbstract","isPure","declared","variableDeclaration","variableDeclarator","type","getType","intrinsicName","skipInvariant","typeofString","emitInvariant","logicalExpression","node","context","entry","canOmit","boundArg","i","serializeValue","emit","declare","callbacks","canSkip","recordDelayedEntry","recordDeclaration","visitValue","dependencies","dependency","visitGenerator","bodyEntry","visitEntry","NameGenerator","forbiddenNames","debugNames","uniqueSuffix","prefix","uidCounter","debugSuffix","encode","replace","has","PreludeGenerator","prelude","Map","memoizedRefs","Set","usesThis","str","split","thisExpression","reduce","obj","prop","globalScope","keyNode","ref","convertStringToMember"],"mappings":"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","file":"generator.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport {\n  AbstractValue,\n  Value,\n  FunctionValue,\n  UndefinedValue,\n  NullValue,\n  StringValue,\n  BooleanValue,\n  NumberValue,\n  SymbolValue,\n  ObjectValue,\n  ConcreteValue,\n} from \"../values/index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"../values/AbstractValue.js\";\nimport type { Descriptor } from \"../types.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport * as base62 from \"base62\";\nimport * as t from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeIdentifier,\n  BabelNodeStatement,\n  BabelNodeMemberExpression,\n  BabelNodeThisExpression,\n} from \"babel-types\";\nimport { nullExpression } from \"./internalizer.js\";\n\nexport type SerializationContext = {\n  serializeValue: Value => BabelNodeExpression,\n  serializeGenerator: Generator => Array<BabelNodeStatement>,\n  emit: BabelNodeStatement => void,\n  canOmit: AbstractValue => boolean,\n  declare: AbstractValue => void,\n};\n\nexport type GeneratorBuildNodeFunction = (Array<BabelNodeExpression>, SerializationContext) => BabelNodeStatement;\n\nexport type GeneratorEntry = {\n  declared?: AbstractValue,\n  args: Array<Value>,\n  buildNode: GeneratorBuildNodeFunction,\n  dependencies?: Array<Generator>,\n  isPure?: boolean,\n};\n\nexport type VisitEntryCallbacks = {|\n  visitValue: Value => void,\n  visitGenerator: Generator => void,\n  canSkip: AbstractValue => boolean,\n  recordDeclaration: AbstractValue => void,\n  recordDelayedEntry: GeneratorEntry => void,\n|};\n\nexport class Generator {\n  constructor(realm: Realm) {\n    invariant(realm.useAbstractInterpretation);\n    let realmPreludeGenerator = realm.preludeGenerator;\n    invariant(realmPreludeGenerator);\n    this.preludeGenerator = realmPreludeGenerator;\n    this.parent = realm.generator;\n    this.realm = realm;\n    this.body = [];\n  }\n\n  realm: Realm;\n  body: Array<GeneratorEntry>;\n  preludeGenerator: PreludeGenerator;\n  parent: void | Generator;\n\n  clone(): Generator {\n    let result = new Generator(this.realm);\n    result.body = this.body.slice(0);\n    return result;\n  }\n\n  getAsPropertyNameExpression(key: string, canBeIdentifier: boolean = true) {\n    // If key is a non-negative numeric string literal, parse it and set it as a numeric index instead.\n    let index = Number.parseInt(key, 10);\n    if (index >= 0 && index.toString() === key) {\n      return t.numericLiteral(index);\n    }\n\n    if (canBeIdentifier) {\n      // TODO: revert this when Unicode identifiers are supported by all targetted JavaScript engines\n      let keyIsAscii = /^[\\u0000-\\u007f]*$/.test(key);\n      if (t.isValidIdentifier(key) && keyIsAscii) return t.identifier(key);\n    }\n\n    return t.stringLiteral(key);\n  }\n\n  getParent(): void | Generator {\n    return this.parent;\n  }\n\n  empty() {\n    return !this.body.length;\n  }\n\n  emitGlobalDeclaration(key: string, value: Value) {\n    this.preludeGenerator.declaredGlobals.add(key);\n    if (!(value instanceof UndefinedValue)) this.emitGlobalAssignment(key, value, true);\n  }\n\n  emitGlobalAssignment(key: string, value: Value, strictMode: boolean) {\n    this.body.push({\n      args: [value],\n      buildNode: ([valueNode]) =>\n        t.expressionStatement(\n          t.assignmentExpression(\"=\", this.preludeGenerator.globalReference(key, !strictMode), valueNode)\n        ),\n    });\n  }\n\n  emitGlobalDelete(key: string, strictMode: boolean) {\n    this.body.push({\n      args: [],\n      buildNode: ([]) =>\n        t.expressionStatement(t.unaryExpression(\"delete\", this.preludeGenerator.globalReference(key, !strictMode))),\n    });\n  }\n\n  emitPropertyAssignment(object: Value, key: string, value: Value) {\n    let propName = this.getAsPropertyNameExpression(key);\n    this.body.push({\n      args: [object, value],\n      buildNode: ([objectNode, valueNode]) =>\n        t.expressionStatement(\n          t.assignmentExpression(\"=\", t.memberExpression(objectNode, propName, !t.isIdentifier(propName)), valueNode)\n        ),\n    });\n  }\n\n  emitDefineProperty(object: Value, key: string, desc: Descriptor) {\n    if (desc.enumerable && desc.configurable && desc.writable && desc.value) {\n      let descValue = desc.value;\n      invariant(descValue instanceof Value);\n      this.emitPropertyAssignment(object, key, descValue);\n    } else {\n      desc = Object.assign({}, desc);\n      this.body.push({\n        args: [\n          object,\n          desc.value || object.$Realm.intrinsics.undefined,\n          desc.get || object.$Realm.intrinsics.undefined,\n          desc.set || object.$Realm.intrinsics.undefined,\n        ],\n        buildNode: ([objectNode, valueNode, getNode, setNode]) => {\n          let descProps = [];\n          descProps.push(t.objectProperty(t.identifier(\"enumerable\"), t.booleanLiteral(!!desc.enumerable)));\n          descProps.push(t.objectProperty(t.identifier(\"configurable\"), t.booleanLiteral(!!desc.configurable)));\n          if (!desc.get && !desc.set) {\n            descProps.push(t.objectProperty(t.identifier(\"writable\"), t.booleanLiteral(!!desc.writable)));\n            descProps.push(t.objectProperty(t.identifier(\"value\"), valueNode));\n          } else {\n            descProps.push(t.objectProperty(t.identifier(\"get\"), getNode));\n            descProps.push(t.objectProperty(t.identifier(\"set\"), setNode));\n          }\n          return t.expressionStatement(\n            t.callExpression(this.preludeGenerator.memoizeReference(\"Object.defineProperty\"), [\n              objectNode,\n              t.stringLiteral(key),\n              t.objectExpression(descProps),\n            ])\n          );\n        },\n      });\n    }\n  }\n\n  emitPropertyDelete(object: Value, key: string) {\n    let propName = this.getAsPropertyNameExpression(key);\n    this.body.push({\n      args: [object],\n      buildNode: ([objectNode]) =>\n        t.expressionStatement(\n          t.unaryExpression(\"delete\", t.memberExpression(objectNode, propName, !t.isIdentifier(propName)))\n        ),\n    });\n  }\n\n  emitCall(createCallee: () => BabelNodeExpression, args: Array<Value>) {\n    this.body.push({\n      args,\n      buildNode: values => t.expressionStatement(t.callExpression(createCallee(), [...values])),\n    });\n  }\n\n  emitConsoleLog(method: \"log\" | \"warn\" | \"error\", args: Array<string | ConcreteValue>) {\n    this.emitCall(\n      () => t.memberExpression(t.identifier(\"console\"), t.identifier(method)),\n      args.map(v => (typeof v === \"string\" ? new StringValue(this.realm, v) : v))\n    );\n  }\n\n  emitInvariant(\n    args: Array<Value>,\n    violationConditionFn: (Array<BabelNodeExpression>) => BabelNodeExpression,\n    appendLastToInvariantFn?: BabelNodeExpression => BabelNodeExpression\n  ): void {\n    this.body.push({\n      args,\n      buildNode: (nodes: Array<BabelNodeExpression>) => {\n        let throwString = t.stringLiteral(\"Prepack model invariant violation\");\n        if (appendLastToInvariantFn) {\n          let last = nodes.pop();\n          throwString = t.binaryExpression(\n            \"+\",\n            t.stringLiteral(\"Prepack model invariant violation: \"),\n            appendLastToInvariantFn(last)\n          );\n        }\n        let condition = violationConditionFn(nodes);\n        let throwblock = t.blockStatement([t.throwStatement(t.newExpression(t.identifier(\"Error\"), [throwString]))]);\n        return t.ifStatement(condition, throwblock);\n      },\n    });\n  }\n\n  emitCallAndCaptureResult(\n    types: TypesDomain,\n    values: ValuesDomain,\n    createCallee: () => BabelNodeExpression,\n    args: Array<Value>,\n    kind?: string\n  ): AbstractValue {\n    return this.derive(types, values, args, nodes => t.callExpression(createCallee(), nodes));\n  }\n\n  emitVoidExpression(\n    types: TypesDomain,\n    values: ValuesDomain,\n    args: Array<Value>,\n    buildNode_: AbstractValueBuildNodeFunction | BabelNodeExpression\n  ): UndefinedValue {\n    this.body.push({\n      args,\n      buildNode: (nodes: Array<BabelNodeExpression>) =>\n        t.expressionStatement(\n          (buildNode_: any) instanceof Function\n            ? ((buildNode_: any): AbstractValueBuildNodeFunction)(nodes)\n            : ((buildNode_: any): BabelNodeExpression)\n        ),\n    });\n    return this.realm.intrinsics.undefined;\n  }\n\n  derive(\n    types: TypesDomain,\n    values: ValuesDomain,\n    args: Array<Value>,\n    buildNode_: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: string, isPure?: boolean, skipInvariant?: boolean |}\n  ): AbstractValue {\n    invariant(buildNode_ instanceof Function || args.length === 0);\n    let id = t.identifier(this.preludeGenerator.nameGenerator.generate(\"derived\"));\n    this.preludeGenerator.derivedIds.set(id.name, args);\n    let res = this.realm.createAbstract(types, values, [], id, optionalArgs ? optionalArgs.kind : undefined);\n    this.body.push({\n      isPure: optionalArgs ? optionalArgs.isPure : undefined,\n      declared: res,\n      args,\n      buildNode: (nodes: Array<BabelNodeExpression>) =>\n        t.variableDeclaration(\"var\", [\n          t.variableDeclarator(\n            id,\n            (buildNode_: any) instanceof Function\n              ? ((buildNode_: any): AbstractValueBuildNodeFunction)(nodes)\n              : ((buildNode_: any): BabelNodeExpression)\n          ),\n        ]),\n    });\n    let type = types.getType();\n    res.intrinsicName = id.name;\n    if (optionalArgs && optionalArgs.skipInvariant) return res;\n    let typeofString;\n    if (type instanceof FunctionValue) typeofString = \"function\";\n    else if (type === UndefinedValue) invariant(false);\n    else if (type === NullValue) invariant(false);\n    else if (type === StringValue) typeofString = \"string\";\n    else if (type === BooleanValue) typeofString = \"boolean\";\n    else if (type === NumberValue) typeofString = \"number\";\n    else if (type === SymbolValue) typeofString = \"symbol\";\n    else if (type === ObjectValue) typeofString = \"object\";\n    if (typeofString !== undefined) {\n      // Verify that the types are as expected, a failure of this invariant\n      // should mean the model is wrong.\n      this.emitInvariant(\n        [res, res],\n        nodes => {\n          invariant(typeofString !== undefined);\n          let condition = t.binaryExpression(\n            \"!==\",\n            t.unaryExpression(\"typeof\", nodes[0]),\n            t.stringLiteral(typeofString)\n          );\n          if (typeofString === \"object\") {\n            condition = t.logicalExpression(\n              \"&&\",\n              condition,\n              t.binaryExpression(\"!==\", t.unaryExpression(\"typeof\", nodes[0]), t.stringLiteral(\"function\"))\n            );\n            condition = t.logicalExpression(\"||\", condition, t.binaryExpression(\"===\", nodes[0], nullExpression));\n          }\n          return condition;\n        },\n        node => node\n      );\n    }\n\n    return res;\n  }\n\n  serialize(context: SerializationContext) {\n    for (let entry of this.body) {\n      if (!entry.isPure || !entry.declared || !context.canOmit(entry.declared)) {\n        let nodes = entry.args.map((boundArg, i) => context.serializeValue(boundArg));\n        context.emit(entry.buildNode(nodes, context));\n        if (entry.declared !== undefined) context.declare(entry.declared);\n      }\n    }\n  }\n\n  visitEntry(entry: GeneratorEntry, callbacks: VisitEntryCallbacks) {\n    if (entry.isPure && entry.declared && callbacks.canSkip(entry.declared)) {\n      callbacks.recordDelayedEntry(entry);\n    } else {\n      if (entry.declared) callbacks.recordDeclaration(entry.declared);\n      for (let boundArg of entry.args) callbacks.visitValue(boundArg);\n      if (entry.dependencies) for (let dependency of entry.dependencies) callbacks.visitGenerator(dependency);\n    }\n  }\n\n  visit(callbacks: VisitEntryCallbacks) {\n    for (let bodyEntry of this.body) this.visitEntry(bodyEntry, callbacks);\n  }\n}\n\nexport class NameGenerator {\n  constructor(forbiddenNames: Set<string>, debugNames: boolean, uniqueSuffix: string, prefix: string) {\n    this.prefix = prefix;\n    this.uidCounter = 0;\n    this.debugNames = debugNames;\n    this.forbiddenNames = forbiddenNames;\n    this.uniqueSuffix = uniqueSuffix;\n  }\n  prefix: string;\n  uidCounter: number;\n  debugNames: boolean;\n  forbiddenNames: Set<string>;\n  uniqueSuffix: string;\n  generate(debugSuffix: ?string): string {\n    let id;\n    do {\n      id = this.prefix + base62.encode(this.uidCounter++);\n      if (this.uniqueSuffix.length > 0) id += this.uniqueSuffix;\n      if (this.debugNames) {\n        if (debugSuffix) id += \"_\" + debugSuffix.replace(/[.,:]/g, \"_\");\n        else id += \"_\";\n      }\n    } while (this.forbiddenNames.has(id));\n    return id;\n  }\n}\n\nexport class PreludeGenerator {\n  constructor(debugNames: ?boolean, uniqueSuffix: ?string) {\n    this.prelude = [];\n    this.derivedIds = new Map();\n    this.memoizedRefs = new Map();\n    this.nameGenerator = new NameGenerator(new Set(), !!debugNames, uniqueSuffix || \"\", \"_$\");\n    this.usesThis = false;\n    this.declaredGlobals = new Set();\n  }\n\n  prelude: Array<BabelNodeStatement>;\n  derivedIds: Map<string, Array<Value>>;\n  memoizedRefs: Map<string, BabelNodeIdentifier | BabelNodeMemberExpression | BabelNodeThisExpression>;\n  nameGenerator: NameGenerator;\n  usesThis: boolean;\n  declaredGlobals: Set<string>;\n\n  createNameGenerator(prefix: string): NameGenerator {\n    return new NameGenerator(\n      this.nameGenerator.forbiddenNames,\n      this.nameGenerator.debugNames,\n      this.nameGenerator.uniqueSuffix,\n      prefix\n    );\n  }\n\n  convertStringToMember(str: string): BabelNodeIdentifier | BabelNodeMemberExpression | BabelNodeThisExpression {\n    return str\n      .split(\".\")\n      .map(name => {\n        if (name === \"global\") {\n          this.usesThis = true;\n          return t.thisExpression();\n        } else {\n          return t.identifier(name);\n        }\n      })\n      .reduce((obj, prop) => t.memberExpression(obj, prop));\n  }\n\n  globalReference(key: string, globalScope: boolean = false) {\n    if (globalScope && t.isValidIdentifier(key)) return t.identifier(key);\n    let keyNode = t.isValidIdentifier(key) ? t.identifier(key) : t.stringLiteral(key);\n    return t.memberExpression(this.memoizeReference(\"global\"), keyNode, !t.isIdentifier(keyNode));\n  }\n\n  memoizeReference(key: string): BabelNodeIdentifier | BabelNodeMemberExpression | BabelNodeThisExpression {\n    let ref = this.memoizedRefs.get(key);\n    if (ref) return ref;\n\n    ref = t.identifier(this.nameGenerator.generate(key));\n    this.prelude.push(t.variableDeclaration(\"var\", [t.variableDeclarator(ref, this.convertStringToMember(key))]));\n    this.memoizedRefs.set(key, ref);\n    return ref;\n  }\n}\n"]}