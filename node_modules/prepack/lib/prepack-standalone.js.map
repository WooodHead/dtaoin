{"version":3,"sources":["../src/prepack-standalone.js"],"names":["InitializationError","prepackSources","prepackString","prepack","prepackFromAst","t","self","Error","Object","setPrototypeOf","prototype","sources","options","realmOptions","errorHandler","realm","serialize","residual","serializer","serialized","init","sourceMaps","residualSources","filePath","outputFilename","fileContents","code","sourceMapContents","JSON","stringify","map","result","$GlobalEnv","executePartialEvaluator","filename","sourceMap","ast","type","file","loc","source"],"mappings":"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","file":"prepack-standalone.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* APIs for running Prepack for code where a model of the environment is supplied as part of the code. */\n\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport * as t from \"babel-types\";\nimport { getRealmOptions, getSerializerOptions } from \"./prepack-options\";\nimport { FatalError } from \"./errors.js\";\nimport { SerializerStatistics, TimingStatistics } from \"./serializer/types.js\";\nimport type { SourceFile } from \"./types.js\";\nimport { AbruptCompletion } from \"./completions.js\";\nimport type { PrepackOptions } from \"./prepack-options\";\nimport { defaultOptions } from \"./options\";\nimport type { BabelNodeFile, BabelNodeProgram } from \"babel-types\";\nimport invariant from \"./invariant.js\";\n\n// IMPORTANT: This function is now deprecated and will go away in a future release.\n// Please use FatalError instead.\nexport function InitializationError() {\n  let self = new Error(\"An error occurred while prepacking. See the error logs.\");\n  Object.setPrototypeOf(self, InitializationError.prototype);\n  return self;\n}\nObject.setPrototypeOf(InitializationError, Error);\nObject.setPrototypeOf(InitializationError.prototype, Error.prototype);\nObject.setPrototypeOf(FatalError.prototype, InitializationError.prototype);\n\nexport function prepackSources(\n  sources: Array<SourceFile>,\n  options: PrepackOptions = defaultOptions\n): { code: string, map?: SourceMap, statistics?: SerializerStatistics, timingStats?: TimingStatistics } {\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions);\n  initializeGlobals(realm);\n\n  if (options.serialize || !options.residual) {\n    let serializer = new Serializer(realm, getSerializerOptions(options));\n    let serialized = serializer.init(sources, options.sourceMaps);\n    if (!serialized) {\n      throw new FatalError(\"serializer failed\");\n    }\n    if (!options.residual) return serialized;\n    let residualSources = [\n      {\n        filePath: options.outputFilename || \"unknown\",\n        fileContents: serialized.code,\n        sourceMapContents: JSON.stringify(serialized.map),\n      },\n    ];\n    let result = realm.$GlobalEnv.executePartialEvaluator(residualSources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    // $FlowFixMe This looks like a Flow bug\n    return result;\n  } else {\n    invariant(options.residual);\n    let result = realm.$GlobalEnv.executePartialEvaluator(sources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    // $FlowFixMe This looks like a Flow bug\n    return result;\n  }\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepackString(\n  filename: string,\n  code: string,\n  sourceMap: string,\n  options: PrepackOptions = defaultOptions\n): { code: string, map?: SourceMap, statistics?: SerializerStatistics, timingStats?: TimingStatistics } {\n  return prepackSources([{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }], options);\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepack(code: string, options: PrepackOptions = defaultOptions) {\n  let filename = options.filename || \"unknown\";\n  let sources = [{ filePath: filename, fileContents: code }];\n\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions);\n  initializeGlobals(realm);\n\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n\n/* deprecated: please use prepackSources instead. */\nexport function prepackFromAst(\n  ast: BabelNodeFile | BabelNodeProgram,\n  code: string,\n  options: PrepackOptions = defaultOptions\n) {\n  if (ast && ast.type === \"Program\") {\n    ast = t.file(ast, [], []);\n  }\n  invariant(ast && ast.type === \"File\");\n  let filename = options.filename || (ast.loc && ast.loc.source) || \"unknown\";\n  let sources = [{ filePath: filename, fileContents: code }];\n\n  // TODO: Expose an option to wire an already parsed ast all the way through\n  // to the execution environment. For now, we just reparse.\n\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(sources, options.sourceMaps);\n  if (!serialized) {\n    throw new FatalError(\"serializer failed\");\n  }\n  return serialized;\n}\n"]}