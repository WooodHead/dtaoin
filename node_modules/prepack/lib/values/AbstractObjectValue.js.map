{"version":3,"sources":["../../src/values/AbstractObjectValue.js"],"names":["t","AbstractObjectValue","realm","types","values","args","buildNode","optionalArgs","result","$Realm","_buildNode","kind","intrinsicName","getElements","element","isPartial","reportIntrospectionError","undefined","isSimple","makeNotPartial","makePartial","makeSimple","P","value","elements","size","cv","$GetOwnProperty","hasProp","doesNotHaveProp","desc","d","cond","createAbstract","topVal","x","y","binaryExpression","Desc","$DefineOwnProperty","intrinsics","writable","enumerable","configurable","new_val","sawTrue","sawFalse","dval","vale","empty","$HasProperty","Receiver","generator","pname","getAsPropertyNameExpression","deriveAbstract","node","memberExpression","isIdentifier","$Get","cvVal","$GetPartial","V","$Set","oldVal","v","$SetPartial","$Delete","$OwnPropertyKeys"],"mappings":"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","file":"AbstractObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FatalError } from \"../errors.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyKeyValue } from \"../types.js\";\nimport { AbstractValue, BooleanValue, ObjectValue, StringValue, Value } from \"./index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"./AbstractValue.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport { IsDataDescriptor, joinValuesAsConditional, cloneDescriptor, equalDescriptors } from \"../methods/index.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport * as t from \"babel-types\";\n\nexport default class AbstractObjectValue extends AbstractValue {\n  constructor(\n    realm: Realm,\n    types: TypesDomain,\n    values: ValuesDomain,\n    args: Array<Value>,\n    buildNode: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: string, intrinsicName?: string, isPure?: boolean |}\n  ) {\n    super(realm, types, values, args, buildNode, optionalArgs);\n  }\n\n  clone(): AbstractObjectValue {\n    let result = new AbstractObjectValue(this.$Realm, this.types, this.values, this.args, this._buildNode);\n    if (this.kind) result.kind = this.kind;\n    if (this.intrinsicName) result.intrinsicName = this.intrinsicName;\n    return result;\n  }\n\n  getTemplate(): ObjectValue {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.isPartial()) {\n        return element;\n      } else {\n        break;\n      }\n    }\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  isPartial(): boolean {\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isPartial();\n      } else if (result !== element.isPartial()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  isSimple(): boolean {\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined) {\n        result = element.isSimple();\n      } else if (result !== element.isSimple()) {\n        AbstractValue.reportIntrospectionError(this);\n        throw new FatalError();\n      }\n    }\n    if (result === undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n    return result;\n  }\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    return true;\n  }\n\n  makeNotPartial(): void {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeNotPartial();\n    }\n  }\n\n  makePartial(): void {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makePartial();\n    }\n  }\n\n  makeSimple(): void {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      return element.makeSimple();\n    }\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    return this;\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    return false;\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetOwnProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      let desc;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) doesNotHaveProp = true;\n        else {\n          hasProp = true;\n          if (desc === undefined) {\n            desc = cloneDescriptor(d);\n            invariant(desc !== undefined);\n            if (!IsDataDescriptor(this.$Realm, d)) continue;\n          } else {\n            if (!equalDescriptors(d, desc)) {\n              AbstractValue.reportIntrospectionError(this, P);\n              throw new FatalError();\n            }\n            if (!IsDataDescriptor(this.$Realm, desc)) continue;\n            // values may be different\n            let cond = this.$Realm.createAbstract(\n              new TypesDomain(BooleanValue),\n              ValuesDomain.topVal,\n              [this, cv],\n              ([x, y]) => t.binaryExpression(\"===\", x, y)\n            );\n            desc.value = joinValuesAsConditional(this.$Realm, cond, d.value, desc.value);\n          }\n        }\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return desc;\n    }\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$DefineOwnProperty(P, Desc);\n      }\n      invariant(false);\n    } else {\n      if (!IsDataDescriptor(this.$Realm, Desc)) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      let desc = {\n        value: \"value\" in Desc ? Desc.value : this.$Realm.intrinsics.undefined,\n        writable: \"writable\" in Desc ? Desc.writable : false,\n        enumerable: \"enumerable\" in Desc ? Desc.enumerable : false,\n        configurable: \"configurable\" in Desc ? Desc.configurable : false,\n      };\n      let new_val = desc.value;\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !equalDescriptors(d, desc)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let dval = d === undefined || d.vale === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = this.$Realm.createAbstract(\n          new TypesDomain(BooleanValue),\n          ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y)\n        );\n        desc.value = joinValuesAsConditional(this.$Realm, cond, new_val, dval);\n        if (cv.$DefineOwnProperty(P, desc)) {\n          sawTrue = true;\n        } else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$HasProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.$HasProperty(P)) hasProp = true;\n        else doesNotHaveProp = true;\n      }\n      if (hasProp && doesNotHaveProp) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return hasProp;\n    }\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.isSimple() && typeof P === \"string\") {\n          let generator = this.$Realm.generator;\n          invariant(generator !== undefined);\n          let pname = generator.getAsPropertyNameExpression(P);\n          let d = cv.$GetOwnProperty(P);\n          if (d === undefined) {\n            return this.$Realm.deriveAbstract(TypesDomain.topVal, ValuesDomain.topVal, [cv], ([node]) =>\n              t.memberExpression(node, pname, !t.isIdentifier(pname))\n            );\n          }\n        }\n        return cv.$Get(P, Receiver);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        // We do not currently join property getters\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cvVal = d === undefined ? this.$Realm.intrinsics.undefined : d.value;\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = this.$Realm.createAbstract(\n            new TypesDomain(BooleanValue),\n            ValuesDomain.topVal,\n            [this, cv],\n            ([x, y]) => t.binaryExpression(\"===\", x, y)\n          );\n          result = joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    invariant(this === Receiver, \"TODO\");\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        return cv.$GetPartial(P, cv);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        let cvVal = cv.$GetPartial(P, cv);\n        if (result === undefined) result = cvVal;\n        else {\n          let cond = this.$Realm.createAbstract(\n            new TypesDomain(BooleanValue),\n            ValuesDomain.topVal,\n            [this, cv],\n            ([x, y]) => t.binaryExpression(\"===\", x, y)\n          );\n          result = joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (P instanceof StringValue) P = P.value;\n    invariant(this === Receiver, \"TODO\");\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Set(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let oldVal = d === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = this.$Realm.createAbstract(\n          new TypesDomain(BooleanValue),\n          ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y)\n        );\n        let v = joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    invariant(this === Receiver, \"TODO\");\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$SetPartial(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let oldVal = this.$GetPartial(P, Receiver);\n        let cond = this.$Realm.createAbstract(\n          new TypesDomain(BooleanValue),\n          ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y)\n        );\n        let v = joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        cv.$SetPartial(P, v, cv);\n      }\n      return true;\n    }\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Delete(P);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) continue;\n        if (!IsDataDescriptor(this.$Realm, d)) {\n          AbstractValue.reportIntrospectionError(this, P);\n          throw new FatalError();\n        }\n        let cond = this.$Realm.createAbstract(\n          new TypesDomain(BooleanValue),\n          ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y)\n        );\n        let v = joinValuesAsConditional(this.$Realm, cond, this.$Realm.intrinsics.empty, d.value);\n        if (cv.$Set(P, v, cv)) sawTrue = true;\n        else sawFalse = true;\n      }\n      if (sawTrue && sawFalse) {\n        AbstractValue.reportIntrospectionError(this, P);\n        throw new FatalError();\n      }\n      return sawTrue;\n    }\n  }\n\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$OwnPropertyKeys();\n      }\n      invariant(false);\n    } else {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n  }\n}\n"]}