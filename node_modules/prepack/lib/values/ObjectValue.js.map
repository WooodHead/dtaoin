{"version":3,"sources":["../../src/values/ObjectValue.js"],"names":["t","ObjectValue","realm","proto","intrinsicName","recordNewObject","useAbstractInterpretation","setupBindings","$Prototype","intrinsics","null","$Extensible","true","_isPartial","false","_isSimple","properties","Map","symbols","trackedProperties","propName","desc","writeable","value","undefined","descriptor","object","key","$Realm","isPartial","size","values","propertyBinding","writable","ObjectPrototype","isSimple","v","$SymbolData","$StringData","$NumberData","$BooleanData","$DateValue","$RegExpMatcher","$SetData","$MapData","$DataView","$ArrayBufferData","$WeakMapData","$WeakSetData","$TypedArrayName","name","length","callback","defineNativeProperty","$DefineOwnProperty","enumerable","configurable","funcName","$Description","throwIfNotConcreteString","func","get","set","unknownProperty","reportIntrospectionError","keyArray","Array","from","keys","filter","pb","x","pv","mightHaveBeenDeleted","callReportObjectGetOwnProperties","stack","obj","serializedDesc","serialize","Object","defineProperty","V","P","Desc","$GetOwnProperty","Receiver","prop","val","specializeJoin","$Get","mightNotBeString","result","createAbstract","topVal","o","memberExpression","cond","binaryExpression","stringLiteral","absVal","args","generic_cond","specializeCond","arg1","arg2","types","_buildNode","kind","$Set","recordModifiedProperty","newVal","y","oldVal","empty","prototype","binding"],"mappings":"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","file":"ObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm, ExecutionContext } from \"../realm.js\";\nimport { FatalError } from \"../errors.js\";\nimport type {\n  IterationKind,\n  PromiseCapability,\n  PromiseReaction,\n  DataBlock,\n  PropertyKeyValue,\n  PropertyBinding,\n  Descriptor,\n  ObjectKind,\n  TypedArrayKind,\n} from \"../types.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport {\n  Value,\n  AbstractValue,\n  ConcreteValue,\n  BooleanValue,\n  StringValue,\n  SymbolValue,\n  NumberValue,\n  UndefinedValue,\n  NullValue,\n  NativeFunctionValue,\n} from \"./index.js\";\nimport type { NativeFunctionCallback, ECMAScriptSourceFunctionValue } from \"./index.js\";\nimport {\n  joinValuesAsConditional,\n  IsDataDescriptor,\n  OrdinarySetPrototypeOf,\n  OrdinaryDefineOwnProperty,\n  OrdinaryDelete,\n  OrdinaryOwnPropertyKeys,\n  OrdinaryGetOwnProperty,\n  OrdinaryGet,\n  OrdinaryHasProperty,\n  OrdinarySet,\n  OrdinaryIsExtensible,\n  OrdinaryPreventExtensions,\n  ThrowIfMightHaveBeenDeleted,\n} from \"../methods/index.js\";\nimport * as t from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\nexport default class ObjectValue extends ConcreteValue {\n  constructor(realm: Realm, proto?: ObjectValue | NullValue, intrinsicName?: string) {\n    super(realm, intrinsicName);\n    realm.recordNewObject(this);\n    if (realm.useAbstractInterpretation) this.setupBindings();\n    this.$Prototype = proto || realm.intrinsics.null;\n    this.$Extensible = realm.intrinsics.true;\n    this._isPartial = realm.intrinsics.false;\n    this._isSimple = realm.intrinsics.false;\n    this.properties = new Map();\n    this.symbols = new Map();\n  }\n\n  static trackedProperties = [\n    \"$Prototype\",\n    \"$Extensible\",\n    \"$SetNextIndex\",\n    \"$IteratedSet\",\n    \"$MapNextIndex\",\n    \"$MapData\",\n    \"$Map\",\n    \"$DateValue\",\n    \"$ArrayIteratorNextIndex\",\n    \"$IteratedObject\",\n    \"$StringIteratorNextIndex\",\n    \"$IteratedString\",\n    \"_isPartial\",\n    \"_isSimple\",\n  ];\n\n  setupBindings() {\n    for (let propName of ObjectValue.trackedProperties) {\n      let desc = { writeable: true, value: undefined };\n      (this: any)[propName + \"_binding\"] = { descriptor: desc, object: this, key: propName };\n    }\n  }\n\n  static setupTrackedPropertyAccessors() {\n    for (let propName of ObjectValue.trackedProperties) {\n      Object.defineProperty(ObjectValue.prototype, propName, {\n        configurable: true,\n        get: function() {\n          let binding = this[propName + \"_binding\"];\n          return binding.descriptor.value;\n        },\n        set: function(v) {\n          let binding = this[propName + \"_binding\"];\n          this.$Realm.recordModifiedProperty(binding);\n          binding.descriptor.value = v;\n        },\n      });\n    }\n  }\n\n  $Prototype: ObjectValue | NullValue;\n  $Extensible: BooleanValue;\n\n  $ParameterMap: void | ObjectValue; // undefined when the property is \"missing\"\n  $SymbolData: void | SymbolValue | AbstractValue;\n  $StringData: void | StringValue | AbstractValue;\n  $NumberData: void | NumberValue | AbstractValue;\n  $BooleanData: void | BooleanValue | AbstractValue;\n\n  // error\n  $ErrorData: void | {\n    // undefined when the property is \"missing\"\n    contextStack: Array<ExecutionContext>,\n    locationData: void | {\n      filename: string,\n      sourceCode: string,\n      loc: { line: number, column: number },\n      stackDecorated: boolean,\n    },\n  };\n\n  // function\n  $Call: void | ((thisArgument: Value, argumentsList: Array<Value>) => Value);\n  $Construct: void | ((argumentsList: Array<Value>, newTarget: ObjectValue) => ObjectValue);\n\n  // promise\n  $Promise: ?ObjectValue;\n  $AlreadyResolved: void | { value: boolean };\n  $PromiseState: void | \"pending\" | \"fulfilled\" | \"rejected\";\n  $PromiseResult: void | Value;\n  $PromiseFulfillReactions: void | Array<PromiseReaction>;\n  $PromiseRejectReactions: void | Array<PromiseReaction>;\n  $PromiseIsHandled: void | boolean;\n  $Capability: void | PromiseCapability;\n  $AlreadyCalled: void | { value: boolean };\n  $Index: void | number;\n  $Values: void | Array<Value>;\n  $Capabilities: void | PromiseCapability;\n  $RemainingElements: void | { value: number };\n\n  // iterator\n  $IteratedList: void | Array<Value>;\n  $ListIteratorNextIndex: void | number;\n  $IteratorNext: void | NativeFunctionValue;\n\n  // set\n  $SetIterationKind: void | IterationKind;\n  $SetNextIndex: void | number;\n  $IteratedSet: void | ObjectValue | UndefinedValue;\n  $SetData: void | Array<void | Value>;\n\n  // map\n  $MapIterationKind: void | IterationKind;\n  $MapNextIndex: void | NumberValue;\n  $MapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n  $Map: void | ObjectValue | UndefinedValue;\n\n  // weak map\n  $WeakMapData: void | Array<{ $Key: void | Value, $Value: void | Value }>;\n\n  // weak set\n  $WeakSetData: void | Array<void | Value>;\n\n  // date\n  $DateValue: void | NumberValue | AbstractValue; // of type number\n\n  // array\n  $ArrayIterationKind: void | IterationKind;\n  $ArrayIteratorNextIndex: void | NumberValue;\n  $IteratedObject: void | UndefinedValue | ObjectValue;\n\n  // regex\n  $OriginalSource: void | string;\n  $OriginalFlags: void | string;\n  $RegExpMatcher: void | ((S: string, lastIndex: number) => ?{ endIndex: number, captures: Array<any> });\n\n  // string\n  $StringIteratorNextIndex: void | number;\n  $IteratedString: void | StringValue;\n\n  // data view\n  $DataView: void | true;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ByteLength: void | number;\n  $ByteOffset: void | number;\n\n  // array buffer\n  $ArrayBufferData: void | null | DataBlock;\n  $ArrayBufferByteLength: void | number;\n\n  // generator\n  $GeneratorState: void | \"suspendedStart\" | \"executing\";\n  $GeneratorContext: void | ExecutionContext;\n\n  // typed array\n  $TypedArrayName: void | TypedArrayKind;\n  $ViewedArrayBuffer: void | ObjectValue;\n  $ArrayLength: void | number;\n\n  // backpointer to the constructor if this object was created its prototype object\n  originalConstructor: void | ECMAScriptSourceFunctionValue;\n\n  // partial objects\n  _isPartial: BooleanValue;\n\n  // If true, the object has no property getters or setters and it is safe\n  // to return AbstractValue for unknown properties.\n  _isSimple: BooleanValue;\n\n  properties: Map<string, PropertyBinding>;\n  symbols: Map<SymbolValue, PropertyBinding>;\n  unknownProperty: void | PropertyBinding;\n\n  // An object value with an intrinsic name can either exist from the beginning of time,\n  // or it can be associated with a particular point in time by being used as a template\n  // when deriving an abstract value via a generator.\n  intrinsicNameGenerated: void | true;\n\n  mightBeFalse(): boolean {\n    return false;\n  }\n\n  mightNotBeObject(): boolean {\n    return false;\n  }\n\n  throwIfNotObject(): ObjectValue {\n    return this;\n  }\n\n  makeNotPartial(): void {\n    this._isPartial = this.$Realm.intrinsics.false;\n  }\n\n  makePartial(): void {\n    this._isPartial = this.$Realm.intrinsics.true;\n  }\n\n  makeSimple(): void {\n    this._isSimple = this.$Realm.intrinsics.true;\n  }\n\n  isPartial(): boolean {\n    return this._isPartial.value;\n  }\n\n  isSimple(): boolean {\n    if (this._isSimple.value) return true;\n    if (this.isPartial()) return false;\n    if (this.symbols.size > 0) return false;\n    for (let propertyBinding of this.properties.values()) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      if (!IsDataDescriptor(this.$Realm, desc)) return false;\n      if (!desc.writable) return false;\n    }\n    if (this.$Prototype instanceof NullValue) return true;\n    if (this.$Prototype === this.$Realm.intrinsics.ObjectPrototype) return true;\n    return this.$Prototype.isSimple();\n  }\n\n  getExtensible(): boolean {\n    return this.$Extensible.value;\n  }\n\n  setExtensible(v: boolean) {\n    this.$Extensible = v ? this.$Realm.intrinsics.true : this.$Realm.intrinsics.false;\n  }\n\n  getKind(): ObjectKind {\n    // we can deduce the natural prototype by checking whether the following internal slots are present\n    if (this.$SymbolData !== undefined) return \"Symbol\";\n    if (this.$StringData !== undefined) return \"String\";\n    if (this.$NumberData !== undefined) return \"Number\";\n    if (this.$BooleanData !== undefined) return \"Boolean\";\n    if (this.$DateValue !== undefined) return \"Date\";\n    if (this.$RegExpMatcher !== undefined) return \"RegExp\";\n    if (this.$SetData !== undefined) return \"Set\";\n    if (this.$MapData !== undefined) return \"Map\";\n    if (this.$DataView !== undefined) return \"DataView\";\n    if (this.$ArrayBufferData !== undefined) return \"ArrayBuffer\";\n    if (this.$WeakMapData !== undefined) return \"WeakMap\";\n    if (this.$WeakSetData !== undefined) return \"WeakSet\";\n    if (this.$TypedArrayName !== undefined) return this.$TypedArrayName;\n    // TODO #26: Promises. All kinds of iterators. Generators.\n    return \"Object\";\n  }\n\n  defineNativeMethod(\n    name: SymbolValue | string,\n    length: number,\n    callback: NativeFunctionCallback,\n    desc?: Descriptor = {}\n  ) {\n    let intrinsicName;\n    if (typeof name === \"string\") {\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n    this.defineNativeProperty(\n      name,\n      new NativeFunctionValue(this.$Realm, intrinsicName, name, length, callback, false),\n      desc\n    );\n  }\n\n  defineNativeProperty(name: SymbolValue | string, value?: Value, desc?: Descriptor = {}) {\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeGetter(name: SymbolValue | string, callback: NativeFunctionCallback, desc?: Descriptor = {}) {\n    let intrinsicName, funcName;\n    if (typeof name === \"string\") {\n      funcName = `get ${name}`;\n      if (this.intrinsicName) intrinsicName = `${this.intrinsicName}.${name}`;\n    } else if (name instanceof SymbolValue) {\n      funcName =\n        name.$Description instanceof Value\n          ? `get [${name.$Description.throwIfNotConcreteString().value}]`\n          : `get [${\"?\"}]`;\n      if (this.intrinsicName && name.intrinsicName) intrinsicName = `${this.intrinsicName}[${name.intrinsicName}]`;\n    } else {\n      invariant(false);\n    }\n\n    let func = new NativeFunctionValue(this.$Realm, intrinsicName, funcName, 0, callback);\n    this.$DefineOwnProperty(name, {\n      get: func,\n      set: this.$Realm.intrinsics.undefined,\n      enumerable: false,\n      configurable: true,\n      ...desc,\n    });\n  }\n\n  defineNativeConstant(name: SymbolValue | string, value?: Value, desc?: Descriptor = {}) {\n    this.$DefineOwnProperty(name, {\n      value,\n      writable: false,\n      enumerable: false,\n      configurable: false,\n      ...desc,\n    });\n  }\n\n  getOwnPropertyKeysArray(): Array<string> {\n    if (this.isPartial() || this.unknownProperty !== undefined) {\n      AbstractValue.reportIntrospectionError(this);\n      throw new FatalError();\n    }\n\n    let keyArray = Array.from(this.properties.keys());\n    keyArray = keyArray.filter(x => {\n      let pb = this.properties.get(x);\n      if (!pb || pb.descriptor === undefined) return false;\n      let pv = pb.descriptor.value;\n      if (pv === undefined) return true;\n      if (!pv.mightHaveBeenDeleted()) return true;\n      // The property may or may not be there at runtime.\n      // We can at best return an abstract keys array.\n      // For now just terminate.\n      invariant(pv instanceof AbstractValue);\n      AbstractValue.reportIntrospectionError(pv);\n      throw new FatalError();\n    });\n    this.$Realm.callReportObjectGetOwnProperties(this);\n    return keyArray;\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    let obj = set({});\n\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      ThrowIfMightHaveBeenDeleted(desc.value);\n      let serializedDesc: any = { enumerable: desc.enumerable, configurable: desc.configurable };\n      if (desc.value) {\n        serializedDesc.writable = desc.writable;\n        serializedDesc.value = desc.value.serialize(stack);\n      } else {\n        invariant(desc.get !== undefined);\n        serializedDesc.get = desc.get.serialize(stack);\n        invariant(desc.set !== undefined);\n        serializedDesc.set = desc.set.serialize(stack);\n      }\n      Object.defineProperty(obj, key, serializedDesc);\n    }\n    return obj;\n  }\n\n  // ECMA262 9.1.1\n  $GetPrototypeOf(): ObjectValue | NullValue {\n    return this.$Prototype;\n  }\n\n  // ECMA262 9.1.2\n  $SetPrototypeOf(V: ObjectValue | NullValue): boolean {\n    // 1. Return ! OrdinarySetPrototypeOf(O, V).\n    return OrdinarySetPrototypeOf(this.$Realm, this, V);\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    // 1. Return ! OrdinaryIsExtensible(O).\n    return OrdinaryIsExtensible(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.4\n  $PreventExtensions(): boolean {\n    // 1. Return ! OrdinaryPreventExtensions(O).\n    return OrdinaryPreventExtensions(this.$Realm, this);\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Return ! OrdinaryGetOwnProperty(O, P).\n    return OrdinaryGetOwnProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    // 1. Return ? OrdinaryDefineOwnProperty(O, P, Desc).\n    return OrdinaryDefineOwnProperty(this.$Realm, this, P, Desc);\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined && this.$GetOwnProperty(P) === undefined) {\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    return OrdinaryHasProperty(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    let prop = this.unknownProperty;\n    if (prop !== undefined && prop.descriptor !== undefined && this.$GetOwnProperty(P) === undefined) {\n      let desc = prop.descriptor;\n      invariant(desc !== undefined);\n      let val = desc.value;\n      invariant(val instanceof AbstractValue);\n      let propName;\n      if (P instanceof StringValue) {\n        propName = P;\n      } else if (typeof P === \"string\") {\n        propName = new StringValue(this.$Realm, P);\n      } else {\n        AbstractValue.reportIntrospectionError(val, \"abstract computed property name\");\n        throw new FatalError();\n      }\n      return this.specializeJoin(val, propName);\n    }\n\n    // 1. Return ? OrdinaryGet(O, P, Receiver).\n    return OrdinaryGet(this.$Realm, this, P, Receiver);\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    // We assume that simple objects have no getter/setter properties.\n    if (this !== Receiver || !this.isSimple() || P.mightNotBeString()) {\n      AbstractValue.reportIntrospectionError(P, \"TODO\");\n      throw new FatalError();\n    }\n    // If all else fails, use this expression\n    let result;\n    if (this.isPartial()) {\n      result = this.$Realm.createAbstract(\n        TypesDomain.topVal,\n        ValuesDomain.topVal,\n        [this, P],\n        ([o, x]) => t.memberExpression(o, x, true),\n        \"sentinel member expression\"\n      );\n    } else {\n      result = this.$Realm.intrinsics.undefined;\n    }\n    // Get a specialization of the join of all values written to the object\n    // with abstract property names.\n    let prop = this.unknownProperty;\n    if (prop !== undefined) {\n      let desc = prop.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        result = this.specializeJoin(val, P);\n      }\n    }\n    // Join in all of the other values that were written to the object with\n    // concrete property names.\n    for (let [key, propertyBinding] of this.properties) {\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; // deleted\n      invariant(desc.value !== undefined); // otherwise this is not simple\n      let val = desc.value;\n      let cond = this.$Realm.createAbstract(\n        new TypesDomain(BooleanValue),\n        ValuesDomain.topVal,\n        [P],\n        ([x]) => t.binaryExpression(\"===\", x, t.stringLiteral(key)),\n        \"check for known property\"\n      );\n      result = joinValuesAsConditional(this.$Realm, cond, val, result);\n    }\n    return result;\n  }\n\n  specializeJoin(absVal: AbstractValue, propName: Value): AbstractValue {\n    invariant(absVal.args.length === 3);\n    let generic_cond = absVal.args[0];\n    invariant(generic_cond instanceof AbstractValue);\n    let cond = this.specializeCond(generic_cond, propName);\n    let arg1 = absVal.args[1];\n    if (arg1 instanceof AbstractValue && arg1.args.length === 3) arg1 = this.specializeJoin(arg1, propName);\n    let arg2 = absVal.args[2];\n    if (arg2 instanceof AbstractValue && arg2.args.length === 3) arg2 = this.specializeJoin(arg2, propName);\n    return this.$Realm.createAbstract(absVal.types, absVal.values, [cond, arg1, arg2], absVal._buildNode);\n  }\n\n  specializeCond(absVal: AbstractValue, propName: Value): AbstractValue {\n    if (absVal.kind === \"template for property name condition\")\n      return this.$Realm.createAbstract(absVal.types, absVal.values, [absVal.args[0], propName], absVal._buildNode);\n    return absVal;\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    // 1. Return ? OrdinarySet(O, P, V, Receiver).\n    return OrdinarySet(this.$Realm, this, P, V, Receiver);\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    // We assume that simple objects have no getter/setter properties and\n    // that all properties are writable.\n    if (this !== Receiver || !this.isSimple() || P.mightNotBeString()) {\n      AbstractValue.reportIntrospectionError(P, \"TODO\");\n      throw new FatalError();\n    }\n\n    let prop;\n    if (this.unknownProperty === undefined) {\n      prop = {\n        descriptor: undefined,\n        object: this,\n        key: \"\",\n      };\n      this.unknownProperty = prop;\n    } else {\n      prop = this.unknownProperty;\n    }\n    this.$Realm.recordModifiedProperty(prop);\n    let desc = prop.descriptor;\n    if (desc === undefined) {\n      let newVal = V;\n      if (!(V instanceof UndefinedValue)) {\n        // join V with undefined, using a property name test as the condition\n        let cond = this.$Realm.createAbstract(\n          new TypesDomain(BooleanValue),\n          ValuesDomain.topVal,\n          [P, new StringValue(this.$Realm, \"\")],\n          ([x, y]) => t.binaryExpression(\"===\", x, y),\n          \"template for property name condition\"\n        );\n        newVal = joinValuesAsConditional(this.$Realm, cond, V, this.$Realm.intrinsics.undefined);\n      }\n      prop.descriptor = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: newVal,\n      };\n    } else {\n      // join V with current value of this.unknownProperty. I.e. weak update.\n      let oldVal = desc.value;\n      invariant(oldVal !== undefined);\n      let newVal = oldVal;\n      if (!(V instanceof UndefinedValue)) {\n        let cond = this.$Realm.createAbstract(\n          new TypesDomain(BooleanValue),\n          ValuesDomain.topVal,\n          [P, new StringValue(this.$Realm, \"\")],\n          ([x, y]) => t.binaryExpression(\"===\", x, y),\n          \"template for property name condition\"\n        );\n        newVal = joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      }\n      desc.value = newVal;\n    }\n\n    // Since we don't know the name of the property we are writing to, we also need\n    // to perform weak updates of all of the known properties.\n    for (let [key, propertyBinding] of this.properties) {\n      let oldVal = this.$Realm.intrinsics.empty;\n      if (propertyBinding.descriptor && propertyBinding.descriptor.value) {\n        oldVal = propertyBinding.descriptor.value;\n        invariant(oldVal !== undefined); // otherwise this is not simple\n      }\n      let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue), ValuesDomain.topVal, [P], ([x]) =>\n        t.binaryExpression(\"===\", x, t.stringLiteral(key))\n      );\n      let newVal = joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n      OrdinarySet(this.$Realm, this, key, newVal, Receiver);\n    }\n\n    return true;\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (this.unknownProperty !== undefined) {\n      // TODO: generate a delete from the object\n      AbstractValue.reportIntrospectionError(this, P);\n      throw new FatalError();\n    }\n\n    // 1. Return ? OrdinaryDelete(O, P).\n    return OrdinaryDelete(this.$Realm, this, P);\n  }\n\n  // ECMA262 9.1.11\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    return OrdinaryOwnPropertyKeys(this.$Realm, this);\n  }\n}\n"]}