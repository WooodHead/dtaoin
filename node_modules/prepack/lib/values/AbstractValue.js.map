{"version":3,"sources":["../../src/values/AbstractValue.js"],"names":["t","AbstractValue","realm","types","values","args","buildNode","optionalArgs","useAbstractInterpretation","intrinsicName","undefined","Function","length","isTypeCompatibleWith","getType","mightBeEmpty","_buildNode","kind","result","$Realm","type","hasIdentifier","locations","loc","push","val","addSourceLocationsTo","names","gen","preludeGenerator","add_intrinsic","name","startsWith","add_args","derivedIds","get","indexOf","addSourceNamesTo","value","slice","valueType","isTop","mightBeFalse","mightNotBeFalse","includesValueOfType","includesValueNotOfType","clone","promoteEmptyToUndefined","cond","createAbstract","topVal","intrinsics","empty","x","y","binaryExpression","conditionalExpression","reportIntrospectionError","join","propertyName","identity","$GlobalObject","generateErrorInformationForAbstractVal","source_locations","location","desc","$Description","throwIfNotConcreteString","message"],"mappings":"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","file":"AbstractValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeExpression, BabelNodeIdentifier, BabelNodeSourceLocation } from \"babel-types\";\nimport { FatalError } from \"../errors.js\";\nimport type { Realm } from \"../realm.js\";\nimport type { PropertyKeyValue } from \"../types.js\";\n\nimport {\n  AbstractObjectValue,\n  BooleanValue,\n  ConcreteValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  PrimitiveValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  Value,\n} from \"./index.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport invariant from \"../invariant.js\";\n\nimport * as t from \"babel-types\";\n\nexport type AbstractValueBuildNodeFunction = (Array<BabelNodeExpression>) => BabelNodeExpression;\n\nexport default class AbstractValue extends Value {\n  constructor(\n    realm: Realm,\n    types: TypesDomain,\n    values: ValuesDomain,\n    args: Array<Value>,\n    buildNode: AbstractValueBuildNodeFunction | BabelNodeExpression,\n    optionalArgs?: {| kind?: string, intrinsicName?: string, isPure?: boolean |}\n  ) {\n    invariant(realm.useAbstractInterpretation);\n    super(realm, optionalArgs ? optionalArgs.intrinsicName : undefined);\n    invariant(buildNode instanceof Function || args.length === 0);\n    invariant(!Value.isTypeCompatibleWith(types.getType(), ObjectValue) || this instanceof AbstractObjectValue);\n    invariant(types.getType() !== NullValue && types.getType() !== UndefinedValue);\n    this.types = types;\n    this.values = values;\n    this.mightBeEmpty = false;\n    this._buildNode = buildNode;\n    this.args = args;\n    this.kind = optionalArgs ? optionalArgs.kind : undefined;\n  }\n\n  clone(): AbstractValue {\n    let result = new AbstractValue(this.$Realm, this.types, this.values, this.args, this._buildNode);\n    if (this.mightBeEmpty) result.mightBeEmpty = true;\n    if (this.args) result.args = this.args;\n    if (this.kind) result.kind = this.kind;\n    return result;\n  }\n\n  getType() {\n    return this.types.getType();\n  }\n\n  kind: ?string;\n  types: TypesDomain;\n  values: ValuesDomain;\n  mightBeEmpty: boolean;\n  args: Array<Value>;\n  _buildNode: AbstractValueBuildNodeFunction | BabelNodeExpression;\n\n  buildNode(args: Array<BabelNodeExpression>): BabelNodeExpression {\n    return this._buildNode instanceof Function\n      ? ((this._buildNode: any): AbstractValueBuildNodeFunction)(args)\n      : ((this._buildNode: any): BabelNodeExpression);\n  }\n\n  hasIdentifier() {\n    return this._buildNode.type === \"Identifier\";\n  }\n\n  getIdentifier() {\n    invariant(this.hasIdentifier());\n    return ((this._buildNode: any): BabelNodeIdentifier);\n  }\n\n  addSourceLocationsTo(locations: Array<BabelNodeSourceLocation>) {\n    if (!(this._buildNode instanceof Function)) {\n      if (this._buildNode.loc) locations.push(this._buildNode.loc);\n    }\n    for (let val of this.args) {\n      if (val instanceof AbstractValue) val.addSourceLocationsTo(locations);\n    }\n  }\n\n  addSourceNamesTo(names: Array<string>) {\n    let gen = this.$Realm.preludeGenerator;\n    function add_intrinsic(name: string) {\n      if (name.startsWith(\"_$\")) {\n        if (gen === undefined) return;\n        add_args(gen.derivedIds.get(name));\n      } else if (names.indexOf(name) < 0) {\n        names.push(name);\n      }\n    }\n    function add_args(args: void | Array<Value>) {\n      if (args === undefined) return;\n      for (let val of args) {\n        if (val.intrinsicName) {\n          add_intrinsic(val.intrinsicName);\n        } else if (val instanceof AbstractValue) {\n          val.addSourceNamesTo(names);\n        } else if (val instanceof StringValue) {\n          if (val.value.startsWith(\"__\")) {\n            names.push(val.value.slice(2));\n          }\n        }\n      }\n    }\n    if (this.intrinsicName) {\n      add_intrinsic(this.intrinsicName);\n    }\n    add_args(this.args);\n  }\n\n  mightBeFalse(): boolean {\n    let valueType = this.getType();\n    if (valueType === UndefinedValue) return true;\n    if (valueType === NullValue) return true;\n    if (valueType === SymbolValue) return false;\n    if (Value.isTypeCompatibleWith(valueType, ObjectValue)) return false;\n    if (this.values.isTop()) return true;\n    return this.values.mightBeFalse();\n  }\n\n  mightNotBeFalse(): boolean {\n    let valueType = this.getType();\n    if (valueType === UndefinedValue) return false;\n    if (valueType === NullValue) return false;\n    if (valueType === SymbolValue) return true;\n    if (Value.isTypeCompatibleWith(valueType, ObjectValue)) return true;\n    if (this.values.isTop()) return true;\n    return this.values.mightNotBeFalse();\n  }\n\n  mightBeNull(): boolean {\n    let valueType = this.getType();\n    if (valueType === NullValue) return true;\n    if (valueType !== Value) return false;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueOfType(NullValue);\n  }\n\n  mightBeNumber(): boolean {\n    let valueType = this.getType();\n    if (valueType === NumberValue) return true;\n    if (valueType !== Value) return false;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueOfType(NumberValue);\n  }\n\n  mightNotBeNumber(): boolean {\n    let valueType = this.getType();\n    if (valueType === NumberValue) return false;\n    if (valueType !== Value) return true;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueNotOfType(NumberValue);\n  }\n\n  mightNotBeObject(): boolean {\n    let valueType = this.getType();\n    if (Value.isTypeCompatibleWith(valueType, PrimitiveValue)) return true;\n    if (Value.isTypeCompatibleWith(valueType, ObjectValue)) return false;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueNotOfType(ObjectValue);\n  }\n\n  mightBeObject(): boolean {\n    let valueType = this.getType();\n    if (Value.isTypeCompatibleWith(valueType, PrimitiveValue)) return false;\n    if (Value.isTypeCompatibleWith(valueType, ObjectValue)) return true;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueOfType(ObjectValue);\n  }\n\n  mightNotBeString(): boolean {\n    let valueType = this.getType();\n    if (valueType === StringValue) return false;\n    if (valueType !== Value) return true;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueNotOfType(StringValue);\n  }\n\n  mightBeUndefined(): boolean {\n    let valueType = this.getType();\n    if (valueType === UndefinedValue) return true;\n    if (valueType !== Value) return false;\n    if (this.values.isTop()) return true;\n    return this.values.includesValueOfType(UndefinedValue);\n  }\n\n  mightHaveBeenDeleted(): boolean {\n    return this.mightBeEmpty;\n  }\n\n  promoteEmptyToUndefined(): Value {\n    if (this.values.isTop()) return this;\n    if (!this.mightBeEmpty) return this;\n    let result = this.clone();\n    result.mightBeEmpty = false;\n    result.values = result.values.promoteEmptyToUndefined();\n    let cond = this.$Realm.createAbstract(\n      new TypesDomain(BooleanValue),\n      ValuesDomain.topVal,\n      [this, this.$Realm.intrinsics.empty],\n      ([x, y]) => t.binaryExpression(\"===\", x, y)\n    );\n    result.args = [cond, this.$Realm.intrinsics.undefined, this];\n    result._buildNode = args => t.conditionalExpression(args[0], args[1], args[2]);\n    return result;\n  }\n\n  throwIfNotConcrete(): ConcreteValue {\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  throwIfNotConcreteNumber(): NumberValue {\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  throwIfNotConcreteString(): StringValue {\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  throwIfNotConcreteBoolean(): BooleanValue {\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  throwIfNotConcreteSymbol(): SymbolValue {\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  throwIfNotConcreteObject(): ObjectValue {\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    invariant(!(this instanceof AbstractObjectValue));\n    AbstractValue.reportIntrospectionError(this);\n    throw new FatalError();\n  }\n\n  static generateErrorInformationForAbstractVal(val: AbstractValue): string {\n    let names = [];\n    val.addSourceNamesTo(names);\n    if (names.length === 0) {\n      val.addSourceNamesTo(names);\n    }\n    return `abstract value${names.length > 1 ? \"s\" : \"\"} ${names.join(\" and \")}`;\n  }\n\n  static reportIntrospectionError(val: Value, propertyName: void | PropertyKeyValue) {\n    let realm = val.$Realm;\n\n    let identity;\n    if (val === realm.$GlobalObject) identity = \"global\";\n    else if (val instanceof AbstractValue) {\n      identity = this.generateErrorInformationForAbstractVal(val);\n    } else identity = val.intrinsicName || \"(some value)\";\n\n    let source_locations = [];\n    if (val instanceof AbstractValue) val.addSourceLocationsTo(source_locations);\n\n    let location;\n    if (propertyName instanceof SymbolValue) {\n      let desc = propertyName.$Description;\n      if (desc) {\n        location = `at symbol [${desc.throwIfNotConcreteString().value}]`;\n      } else {\n        location = `at symbol [${\"(no description)\"}]`;\n      }\n    } else if (propertyName instanceof StringValue) location = `at ${propertyName.value}`;\n    else if (typeof propertyName === \"string\") location = `at ${propertyName}`;\n    else location = source_locations.length === 0 ? \"\" : `at ${source_locations.join(\"\\n\")}`;\n\n    let message = `This operation is not yet supported on ${identity} ${location}`;\n\n    return realm.reportIntrospectionError(message);\n  }\n}\n"]}