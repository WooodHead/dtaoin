{"version":3,"sources":["../../../src/intrinsics/node/fs.js"],"names":["realm","intrinsicName","nativeFS","process","binding","obj","intrinsics","ObjectPrototype","defineNativeMethod","context","args","undefined","fileName","internalModuleStat","path","buffer","float64buffer","Float64Array","lstat","fd","fstat","flags","mode","open","close","offset","length","position","bytesRead","read","result","internalModuleReadFile","types","values","Set","buildNode","preludeGenerator","FSReqWrap","createAbstract","value","writable","configurable","enumerable"],"mappings":"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","file":"fs.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../../invariant.js\";\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, NumberValue, StringValue } from \"../../values/index.js\";\nimport { DefinePropertyOrThrow, ToString, ToNumber } from \"../../methods/index.js\";\nimport { TypesDomain, ValuesDomain } from \"../../domains/index.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\nimport { getNodeBufferFromTypedArray } from \"./utils.js\";\n\ndeclare var process: any;\n\nexport default function(realm: Realm): ObjectValue {\n  let intrinsicName = 'process.binding(\"fs\")';\n  let nativeFS = process.binding(\"fs\");\n\n  // fs\n  let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, intrinsicName);\n  obj.defineNativeMethod(\"FSInitialize\", 0, (context, args) => {\n    // TODO: Implement the native implementation.\n    return realm.intrinsics.undefined;\n  });\n  obj.defineNativeMethod(\"internalModuleStat\", 0, (context, args) => {\n    const fileName = ToString(realm, args[0]);\n    return new NumberValue(realm, nativeFS.internalModuleStat(fileName));\n  });\n  obj.defineNativeMethod(\"lstat\", 0, (context, args) => {\n    const path = ToString(realm, args[0]);\n    invariant(args[1] instanceof ObjectValue);\n    const buffer = getNodeBufferFromTypedArray(realm, args[1]);\n    const float64buffer = new Float64Array(buffer.buffer);\n    nativeFS.lstat(path, float64buffer);\n    return args[1];\n  });\n  obj.defineNativeMethod(\"fstat\", 0, (context, args) => {\n    const fd = ToNumber(realm, args[0]);\n    invariant(args[1] instanceof ObjectValue);\n    const buffer = getNodeBufferFromTypedArray(realm, args[1]);\n    const float64buffer = new Float64Array(buffer.buffer);\n    nativeFS.fstat(fd, float64buffer);\n    return args[1];\n  });\n  obj.defineNativeMethod(\"open\", 0, (context, args) => {\n    const path = ToString(realm, args[0]);\n    const flags = ToNumber(realm, args[1]);\n    const mode = ToNumber(realm, args[2]);\n    const fd = nativeFS.open(path, flags, mode);\n    return new NumberValue(realm, fd);\n  });\n  obj.defineNativeMethod(\"close\", 0, (context, args) => {\n    const fd = ToNumber(realm, args[0]);\n    nativeFS.close(fd);\n    return realm.intrinsics.undefined;\n  });\n  obj.defineNativeMethod(\"read\", 0, (context, args) => {\n    const fd = ToNumber(realm, args[0]);\n    invariant(args[1] instanceof ObjectValue);\n    const buffer = getNodeBufferFromTypedArray(realm, args[1]);\n    const offset = ToNumber(realm, args[2]);\n    const length = ToNumber(realm, args[3]);\n    const position = args[4] === realm.intrinsics.undefined ? undefined : ToNumber(realm, args[4]);\n    const bytesRead = nativeFS.read(fd, buffer, offset, length, position);\n    return new NumberValue(realm, bytesRead);\n  });\n  obj.defineNativeMethod(\"internalModuleReadFile\", 0, (context, args) => {\n    const path = ToString(realm, args[0]);\n    const result = nativeFS.internalModuleReadFile(path);\n    if (result === undefined) {\n      return realm.intrinsics.undefined;\n    }\n    return new StringValue(realm, result);\n  });\n\n  let types = new TypesDomain(ObjectValue);\n  let values = new ValuesDomain(new Set([new ObjectValue(realm)]));\n  let buildNode = buildExpressionTemplate(`${intrinsicName}.FSReqWrap`)(realm.preludeGenerator);\n  let FSReqWrap = realm.createAbstract(types, values, [], buildNode, undefined, `${intrinsicName}.FSReqWrap`);\n  DefinePropertyOrThrow(realm, obj, \"FSReqWrap\", {\n    value: FSReqWrap,\n    writable: true,\n    configurable: true,\n    enumerable: true,\n  });\n\n  // TODO: Implement more of the native methods here. Ideally all of them should\n  // just be automatically proxied.\n\n  return obj;\n}\n"]}