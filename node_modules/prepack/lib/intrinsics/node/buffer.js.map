{"version":3,"sources":["../../../src/intrinsics/node/buffer.js"],"names":["realm","nativeBuffer","process","binding","nativeBufferPrototype","require","Buffer","prototype","intrinsicName","obj","intrinsics","ObjectPrototype","setupBufferJS","setupContext","setupArgs","length","proto","simpleWrapperNames","name","wrapper","context","args","utf8Slice","self","decodedArgs","map","arg","i","utf8String","apply","copy","bytesCopied","undefined","createFromString","kMaxLength","kStringMaxLength"],"mappings":"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","file":"buffer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../../invariant.js\";\nimport { FatalError } from \"../../errors.js\";\nimport { Realm } from \"../../realm.js\";\nimport { NumberValue, NativeFunctionValue, ObjectValue, StringValue } from \"../../values/index.js\";\nimport { Set, ToInteger } from \"../../methods/index.js\";\nimport { getNodeBufferFromTypedArray } from \"./utils.js\";\n\ndeclare var process: any;\n\nexport default function(realm: Realm): ObjectValue {\n  let nativeBuffer = process.binding(\"buffer\");\n  let nativeBufferPrototype = (require(\"buffer\"): any).Buffer.prototype;\n\n  let intrinsicName = 'process.binding(\"buffer\")';\n  let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, intrinsicName);\n\n  // Buffer\n\n  let setupBufferJS = new NativeFunctionValue(\n    realm,\n    intrinsicName + \".setupBufferJS\",\n    \"setupBufferJS\",\n    0,\n    (setupContext, setupArgs) => {\n      invariant(setupArgs.length === 2);\n      invariant(setupArgs[0] instanceof ObjectValue);\n      invariant(setupArgs[1] instanceof ObjectValue);\n      // TODO: Mutate the second argument by setting one of the properties to\n      // Buffer prototype just like the native implementation does.\n      let [proto] = setupArgs;\n\n      let simpleWrapperNames = [\n        \"asciiSlice\",\n        \"base64Slice\",\n        \"latin1Slice\",\n        \"hexSlice\",\n        \"ucs2Slice\",\n        \"asciiWrite\",\n        \"base64Write\",\n        \"latin1Write\",\n        \"hexWrite\",\n        \"ucs2Write\",\n        \"utf8Write\",\n      ];\n\n      for (let name of simpleWrapperNames) {\n        let wrapper = new NativeFunctionValue(realm, \"Buffer.prototype.\" + name, name, 0, (context, args) => {\n          throw new FatalError(\"TODO: \" + name);\n        });\n        Set(realm, proto, name, wrapper, true);\n      }\n\n      // utf8Slice is used to read source code.\n      let utf8Slice = new NativeFunctionValue(realm, \"Buffer.prototype.utf8Slice\", \"utf8Slice\", 0, (context, args) => {\n        invariant(context instanceof ObjectValue);\n        let self = getNodeBufferFromTypedArray(realm, context);\n        let decodedArgs = args.map((arg, i) => ToInteger(realm, arg));\n        let utf8String = nativeBufferPrototype.utf8Slice.apply(self, decodedArgs);\n        return new StringValue(realm, utf8String);\n      });\n      Set(realm, proto, \"utf8Slice\", utf8Slice, true);\n\n      // copy has recently moved from the prototype to the instance upstream.\n      let copy = new NativeFunctionValue(realm, \"Buffer.prototype.copy\", \"copy\", 0, (context, args) => {\n        invariant(context instanceof ObjectValue);\n        let self = getNodeBufferFromTypedArray(realm, context);\n        let decodedArgs = args.map((arg, i) => {\n          if (i === 0) {\n            invariant(arg instanceof ObjectValue);\n            return getNodeBufferFromTypedArray(realm, arg);\n          } else {\n            return ToInteger(realm, arg);\n          }\n        });\n        let bytesCopied = nativeBufferPrototype.copy.apply(self, decodedArgs);\n        return new NumberValue(realm, bytesCopied);\n      });\n      Set(realm, proto, \"copy\", copy, true);\n\n      // TODO: Set up more methods on the prototype and bindingObject\n      return realm.intrinsics.undefined;\n    }\n  );\n  Set(realm, obj, \"setupBufferJS\", setupBufferJS, true);\n\n  let createFromString = new NativeFunctionValue(\n    realm,\n    intrinsicName + \".createFromString\",\n    \"createFromString\",\n    0,\n    (context, args) => {\n      throw new FatalError(\"TODO\");\n    }\n  );\n  Set(realm, obj, \"createFromString\", createFromString, true);\n\n  let simpleWrapperNames = [\n    \"byteLengthUtf8\",\n    \"copy\",\n    \"compare\",\n    \"compareOffset\",\n    \"fill\",\n    \"indexOfBuffer\",\n    \"indexOfNumber\",\n    \"indexOfString\",\n\n    \"readDoubleBE\",\n    \"readDoubleLE\",\n    \"readFloatBE\",\n    \"readFloatLE\",\n\n    \"writeDoubleBE\",\n    \"writeDoubleLE\",\n    \"writeFloatBE\",\n    \"writeFloatLE\",\n\n    \"swap16\",\n    \"swap32\",\n    \"swap64\",\n  ];\n\n  for (let name of simpleWrapperNames) {\n    let wrapper = new NativeFunctionValue(realm, intrinsicName + \".\" + name, name, 0, (context, args) => {\n      throw new FatalError(\"TODO\");\n    });\n    Set(realm, obj, name, wrapper, true);\n  }\n\n  Set(realm, obj, \"kMaxLength\", new NumberValue(realm, nativeBuffer.kMaxLength), true);\n  Set(realm, obj, \"kStringMaxLength\", new NumberValue(realm, nativeBuffer.kStringMaxLength), true);\n\n  return obj;\n}\n"]}