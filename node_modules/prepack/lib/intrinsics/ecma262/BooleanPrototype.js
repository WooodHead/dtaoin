"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */

exports.default = function (realm, obj) {
  // ECMA262 19.3.1
  obj.$BooleanData = realm.intrinsics.false;

  // ECMA262 19.3.3.3
  obj.defineNativeMethod("toString", 0, function (context) {
    var target = context instanceof _index.ObjectValue ? context.$BooleanData : context;
    if (target instanceof _index.AbstractValue && target.getType() === _index.BooleanValue) {
      var codeTemplate = "(A).toString()";
      return realm.createAbstract(new _index2.TypesDomain(_index.StringValue), _index2.ValuesDomain.topVal, [target], function (_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            a = _ref2[0];

        return (0, _builder2.default)(codeTemplate)(realm.preludeGenerator)({ A: a });
      });
    }
    // 1. Let b be ? thisBooleanValue(this value).
    var b = (0, _to.thisBooleanValue)(realm, context);

    // 2. If b is true, return "true"; else return "false".
    return new _index.StringValue(realm, b.value ? "true" : "false");
  });

  // ECMA262 19.3.3.4
  obj.defineNativeMethod("valueOf", 0, function (context) {
    // 1. Return ? thisBooleanValue(this value).
    return (0, _to.thisBooleanValue)(realm, context);
  });
};

var _index = require("../../values/index.js");

var _to = require("../../methods/to.js");

var _index2 = require("../../domains/index.js");

var _builder = require("../../utils/builder.js");

var _builder2 = _interopRequireDefault(_builder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=BooleanPrototype.js.map