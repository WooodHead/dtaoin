{"version":3,"sources":["../../../src/intrinsics/ecma262/SymbolPrototype.js"],"names":["realm","obj","defineNativeMethod","target","context","$SymbolData","getType","codeTemplate","createAbstract","topVal","a","preludeGenerator","A","s","throwIfNotConcrete","sym","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcreteSymbol","SymbolToPrimitive","hint","writable","defineNativeProperty","SymbolToStringTag"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAkBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,MAAIC,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsC,mBAAW;AAC/C,QAAMC,SAASC,wCAAiCA,QAAQC,WAAzC,GAAuDD,OAAtE;AACA,QAAID,0CAAmCA,OAAOG,OAAP,yBAAvC,EAAyE;AACvE,UAAMC,eAAe,gBAArB;AACA,aAAOP,MAAMQ,cAAN,CAAqB,2CAArB,EAAmD,qBAAaC,MAAhE,EAAwE,CAACN,MAAD,CAAxE,EAAkF;AAAA;AAAA,YAAEO,CAAF;;AAAA,eACvF,uBAAwBH,YAAxB,EAAsCP,MAAMW,gBAA5C,EAA8D,EAAEC,GAAGF,CAAL,EAA9D,CADuF;AAAA,OAAlF,CAAP;AAGD;AACD;AACA,QAAIG,IAAIT,QAAQU,kBAAR,EAAR;;AAEA;AACA,QAAIC,YAAJ;AACA,QAAIF,+BAAJ,EAA8B;AAC5BE,YAAMF,CAAN;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAI,EAAEA,+BAAF,CAAJ,EAAiC;AAC/B,cAAMb,MAAMgB,0BAAN,CAAiChB,MAAMiB,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,UAAI,CAACL,EAAER,WAAP,EAAoB;AAClB,cAAML,MAAMgB,0BAAN,CAAiChB,MAAMiB,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACAH,YAAMF,EAAER,WAAR;AACD;AACDU,QAAII,wBAAJ;AACA,6BAAUJ,iCAAV,EAAsC,yDAAtC;AACA;AACA,WAAO,uBAAgBf,KAAhB,EAAuB,qCAAwBA,KAAxB,EAA+Be,GAA/B,CAAvB,CAAP;AACD,GAlCD;;AAoCA;AACAd,MAAIC,kBAAJ,CAAuB,SAAvB,EAAkC,CAAlC,EAAqC,mBAAW;AAC9C;AACA,QAAIW,IAAIT,QAAQU,kBAAR,EAAR;;AAEA;AACA,QAAID,+BAAJ,EAA8B,OAAOA,CAAP;;AAE9B;AACA,QAAI,EAAEA,+BAAF,CAAJ,EAAiC;AAC/B,YAAMb,MAAMgB,0BAAN,CAAiChB,MAAMiB,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,CAACL,EAAER,WAAP,EAAoB;AAClB,YAAML,MAAMgB,0BAAN,CAAiChB,MAAMiB,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,WAAOL,EAAER,WAAT;AACD,GAnBD;;AAqBA;AACAJ,MAAIC,kBAAJ,CACEF,MAAMiB,UAAN,CAAiBG,iBADnB,EAEE,CAFF,EAGE,UAAChB,OAAD,SAAqB;AAAA;AAAA,QAAViB,IAAU;;AACnB;AACA,QAAIR,IAAIT,QAAQU,kBAAR,EAAR;;AAEA;AACA,QAAID,+BAAJ,EAA8B,OAAOA,CAAP;;AAE9B;AACA,QAAI,EAAEA,+BAAF,CAAJ,EAAiC;AAC/B,YAAMb,MAAMgB,0BAAN,CAAiChB,MAAMiB,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,CAACL,EAAER,WAAP,EAAoB;AAClB,YAAML,MAAMgB,0BAAN,CAAiChB,MAAMiB,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,WAAOL,EAAER,WAAT;AACD,GAtBH,EAuBE,EAAEiB,UAAU,KAAZ,EAvBF;;AA0BA;AACArB,MAAIsB,oBAAJ,CAAyBvB,MAAMiB,UAAN,CAAiBO,iBAA1C,EAA6D,uBAAgBxB,KAAhB,EAAuB,QAAvB,CAA7D,EAA+F,EAAEsB,UAAU,KAAZ,EAA/F;AACD,C;;AA/FD;;AACA;;AACA;;AACA;;;;AACA","file":"SymbolPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, SymbolValue, AbstractValue } from \"../../values/index.js\";\nimport { SymbolDescriptiveString } from \"../../methods/index.js\";\nimport { TypesDomain, ValuesDomain } from \"../../domains/index.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.4.3.2\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    const target = context instanceof ObjectValue ? context.$SymbolData : context;\n    if (target instanceof AbstractValue && target.getType() === SymbolValue) {\n      const codeTemplate = \"(A).toString()\";\n      return realm.createAbstract(new TypesDomain(StringValue), ValuesDomain.topVal, [target], ([a]) =>\n        buildExpressionTemplate(codeTemplate)(realm.preludeGenerator)({ A: a })\n      );\n    }\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, let sym be s.\n    let sym;\n    if (s instanceof SymbolValue) {\n      sym = s;\n    } else {\n      // 3. Else,\n      // a. If Type(s) is not Object, throw a TypeError exception.\n      if (!(s instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // b. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n      if (!s.$SymbolData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // c. Let sym be the value of s's [[SymbolData]] internal slot.\n      sym = s.$SymbolData;\n    }\n    sym.throwIfNotConcreteSymbol();\n    invariant(sym instanceof SymbolValue, \"expected symbol data internal slot to be a symbol value\");\n    // 4. Return SymbolDescriptiveString(sym).\n    return new StringValue(realm, SymbolDescriptiveString(realm, sym));\n  });\n\n  // ECMA262 19.4.3.3\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, return s.\n    if (s instanceof SymbolValue) return s;\n\n    // 3. If Type(s) is not Object, throw a TypeError exception.\n    if (!(s instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n    if (!s.$SymbolData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. Return the value of s's [[SymbolData]] internal slot.\n    return s.$SymbolData;\n  });\n\n  // ECMA262 19.4.3.4\n  obj.defineNativeMethod(\n    realm.intrinsics.SymbolToPrimitive,\n    1,\n    (context, [hint]) => {\n      // 1. Let s be the this value.\n      let s = context.throwIfNotConcrete();\n\n      // 2. If Type(s) is Symbol, return s.\n      if (s instanceof SymbolValue) return s;\n\n      // 3. If Type(s) is not Object, throw a TypeError exception.\n      if (!(s instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n      if (!s.$SymbolData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 5. Return s.[[SymbolData]].\n      return s.$SymbolData;\n    },\n    { writable: false }\n  );\n\n  // ECMA262 19.4.3.5\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Symbol\"), { writable: false });\n}\n"]}