{"version":3,"sources":["../../../src/intrinsics/ecma262/Date.js"],"names":["realm","lastNow","offsetGenerator","getCurrentTime","useAbstractInterpretation","tmp","deriveAbstract","topVal","buildDateNow","preludeGenerator","isPure","skipInvariant","newNow","Date","now","strictlyMonotonicDateNow","Math","floor","func","context","args","argCount","NewTarget","year","month","date","hours","minutes","seconds","ms","numberOfArgs","y","m","dt","h","min","s","milli","yr","isNaN","finalDate","O","$DateValue","undefined","throwIfNotConcreteNumber","value","value_","throwIfNotConcrete","tv","v","getTime","defineNativeMethod","string","reportIntrospectionError","parsedDate","parse"],"mappings":"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","file":"Date.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, NumberValue, StringValue, ObjectValue } from \"../../values/index.js\";\nimport { ToInteger, ToNumber, ToPrimitive } from \"../../methods/to.js\";\nimport { OrdinaryCreateFromConstructor } from \"../../methods/create.js\";\nimport { MakeTime, MakeDate, MakeDay, TimeClip, UTC, ToDateString, thisTimeValue } from \"../../methods/date.js\";\nimport { TypesDomain, ValuesDomain } from \"../../domains/index.js\";\nimport { FatalError } from \"../../errors.js\";\nimport invariant from \"../../invariant.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\nimport seedrandom from \"seedrandom\";\n\nlet buildDateNow = buildExpressionTemplate(\"global.Date.now()\");\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let lastNow;\n  let offsetGenerator;\n  function getCurrentTime(): AbstractValue | NumberValue {\n    if (realm.useAbstractInterpretation) {\n      let tmp = realm.deriveAbstract(\n        new TypesDomain(NumberValue),\n        ValuesDomain.topVal,\n        [],\n        buildDateNow(realm.preludeGenerator),\n        { isPure: true, skipInvariant: true }\n      );\n      invariant(tmp instanceof AbstractValue, \"getCurrentTime() should always return and abstract value\");\n      return tmp;\n    } else {\n      let newNow = Date.now();\n      if (realm.strictlyMonotonicDateNow && lastNow >= newNow) {\n        if (!offsetGenerator) offsetGenerator = seedrandom(0);\n        // certain behaviors in the test262 test suite can only be (reliably) triggered if Date.now() is strictly monotonically increasing\n        // TODO: Set the strictlyMonotonicDateNow option on the realm in the test262 test runner, fix the issues that will come up in the tests, and remove this TODO.\n        newNow = lastNow + 1 + Math.floor(offsetGenerator() * 500);\n      }\n      lastNow = newNow;\n      return new NumberValue(realm, newNow);\n    }\n  }\n\n  // ECMA262 20.3.2\n  let func = new NativeFunctionValue(realm, \"Date\", \"Date\", 7, (context, args, argCount, NewTarget) => {\n    if (argCount >= 2) {\n      // ECMA262 20.3.2.1\n      let [year, month, date, hours, minutes, seconds, ms] = args;\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs â‰¥ 2.\n      invariant(numberOfArgs >= 2, \"expected two or more arguments\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        // a. Let y be ? ToNumber(year).\n        let y = ToNumber(realm, year);\n\n        // b. Let m be ? ToNumber(month).\n        let m = ToNumber(realm, month);\n\n        // c. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n        let dt = argCount >= 3 ? ToNumber(realm, date) : 1;\n\n        // d. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n        let h = argCount >= 4 ? ToNumber(realm, hours) : 0;\n\n        // e. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n        let min = argCount >= 5 ? ToNumber(realm, minutes) : 0;\n\n        // f. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n        let s = argCount >= 6 ? ToNumber(realm, seconds) : 0;\n\n        // g. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n        let milli = argCount >= 7 ? ToNumber(realm, ms) : 0;\n\n        // h. If y is not NaN and 0 â‰¤ ToInteger(y) â‰¤ 99, let yr be 1900+ToInteger(y); otherwise, let yr be y.\n        let yr;\n        if (!isNaN(y) && ToInteger(realm, y) >= 0 && ToInteger(realm, y) <= 99) {\n          yr = 1900 + ToInteger(realm, new NumberValue(realm, y));\n        } else {\n          yr = y;\n        }\n\n        // i. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).\n        let finalDate = MakeDate(realm, MakeDay(realm, yr, m, dt), MakeTime(realm, h, min, s, milli));\n\n        // j. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", Â« [[DateValue]] Â»).\n        let O = OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // k. Set the [[DateValue]] internal slot of O to TimeClip(UTC(finalDate)).\n        O.$DateValue = TimeClip(realm, UTC(realm, finalDate));\n\n        // l. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    } else if (argCount === 1) {\n      // ECMA262 20.3.2.2\n      let [value_] = args;\n      let value = value_.throwIfNotConcrete();\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 1.\n      invariant(numberOfArgs === 1, \"expected number of arguments to equal 1\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        let tv;\n\n        // a. If Type(value) is Object and value has a [[DateValue]] internal slot, then\n        if (value instanceof ObjectValue && value.$DateValue !== undefined) {\n          // i. Let tv be thisTimeValue(value).\n          tv = thisTimeValue(realm, value);\n        } else {\n          // b. Else,\n          // i. Let v be ? ToPrimitive(value)\n          let v = ToPrimitive(realm, value);\n\n          // ii. If Type(v) is String, then\n          if (v instanceof StringValue) {\n            // 1. Let tv be the result of parsing v as a date, in exactly the same manner as for the parse\n            //    method (20.3.3.2). If the parse resulted in an abrupt completion, tv is the Completion Record.\n            tv = new NumberValue(realm, new Date(v.value).getTime());\n\n            // 2. ReturnIfAbrupt(tv).\n          } else {\n            // iii. Else,\n            // 1. Let tv be ? ToNumber(v).\n            tv = new NumberValue(realm, ToNumber(realm, v));\n          }\n        }\n\n        // c. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", Â« [[DateValue]] Â»).\n        let O = OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // d. Set the [[DateValue]] internal slot of O to TimeClip(tv).\n        O.$DateValue = TimeClip(realm, tv);\n\n        // e. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    } else {\n      // ECMA262 20.3.2.3\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 0.\n      invariant(numberOfArgs === 0, \"expected zero arguments\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        // a. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", Â« [[DateValue]] Â»).\n        let O = OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // b. Set the [[DateValue]] internal slot of O to the time value (UTC) identifying the current time.\n        O.$DateValue = getCurrentTime();\n\n        // c. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    }\n  });\n\n  // ECMA262 20.3.3.1\n  func.defineNativeMethod(\"now\", 0, context => {\n    return getCurrentTime();\n  });\n\n  // ECMA262 20.3.3.2\n  func.defineNativeMethod(\"parse\", 1, (context, [string]) => {\n    if (realm.useAbstractInterpretation) {\n      AbstractValue.reportIntrospectionError(string);\n      throw new FatalError();\n    } else {\n      const parsedDate = Date.parse(string.value);\n      return new NumberValue(realm, parsedDate);\n    }\n  });\n\n  // ECMA262 20.3.3.4\n  func.defineNativeMethod(\"UTC\", 7, (context, [year, month, date, hours, minutes, seconds, ms], argCount) => {\n    // 1. Let y be ? ToNumber(year).\n    let y = ToNumber(realm, year);\n\n    // 2. Let m be ? ToNumber(month).\n    let m = argCount >= 2 ? ToNumber(realm, month) : 0;\n\n    // 3. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n    let dt = argCount >= 3 ? ToNumber(realm, date) : 1;\n\n    // 4. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n    let h = argCount >= 4 ? ToNumber(realm, hours) : 0;\n\n    // 5. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n    let min = argCount >= 5 ? ToNumber(realm, minutes) : 0;\n\n    // 6. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n    let s = argCount >= 6 ? ToNumber(realm, seconds) : 0;\n\n    // 7. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n    let milli = argCount >= 7 ? ToNumber(realm, ms) : 0;\n\n    // 8. If y is not NaN and 0 â‰¤ ToInteger(y) â‰¤ 99, let yr be 1900+ToInteger(y); otherwise, let yr be y.\n    let yr = !isNaN(y) && ToInteger(realm, y) >= 0 && ToInteger(realm, y) <= 99 ? 1900 + ToInteger(realm, y) : y;\n\n    // 9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\n    return TimeClip(realm, MakeDate(realm, MakeDay(realm, yr, m, dt), MakeTime(realm, h, min, s, milli)));\n  });\n\n  return func;\n}\n"]}