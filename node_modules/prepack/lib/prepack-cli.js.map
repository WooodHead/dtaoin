{"version":3,"sources":["../src/prepack-cli.js"],"names":["run","Object","Array","console","JSON","process","prepackStdin","prepackFileSync","FatalError","CompatibilityValues","fs","HELP_STR","map","v","join","args","from","argv","splice","inputFilenames","outputFilename","compatibility","mathRandomSeed","inputSourceMap","outputSourceMap","statsFileName","flags","initializeMoreModules","trace","debugNames","inlineExpressions","logStatistics","logModules","delayInitializations","delayUnsupportedRequires","internalDebug","serialize","residual","profile","length","arg","shift","startsWith","push","slice","includes","error","exit","log","keys","s","resolvedOptions","assign","inputSourceMapFilename","errorHandler","sourceMaps","errors","Map","diagnostic","location","set","processSerializedCode","serialized","x","message","stack","size","foundFatal","loc","severity","source","start","line","column","errorCode","err","code","writeFileSync","statistics","undefined","timingStats","stats","SerializerStatistics","TimingStatistics","MemoryStatistics","getHeapStatistics","stringify","__residual"],"mappings":"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","file":"prepack-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* eslint-disable no-shadow */\n\nimport { CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"./errors.js\";\nimport { type Compatibility, CompatibilityValues } from \"./options.js\";\nimport { prepackStdin, prepackFileSync } from \"./prepack-node.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport fs from \"fs\";\nimport v8 from \"v8\";\n\n// Prepack helper\ndeclare var __residual: any;\n\n// Currently we need to explictly pass the captured variables we want to access.\n// TODO: In a future version of this can be automatic.\nfunction run(\n  Object,\n  Array,\n  console,\n  JSON,\n  process,\n  prepackStdin,\n  prepackFileSync,\n  FatalError,\n  CompatibilityValues,\n  fs\n) {\n  let HELP_STR = `\n    input               The name of the file to run Prepack over (for web please provide the single js bundle file)\n    --out               The name of the output file\n    --compatibility     The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(\", \")}]\n    --mathRandomSeed    If you want Prepack to evaluate Math.random() calls, please provide a seed.\n    --srcmapIn          The input sourcemap filename. If present, Prepack will output a sourcemap that maps from\n                        the original file (pre-input sourcemap) to Prepack's output\n    --srcmapOut         The output sourcemap filename.\n    --debugNames        Changes the output of Prepack so that for named functions and variables that get emitted into\n                        Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n    --speculate         Enable speculative initialization of modules (for the module system Prepack has builtin\n                        knowledge about). Prepack will try to execute all factory functions it is able to.\n    --trace             Traces the order of module initialization.\n    --serialize         Serializes the partially evaluated global environment as a program that recreates it.\n                        (default = true)\n    --residual          Produces the residual program that results after constant folding.\n    --profile           Enables console logging of profile information of different phases of prepack.\n    --statsFile         The name of the output file where statistics will be written to.\n    --inlineExpressions When generating code, tells prepack to avoid naming expressions when they are only used once,\n                        and instead inline them where they are used.\n  `;\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  let inputFilenames = [];\n  let outputFilename;\n  let compatibility: Compatibility;\n  let mathRandomSeed;\n  let inputSourceMap;\n  let outputSourceMap;\n  let statsFileName;\n  let flags = {\n    initializeMoreModules: false,\n    trace: false,\n    debugNames: false,\n    inlineExpressions: false,\n    logStatistics: false,\n    logModules: false,\n    delayInitializations: false,\n    delayUnsupportedRequires: false,\n    internalDebug: false,\n    serialize: false,\n    residual: false,\n    profile: false,\n  };\n\n  while (args.length) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      inputFilenames.push(arg);\n    } else {\n      arg = arg.slice(2);\n      switch (arg) {\n        case \"out\":\n          arg = args.shift();\n          outputFilename = arg;\n          break;\n        case \"compatibility\":\n          arg = args.shift();\n          if (!CompatibilityValues.includes(arg)) {\n            console.error(`Unsupported compatibility: ${arg}`);\n            process.exit(1);\n          }\n          compatibility = (arg: any);\n          break;\n        case \"mathRandomSeed\":\n          mathRandomSeed = args.shift();\n          break;\n        case \"srcmapIn\":\n          inputSourceMap = args.shift();\n          break;\n        case \"srcmapOut\":\n          outputSourceMap = args.shift();\n          break;\n        case \"statsFile\":\n          statsFileName = args.shift();\n          break;\n        case \"help\":\n          console.log(\n            \"Usage: prepack.js [ -- | input.js ] [ --out output.js ] [ --compatibility jsc ] [ --mathRandomSeed seedvalue ] [ --srcmapIn inputMap ] [ --srcmapOut outputMap ] \" +\n              Object.keys(flags).map(s => \"[ --\" + s + \"]\").join(\" \") +\n              \"\\n\" +\n              HELP_STR\n          );\n          return;\n        default:\n          if (arg in flags) {\n            flags[arg] = true;\n          } else {\n            console.error(`Unknown option: ${arg}`);\n            process.exit(1);\n          }\n      }\n    }\n  }\n  if (!flags.serialize && !flags.residual) flags.serialize = true;\n\n  let resolvedOptions = Object.assign(\n    {},\n    {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilename: inputSourceMap,\n      errorHandler: errorHandler,\n      sourceMaps: !!outputSourceMap,\n    },\n    flags\n  );\n\n  let errors: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n  function errorHandler(diagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (diagnostic.location) errors.set(diagnostic.location, diagnostic);\n    return \"Recover\";\n  }\n\n  try {\n    if (inputFilenames.length === 0) {\n      prepackStdin(resolvedOptions, processSerializedCode);\n      return;\n    }\n    let serialized = prepackFileSync(inputFilenames, resolvedOptions);\n    processSerializedCode(null, serialized);\n  } catch (x) {\n    console.log(x.message);\n    console.log(x.stack);\n    if (errors.size === 0) process.exit(1);\n  } finally {\n    if (errors.size > 0) {\n      let foundFatal = false;\n      for (let [loc, error] of errors) {\n        foundFatal = foundFatal || error.severity === \"FatalError\";\n        console.log(\n          `${loc.source || \"\"}(${loc.start.line}:${loc.start.column +\n            1}) ${error.severity} ${error.errorCode}: ${error.message}`\n        );\n      }\n      if (foundFatal) process.exit(1);\n    }\n  }\n\n  function processSerializedCode(err, serialized) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    if (errors.size > 0) {\n      console.log(\"Errors found while prepacking\");\n      let foundFatal = false;\n      for (let [loc, error] of errors) {\n        foundFatal = foundFatal || error.severity === \"FatalError\";\n        console.log(\n          `${loc.source || \"\"}(${loc.start.line}:${loc.start.column +\n            1}) ${error.severity} ${error.errorCode}: ${error.message}`\n        );\n      }\n      if (foundFatal) process.exit(1);\n    }\n    if (serialized) {\n      if (serialized.code === \"\") {\n        console.log(\"No source code to prepack.\");\n        return;\n      }\n      if (outputFilename) {\n        console.log(`Prepacked source code written to ${outputFilename}.`);\n        fs.writeFileSync(outputFilename, serialized.code);\n      } else {\n        console.log(serialized.code);\n      }\n      if (statsFileName) {\n        if (serialized.statistics === undefined || serialized.timingStats === undefined) {\n          return;\n        }\n        let stats = {\n          SerializerStatistics: serialized.statistics,\n          TimingStatistics: serialized.timingStats,\n          MemoryStatistics: v8.getHeapStatistics(),\n        };\n        fs.writeFileSync(statsFileName, JSON.stringify(stats));\n      }\n      if (outputSourceMap) {\n        fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : \"\");\n      }\n    }\n  }\n\n  return true;\n}\n\nif (typeof __residual === \"function\") {\n  // If we're running inside of Prepack. This is the residual function we'll\n  // want to leave untouched in the final program.\n  __residual(\n    \"boolean\",\n    run,\n    Object,\n    Array,\n    console,\n    JSON,\n    process,\n    prepackStdin,\n    prepackFileSync,\n    FatalError,\n    CompatibilityValues,\n    fs\n  );\n} else {\n  run(Object, Array, console, JSON, process, prepackStdin, prepackFileSync, FatalError, CompatibilityValues, fs);\n}\n"]}