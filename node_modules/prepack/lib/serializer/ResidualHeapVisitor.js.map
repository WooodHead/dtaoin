{"version":3,"sources":["../../src/serializer/ResidualHeapVisitor.js"],"names":["t","ResidualHeapVisitor","realm","logger","modules","useAbstractInterpretation","declarativeEnvironmentRecordsBindings","Map","globalBindings","functionInfos","functionBindings","values","generator","scope","realmGenerator","inspector","referencedDeclaredValues","Set","delayedVisitGeneratorEntries","f","oldScope","obj","symbols","symbol","propertyBinding","desc","descriptor","undefined","visitDescriptor","visitValue","properties","key","canIgnoreProperty","unknownProperty","val","value","visitObjectPropertiesWithComputedNames","visitObjectPrototype","visitConstructorPrototype","proto","$Prototype","kind","getKind","intrinsics","func","prototype","getPropertyValue","originalConstructor","isDefaultPrototype","absVal","args","length","cond","P","V","earlier_props","consequent","alternate","get","set","r","n","visitedBindings","Object","create","visitedBinding","binding","bindings","deletable","initialized","modified","declarativeEnvironmentRecord","visitObjectProperties","lenProperty","entries","$MapData","$WeakMapData","len","i","entry","$Key","$Value","$SetData","$WeakSetData","$BoundTargetFunction","$BoundThis","$BoundArguments","boundArg","constructor","formalParameters","$FormalParameters","code","$ECMAScriptCode","functionInfo","unbound","usesArguments","usesThis","state","tryQuery","bind","file","program","expressionStatement","functionExpression","isResidual","keys","isUnsafeResidual","logError","loc","join","_withScope","innerName","doesNotMatter","reference","$Environment","base","visitGlobalBinding","referencedBase","referencedName","visitDeclarativeEnvironmentRecordBinding","dateValue","$DateValue","buf","$ViewedArrayBuffer","visitValueMap","visitValueSet","$ParameterMap","$Description","$ProxyTarget","$ProxyHandler","abstractArg","scopes","has","add","_mark","visitAbstractValue","isIntrinsic","isLeaf","visitValueArray","visitValueProxy","visitValueFunction","visitValueSymbol","visitValueObject","getGlobalLetBinding","visitGenerator","canSkip","recordDeclaration","recordDelayedEntry","push","visit","createGeneratorVisitCallbacks","initializedModules","moduleValue","oldDelayedEntries","visitEntry"],"mappings":"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","file":"ResidualHeapVisitor.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport { FatalError } from \"../errors.js\";\nimport { Realm } from \"../realm.js\";\nimport type { Descriptor } from \"../types.js\";\nimport { IsUnresolvableReference, ToLength, ResolveBinding, IsArray, Get } from \"../methods/index.js\";\nimport {\n  BoundFunctionValue,\n  ProxyValue,\n  SymbolValue,\n  AbstractValue,\n  EmptyValue,\n  ECMAScriptSourceFunctionValue,\n  FunctionValue,\n  Value,\n  ObjectValue,\n  NativeFunctionValue,\n} from \"../values/index.js\";\nimport { describeLocation } from \"../intrinsics/ecma262/Error.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeBlockStatement } from \"babel-types\";\nimport { Generator } from \"../utils/generator.js\";\nimport type { GeneratorEntry, VisitEntryCallbacks } from \"../utils/generator.js\";\nimport traverse from \"babel-traverse\";\nimport invariant from \"../invariant.js\";\nimport type { VisitedBinding, VisitedBindings, FunctionInfo } from \"./types.js\";\nimport { ClosureRefVisitor } from \"./visitors.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { ResidualHeapInspector } from \"./ResidualHeapInspector.js\";\nimport { getSuggestedArrayLiteralLength } from \"./utils.js\";\n\nexport type Scope = FunctionValue | Generator;\n\n/* This class visits all values that are reachable in the residual heap.\n   In particular, this \"filters out\" values that are...\n   - captured by a DeclarativeEnvironmentRecord, but not actually used by any closure.\n   - Unmodified prototype objects\n   TODO #680: Figure out minimal set of values that need to be kept alive for WeakSet and WeakMap instances.\n*/\nexport class ResidualHeapVisitor {\n  constructor(realm: Realm, logger: Logger, modules: Modules) {\n    invariant(realm.useAbstractInterpretation);\n    this.realm = realm;\n    this.logger = logger;\n    this.modules = modules;\n\n    this.declarativeEnvironmentRecordsBindings = new Map();\n    this.globalBindings = new Map();\n    this.functionInfos = new Map();\n    this.functionBindings = new Map();\n    this.values = new Map();\n    let generator = this.realm.generator;\n    invariant(generator);\n    this.scope = this.realmGenerator = generator;\n    this.inspector = new ResidualHeapInspector(realm, logger);\n    this.referencedDeclaredValues = new Set();\n    this.delayedVisitGeneratorEntries = [];\n  }\n\n  realm: Realm;\n  logger: Logger;\n  modules: Modules;\n\n  declarativeEnvironmentRecordsBindings: Map<DeclarativeEnvironmentRecord, VisitedBindings>;\n  globalBindings: Map<string, VisitedBinding>;\n  functionInfos: Map<BabelNodeBlockStatement, FunctionInfo>;\n  functionBindings: Map<FunctionValue, VisitedBindings>;\n  scope: Scope;\n  realmGenerator: Generator;\n  values: Map<Value, Set<Scope>>;\n  inspector: ResidualHeapInspector;\n  referencedDeclaredValues: Set<AbstractValue>;\n  delayedVisitGeneratorEntries: Array<{| generator: Generator, entry: GeneratorEntry |}>;\n\n  _withScope(scope: Scope, f: () => void) {\n    let oldScope = this.scope;\n    this.scope = scope;\n    f();\n    this.scope = oldScope;\n  }\n\n  visitObjectProperties(obj: ObjectValue): void {\n    // visit properties\n    for (let [symbol, propertyBinding] of obj.symbols) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      this.visitDescriptor(desc);\n      this.visitValue(symbol);\n    }\n\n    // visit properties\n    for (let [key, propertyBinding] of obj.properties) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      if (!this.inspector.canIgnoreProperty(obj, key)) {\n        this.visitDescriptor(desc);\n      }\n    }\n\n    // inject properties with computed names\n    if (obj.unknownProperty !== undefined) {\n      let desc = obj.unknownProperty.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        this.visitObjectPropertiesWithComputedNames(val);\n      }\n    }\n\n    // prototype\n    this.visitObjectPrototype(obj);\n    if (obj instanceof FunctionValue) this.visitConstructorPrototype(obj);\n  }\n\n  visitObjectPrototype(obj: ObjectValue) {\n    let proto = obj.$Prototype;\n\n    let kind = obj.getKind();\n    if (proto === this.realm.intrinsics[kind + \"Prototype\"]) return;\n\n    this.visitValue(proto);\n  }\n\n  visitConstructorPrototype(func: FunctionValue) {\n    // If the original prototype object was mutated,\n    // request its serialization here as this might be observable by\n    // residual code.\n    let prototype = ResidualHeapInspector.getPropertyValue(func, \"prototype\");\n    if (\n      prototype instanceof ObjectValue &&\n      prototype.originalConstructor === func &&\n      !this.inspector.isDefaultPrototype(prototype)\n    ) {\n      this.visitValue(prototype);\n    }\n  }\n\n  visitObjectPropertiesWithComputedNames(absVal: AbstractValue): void {\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      invariant(P instanceof AbstractValue);\n      let V = absVal.args[1];\n      let earlier_props = absVal.args[2];\n      if (earlier_props instanceof AbstractValue) this.visitObjectPropertiesWithComputedNames(earlier_props);\n      this.visitValue(P);\n      this.visitValue(V);\n    } else {\n      // conditional assignment\n      this.visitValue(cond);\n      let consequent = absVal.args[1];\n      invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2];\n      invariant(alternate instanceof AbstractValue);\n      this.visitObjectPropertiesWithComputedNames(consequent);\n      this.visitObjectPropertiesWithComputedNames(alternate);\n    }\n  }\n\n  visitDescriptor(desc: Descriptor): void {\n    if (desc.value !== undefined) this.visitValue(desc.value);\n    if (desc.get !== undefined) this.visitValue(desc.get);\n    if (desc.set !== undefined) this.visitValue(desc.set);\n  }\n\n  visitDeclarativeEnvironmentRecordBinding(r: DeclarativeEnvironmentRecord, n: string): VisitedBinding {\n    let visitedBindings = this.declarativeEnvironmentRecordsBindings.get(r);\n    if (!visitedBindings) {\n      visitedBindings = Object.create(null);\n      this.declarativeEnvironmentRecordsBindings.set(r, visitedBindings);\n    }\n    let visitedBinding: ?VisitedBinding = visitedBindings[n];\n    if (!visitedBinding) {\n      let realm = this.realm;\n      let binding = r.bindings[n];\n      invariant(!binding.deletable);\n      let value = (binding.initialized && binding.value) || realm.intrinsics.undefined;\n      visitedBinding = { value, modified: false, declarativeEnvironmentRecord: r };\n      visitedBindings[n] = visitedBinding;\n    }\n    invariant(visitedBinding.value !== undefined);\n    this.visitValue(visitedBinding.value);\n    return visitedBinding;\n  }\n\n  visitValueArray(val: ObjectValue): void {\n    this.visitObjectProperties(val);\n    const realm = this.realm;\n    let lenProperty = Get(realm, val, \"length\");\n    if (\n      lenProperty instanceof AbstractValue ||\n      ToLength(realm, lenProperty) !== getSuggestedArrayLiteralLength(realm, val)\n    ) {\n      this.visitValue(lenProperty);\n    }\n  }\n\n  visitValueMap(val: ObjectValue): void {\n    let kind = val.getKind();\n\n    let entries;\n    if (kind === \"Map\") {\n      entries = val.$MapData;\n    } else {\n      invariant(kind === \"WeakMap\");\n      entries = val.$WeakMapData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      let key = entry.$Key;\n      let value = entry.$Value;\n      if (key === undefined || value === undefined) continue;\n      this.visitValue(key);\n      this.visitValue(value);\n    }\n  }\n\n  visitValueSet(val: ObjectValue): void {\n    let kind = val.getKind();\n\n    let entries;\n    if (kind === \"Set\") {\n      entries = val.$SetData;\n    } else {\n      invariant(kind === \"WeakSet\");\n      entries = val.$WeakSetData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      if (entry === undefined) continue;\n      this.visitValue(entry);\n    }\n  }\n\n  visitValueFunction(val: FunctionValue): void {\n    this.visitObjectProperties(val);\n\n    if (val instanceof BoundFunctionValue) {\n      this.visitValue(val.$BoundTargetFunction);\n      this.visitValue(val.$BoundThis);\n      for (let boundArg of val.$BoundArguments) this.visitValue(boundArg);\n      return;\n    }\n\n    invariant(!(val instanceof NativeFunctionValue), \"all native function values should be intrinsics\");\n\n    invariant(val instanceof ECMAScriptSourceFunctionValue);\n    invariant(val.constructor === ECMAScriptSourceFunctionValue);\n    let formalParameters = val.$FormalParameters;\n    invariant(formalParameters != null);\n    let code = val.$ECMAScriptCode;\n    invariant(code != null);\n\n    let functionInfo = this.functionInfos.get(code);\n\n    if (!functionInfo) {\n      functionInfo = {\n        unbound: Object.create(null),\n        modified: Object.create(null),\n        usesArguments: false,\n        usesThis: false,\n      };\n      this.functionInfos.set(code, functionInfo);\n\n      let state = {\n        tryQuery: this.logger.tryQuery.bind(this.logger),\n        val,\n        functionInfo,\n        realm: this.realm,\n      };\n\n      traverse(\n        t.file(t.program([t.expressionStatement(t.functionExpression(null, formalParameters, code))])),\n        ClosureRefVisitor,\n        null,\n        state\n      );\n\n      if (val.isResidual && Object.keys(functionInfo.unbound).length) {\n        if (!val.isUnsafeResidual) {\n          this.logger.logError(\n            val,\n            `residual function ${describeLocation(this.realm, val, undefined, code.loc) ||\n              \"(unknown)\"} refers to the following identifiers defined outside of the local scope: ${Object.keys(\n              functionInfo.unbound\n            ).join(\", \")}`\n          );\n        }\n      }\n    }\n\n    let visitedBindings = Object.create(null);\n    this._withScope(val, () => {\n      invariant(functionInfo);\n      for (let innerName in functionInfo.unbound) {\n        let visitedBinding;\n        let doesNotMatter = true;\n        let reference = this.logger.tryQuery(\n          () => ResolveBinding(this.realm, innerName, doesNotMatter, val.$Environment),\n          undefined,\n          false /* The only reason `ResolveBinding` might fail is because the global object is partial. But in that case, we know that we are dealing with the global scope. */\n        );\n        if (\n          reference === undefined ||\n          IsUnresolvableReference(this.realm, reference) ||\n          reference.base instanceof GlobalEnvironmentRecord\n        ) {\n          visitedBinding = this.visitGlobalBinding(innerName);\n        } else {\n          invariant(!IsUnresolvableReference(this.realm, reference));\n          let referencedBase = reference.base;\n          let referencedName: string = (reference.referencedName: any);\n          if (typeof referencedName !== \"string\") {\n            throw new FatalError(\"TODO: do not know how to visit reference with symbol\");\n          }\n          invariant(referencedBase instanceof DeclarativeEnvironmentRecord);\n          visitedBinding = this.visitDeclarativeEnvironmentRecordBinding(referencedBase, referencedName);\n        }\n        visitedBindings[innerName] = visitedBinding;\n        if (functionInfo.modified[innerName]) visitedBinding.modified = true;\n      }\n    });\n\n    this.functionBindings.set(val, visitedBindings);\n  }\n\n  visitValueObject(val: ObjectValue): void {\n    this.visitObjectProperties(val);\n\n    // If this object is a prototype object that was implicitly created by the runtime\n    // for a constructor, then we can obtain a reference to this object\n    // in a special way that's handled alongside function serialization.\n    let constructor = val.originalConstructor;\n    if (constructor !== undefined) {\n      this.visitValue(constructor);\n      return;\n    }\n\n    let kind = val.getKind();\n    switch (kind) {\n      case \"RegExp\":\n      case \"Number\":\n      case \"String\":\n      case \"Boolean\":\n      case \"ArrayBuffer\":\n        return;\n      case \"Date\":\n        let dateValue = val.$DateValue;\n        invariant(dateValue !== undefined);\n        this.visitValue(dateValue);\n        return;\n      case \"Float32Array\":\n      case \"Float64Array\":\n      case \"Int8Array\":\n      case \"Int16Array\":\n      case \"Int32Array\":\n      case \"Uint8Array\":\n      case \"Uint16Array\":\n      case \"Uint32Array\":\n      case \"Uint8ClampedArray\":\n      case \"DataView\":\n        let buf = val.$ViewedArrayBuffer;\n        invariant(buf !== undefined);\n        this.visitValue(buf);\n        return;\n      case \"Map\":\n      case \"WeakMap\":\n        this.visitValueMap(val);\n        return;\n      case \"Set\":\n      case \"WeakSet\":\n        this.visitValueSet(val);\n        return;\n      default:\n        if (kind !== \"Object\") this.logger.logError(val, `Object of kind ${kind} is not supported in residual heap.`);\n        if (this.$ParameterMap !== undefined)\n          this.logger.logError(val, `Arguments object is not supported in residual heap.`);\n        return;\n    }\n  }\n\n  visitValueSymbol(val: SymbolValue): void {\n    if (val.$Description) this.visitValue(val.$Description);\n  }\n\n  visitValueProxy(val: ProxyValue): void {\n    this.visitValue(val.$ProxyTarget);\n    this.visitValue(val.$ProxyHandler);\n  }\n\n  visitAbstractValue(val: AbstractValue): void {\n    if (val.kind === \"sentinel member expression\")\n      this.logger.logError(val, \"expressions of type o[p] are not yet supported for partially known o and unknown p\");\n    for (let abstractArg of val.args) this.visitValue(abstractArg);\n  }\n\n  _mark(val: Value): boolean {\n    let scopes = this.values.get(val);\n    if (scopes === undefined) this.values.set(val, (scopes = new Set()));\n    if (scopes.has(this.scope)) return false;\n    scopes.add(this.scope);\n    return true;\n  }\n\n  visitValue(val: Value): void {\n    if (val instanceof AbstractValue) {\n      if (this._mark(val)) this.visitAbstractValue(val);\n    } else if (val.isIntrinsic()) {\n      // All intrinsic values exist from the beginning of time...\n      // ...except for a few that come into existance as templates for abstract objects (TODO #882).\n      this._withScope(this.realmGenerator, () => {\n        this._mark(val);\n      });\n    } else if (val instanceof EmptyValue) {\n      this._mark(val);\n    } else if (ResidualHeapInspector.isLeaf(val)) {\n      this._mark(val);\n    } else if (IsArray(this.realm, val)) {\n      invariant(val instanceof ObjectValue);\n      if (this._mark(val)) this.visitValueArray(val);\n    } else if (val instanceof ProxyValue) {\n      if (this._mark(val)) this.visitValueProxy(val);\n    } else if (val instanceof FunctionValue) {\n      // Function declarations should get hoisted in the global code so that instances only get allocated once\n      this._withScope(this.realmGenerator, () => {\n        invariant(val instanceof FunctionValue);\n        if (this._mark(val)) this.visitValueFunction(val);\n      });\n    } else if (val instanceof SymbolValue) {\n      if (this._mark(val)) this.visitValueSymbol(val);\n    } else {\n      invariant(val instanceof ObjectValue);\n\n      // Prototypes are reachable via function declarations, and those get hoisted, so we need to move\n      // prototype initialization to the global code as well.\n      if (val.originalConstructor !== undefined) {\n        this._withScope(this.realmGenerator, () => {\n          invariant(val instanceof ObjectValue);\n          if (this._mark(val)) this.visitValueObject(val);\n        });\n      } else {\n        if (this._mark(val)) this.visitValueObject(val);\n      }\n    }\n  }\n\n  visitGlobalBinding(key: string): VisitedBinding {\n    let binding = this.globalBindings.get(key);\n    if (!binding) {\n      let value = this.realm.getGlobalLetBinding(key);\n      binding = ({ value, modified: true }: VisitedBinding);\n      this.globalBindings.set(key, binding);\n    }\n    if (binding.value) this.visitValue(binding.value);\n    return binding;\n  }\n\n  createGeneratorVisitCallbacks(generator: Generator): VisitEntryCallbacks {\n    return {\n      visitValue: this.visitValue.bind(this),\n      visitGenerator: this.visitGenerator.bind(this),\n      canSkip: (value: AbstractValue): boolean => {\n        return !this.referencedDeclaredValues.has(value) && !this.values.has(value);\n      },\n      recordDeclaration: (value: AbstractValue) => {\n        this.referencedDeclaredValues.add(value);\n      },\n      recordDelayedEntry: (entry: GeneratorEntry) => {\n        this.delayedVisitGeneratorEntries.push({ generator, entry });\n      },\n    };\n  }\n\n  visitGenerator(generator: Generator): void {\n    this._withScope(generator, () => {\n      generator.visit(this.createGeneratorVisitCallbacks(generator));\n    });\n  }\n\n  visitRoots(): void {\n    this.visitGenerator(this.realmGenerator);\n    for (let [, moduleValue] of this.modules.initializedModules) this.visitValue(moduleValue);\n    // Do a fixpoint over all pure generator entries to make sure that we visit\n    // arguments of only BodyEntries that are required by some other residual value\n    let oldDelayedEntries = [];\n    while (oldDelayedEntries.length !== this.delayedVisitGeneratorEntries.length) {\n      oldDelayedEntries = this.delayedVisitGeneratorEntries;\n      this.delayedVisitGeneratorEntries = [];\n      for (let { generator, entry } of oldDelayedEntries)\n        this._withScope(generator, () => {\n          generator.visitEntry(entry, this.createGeneratorVisitCallbacks(generator));\n        });\n    }\n  }\n}\n"]}