{"version":3,"sources":["../../src/serializer/functions.js"],"names":["t","Functions","realm","functions","moduleTracer","calls","fname","fun","fnameAst","expression","e","evaluateNodeForEffectsInGlobalEnv","undefined","ex","error","handleError","call","callExpression","push","writeEffects","Map","set","conflicts","fname1","call1","e1","get","location","fname2","call2","reportWriteConflicts","size","values","diagnostic","pbs","reportConflict","writtenObjects","Set","forEach","val","key","m","add","object","oldReportObjectGetOwnProperties","reportObjectGetOwnProperties","ob","currentLocation","has","oldReportPropertyAccess","reportPropertyAccess","pb"],"mappings":"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","file":"functions.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeCallExpression, BabelNodeSourceLocation } from \"babel-types\";\nimport { Completion, ThrowCompletion } from \"../completions.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport invariant from \"../invariant.js\";\nimport { type Effects, type PropertyBindings, Realm } from \"../realm.js\";\nimport type { PropertyBinding } from \"../types.js\";\nimport { ignoreErrorsIn } from \"../utils/errors.js\";\nimport { AbstractObjectValue, FunctionValue, ObjectValue } from \"../values/index.js\";\nimport { ModuleTracer } from \"./modules.js\";\nimport buildTemplate from \"babel-template\";\nimport * as t from \"babel-types\";\n\nexport class Functions {\n  constructor(realm: Realm, functions: ?Array<string>, moduleTracer: ModuleTracer) {\n    this.realm = realm;\n    this.functions = functions;\n    this.moduleTracer = moduleTracer;\n  }\n\n  realm: Realm;\n  functions: ?Array<string>;\n  moduleTracer: ModuleTracer;\n\n  checkThatFunctionsAreIndependent() {\n    let functions = this.functions;\n    invariant(functions, \"This method should only be called if initialized with defined functions\");\n\n    // lookup functions\n    let calls = [];\n    for (let fname of functions) {\n      let fun;\n      let fnameAst = buildTemplate(fname)({}).expression;\n      if (fnameAst) {\n        try {\n          let e = ignoreErrorsIn(this.realm, () => this.realm.evaluateNodeForEffectsInGlobalEnv(fnameAst));\n          fun = e ? e[0] : undefined;\n        } catch (ex) {\n          if (!(ex instanceof ThrowCompletion)) throw ex;\n        }\n      }\n      if (!(fun instanceof FunctionValue)) {\n        let error = new CompilerDiagnostic(\n          `Additional function ${fname} not defined in the global environment`,\n          null,\n          \"PP1001\",\n          \"FatalError\"\n        );\n        this.realm.handleError(error);\n        throw new FatalError();\n      }\n      let call = t.callExpression(fnameAst, []);\n      calls.push([fname, call]);\n    }\n\n    // Get write effects of the functions\n    let writeEffects: Map<string, Effects> = new Map();\n    for (let [fname, call] of calls) {\n      // This may throw a FatalError if there is an unrecoverable error in the called function\n      // When that happens we cannot prepack the bundle.\n      // There may also be warnings reported for errors that happen inside imported modules that can be postponed.\n      let e = this.realm.evaluateNodeForEffectsInGlobalEnv(call, this.moduleTracer);\n      writeEffects.set(fname, e);\n    }\n\n    // check that functions are independent\n    let conflicts: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n    for (let [fname1, call1] of calls) {\n      let e1 = writeEffects.get(fname1);\n      invariant(e1 !== undefined);\n      if (e1[0] instanceof Completion) {\n        let error = new CompilerDiagnostic(\n          `Additional function ${fname1} may terminate abruptly`,\n          e1[0].location,\n          \"PP1002\",\n          \"FatalError\"\n        );\n        this.realm.handleError(error);\n        throw new FatalError();\n      }\n      for (let [fname2, call2] of calls) {\n        fname2; // not used\n        if (call1 === call2) continue;\n        this.reportWriteConflicts(fname1, conflicts, e1[3], call1, call2);\n      }\n    }\n    if (conflicts.size > 0) {\n      for (let diagnostic of conflicts.values()) this.realm.handleError(diagnostic);\n      throw new FatalError();\n    }\n  }\n\n  reportWriteConflicts(\n    fname: string,\n    conflicts: Map<BabelNodeSourceLocation, CompilerDiagnostic>,\n    pbs: PropertyBindings,\n    call1: BabelNodeCallExpression,\n    call2: BabelNodeCallExpression\n  ) {\n    let reportConflict = (location: BabelNodeSourceLocation) => {\n      let error = new CompilerDiagnostic(\n        `Property access conflicts with write in additional function ${fname}`,\n        location,\n        \"PP1003\",\n        \"FatalError\"\n      );\n      conflicts.set(location, error);\n    };\n    let writtenObjects: Set<ObjectValue | AbstractObjectValue> = new Set();\n    pbs.forEach((val, key, m) => {\n      writtenObjects.add(key.object);\n    });\n    let oldReportObjectGetOwnProperties = this.realm.reportObjectGetOwnProperties;\n    this.realm.reportObjectGetOwnProperties = (ob: ObjectValue) => {\n      let location = this.realm.currentLocation;\n      invariant(location);\n      if (writtenObjects.has(ob) && !conflicts.has(location)) reportConflict(location);\n    };\n    let oldReportPropertyAccess = this.realm.reportPropertyAccess;\n    this.realm.reportPropertyAccess = (pb: PropertyBinding) => {\n      let location = this.realm.currentLocation;\n      if (!location) return; // happens only when accessing an additional function property\n      if (pbs.has(pb) && !conflicts.has(location)) reportConflict(location);\n    };\n    try {\n      ignoreErrorsIn(this.realm, () => this.realm.evaluateNodeForEffectsInGlobalEnv(call2, this.moduleTracer));\n    } finally {\n      this.realm.reportPropertyAccess = oldReportPropertyAccess;\n      this.realm.reportObjectGetOwnProperties = oldReportObjectGetOwnProperties;\n    }\n  }\n}\n"]}