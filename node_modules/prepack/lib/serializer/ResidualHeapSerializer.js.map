{"version":3,"sources":["../../src/serializer/ResidualHeapSerializer.js"],"names":["t","ResidualHeapSerializer","realm","logger","modules","residualHeapValueIdentifiers","residualHeapInspector","residualValues","residualFunctionBindings","residualFunctionInfos","delayInitializations","referencedDeclaredValues","realmGenerator","generator","realmPreludeGenerator","preludeGenerator","declarativeEnvironmentRecordsBindings","Map","prelude","descriptors","needsEmptyVar","needsAuxiliaryConstructor","valueNameGenerator","createNameGenerator","descriptorNameGenerator","factoryNameGenerator","intrinsicNameGenerator","requireReturns","statistics","serializedValues","Set","residualFunctions","getLocation","getIdentifierAndIncrementReferenceCountOptional","value","createLocation","location","identifier","generate","mainBody","push","variableDeclaration","variableDeclarator","emitter","getBody","activeGeneratorBodies","obj","properties","objectPrototypeAlreadyEstablished","cleanupDummyProperties","symbol","propertyBinding","desc","descriptor","undefined","emitNowOrAfterWaitingForDependencies","_getDescriptorValues","concat","_emitProperty","symbols","key","canIgnoreProperty","has","unknownProperty","val","_getNestedAbstractValues","_emitPropertiesWithComputedNames","_emitObjectPrototype","_emitConstructorPrototype","objects","objectProperties","size","kind","getKind","proto","$Prototype","serializedProto","serializeValue","uid","getIdentifierAndIncrementReferenceCount","condition","binaryExpression","memberExpression","throwblock","blockStatement","throwStatement","newExpression","stringLiteral","emit","ifStatement","intrinsics","isCompatibleWith","MOBILE_JSC_VERSION","expressionStatement","callExpression","memoizeReference","assignmentExpression","func","prototype","getPropertyValue","absVal","values","args","length","cond","P","V","W","consequent","alternate","earlier_props","serializedP","serializedV","serializedCond","oldBody","beginEmitting","consequentBody","endEmitting","consequentStatement","alternateBody","alternateStatement","cleanupDummyProperty","_canEmbedProperty","descValue","getReasonToWaitForDependencies","mightHaveBeenDeleted","_assignProperty","serializedKey","getAsPropertyNameExpression","computed","isIdentifier","descProps","boolKeys","valKeys","get","set","descriptorsKey","boolKey","b","objectProperty","booleanLiteral","toString","descKey","join","descriptorId","declar","objectExpression","visitedBinding","serializedBinding","declarativeEnvironmentRecord","serializedValue","modified","referentialized","mightBeObject","incrementReferenceCount","scopes","functionValues","generators","scope","body","residualFunctionInitializers","registerValueOnlyReferencedByResidualFunctions","usedOnlyByResidualFunctions","commonAncestor","Array","from","reduce","x","y","referenceOnly","bindingType","ref","add","isLeaf","res","_serializeValue","target","_getTarget","name","__originalName","id","setIdentifier","init","result","needsIdentifier","assignment","valueIds","delayedValues","deleteIdentifier","valuesInlined","intrinsicName","intrinsicId","convertStringToMember","intrinsicNameGenerated","locationFn","valueFn","empty","deletion","type","unaryExpression","array","indexPropertyLength","remainingProperties","elems","i","elem","elemVal","delayReason","getReasonToWaitForActiveValue","delete","numberOfIndexProperties","lenProperty","initProperties","_serializeArrayIndexProperties","_serializeArrayLengthIfNeeded","_emitObjectProperties","arrayExpression","entries","$MapData","$WeakMapData","len","mapConstructorDoesntTakeArguments","entry","$Key","$Value","emitAfterWaiting","$SetData","$WeakSetData","setConstructorDoesntTakeArguments","buf","$ViewedArrayBuffer","outlinedArrayBuffer","$ArrayBufferByteLength","db","$ArrayBufferData","allzero","numericLiteral","arrayValue","consExpr","$BoundTargetFunction","$BoundThis","$BoundArguments","map","boundArg","residualBindings","serializedBindings","Object","create","instance","functionValue","scopeInstances","delayed","undelay","insertionPoint","getBodyReference","addFunctionInstance","boundName","residualBinding","referencedValues","serializeBindingFunc","_serializeGlobalBinding","_serializeDeclarativeEnvironmentRecordBinding","prop","writable","configurable","enumerable","constructor","originalConstructor","prototypeId","getIdentifier","setFunctionPrototype","source","$OriginalSource","flags","$OriginalFlags","RegExp","regExpLiteral","numberData","$NumberData","throwIfNotConcreteNumber","stringData","$StringData","throwIfNotConcreteString","booleanData","$BooleanData","throwIfNotConcreteBoolean","dateValue","$DateValue","serializedDateValue","_serializeValueTypedArrayOrDataView","_serializeValueArrayBuffer","_serializeValueMap","_serializeValueSet","$ParameterMap","createViaAuxiliaryConstructor","ObjectPrototype","_findLastObjectPrototype","dummyProperties","props","propValue","sequenceExpression","$Description","serializedArg","$ProxyTarget","$ProxyHandler","serializedArgs","abstractArg","buildNode","derivedIds","hasBeenDeclared","_serializeAbstractValue","isIntrinsic","_serializeValueIntrinsic","valueToNode","serialize","_serializeValueArray","_serializeValueProxy","_serializeValueFunction","_serializeValueSymbol","_serializeValueObject","getGlobalLetBinding","globalReference","context","bind","serializeGenerator","newBody","statement","canOmit","declare","item","_shouldBeWrapped","_getContext","_declaredAbstractValues","apply","initializedModules","moduleId","moduleValue","finalize","spliceFunctions","unstrictFunctionBodies","strictFunctionBodies","requireStatistics","replaced","collectValToRefCountOnly","console","log","moduleIds","count","strictDirective","directive","directiveLiteral","globalDirectives","isStrict","funcLoop","directives","unshift","functionExpression","ast_body","declaredGlobals","globalExpression","thisExpression","usesThis","program_directives","file","program"],"mappings":"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","file":"ResidualHeapSerializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding } from \"../types.js\";\nimport { ToLength, IsArray, Get } from \"../methods/index.js\";\nimport {\n  BoundFunctionValue,\n  ProxyValue,\n  SymbolValue,\n  NumberValue,\n  StringValue,\n  BooleanValue,\n  AbstractValue,\n  EmptyValue,\n  FunctionValue,\n  ECMAScriptSourceFunctionValue,\n  Value,\n  ObjectValue,\n  NativeFunctionValue,\n  UndefinedValue,\n} from \"../values/index.js\";\nimport * as t from \"babel-types\";\nimport type {\n  BabelNodeExpression,\n  BabelNodeStatement,\n  BabelNodeIdentifier,\n  BabelNodeBlockStatement,\n  BabelNodeLVal,\n  BabelNodeMemberExpression,\n  BabelVariableKind,\n  BabelNodeFile,\n} from \"babel-types\";\nimport { Generator, PreludeGenerator, NameGenerator } from \"../utils/generator.js\";\nimport type { SerializationContext } from \"../utils/generator.js\";\nimport invariant from \"../invariant.js\";\nimport type { SerializedBinding, VisitedBinding, FunctionInfo, FunctionInstance } from \"./types.js\";\nimport { TimingStatistics, SerializerStatistics, type VisitedBindings } from \"./types.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { ResidualHeapInspector } from \"./ResidualHeapInspector.js\";\nimport { ResidualFunctions } from \"./ResidualFunctions.js\";\nimport type { Scope } from \"./ResidualHeapVisitor.js\";\nimport { factorifyObjects } from \"./factorify.js\";\nimport { voidExpression, emptyExpression, constructorExpression, protoExpression } from \"../utils/internalizer.js\";\nimport { Emitter } from \"./Emitter.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport { commonAncestorOf, getSuggestedArrayLiteralLength } from \"./utils.js\";\n\nexport class ResidualHeapSerializer {\n  constructor(\n    realm: Realm,\n    logger: Logger,\n    modules: Modules,\n    residualHeapValueIdentifiers: ResidualHeapValueIdentifiers,\n    residualHeapInspector: ResidualHeapInspector,\n    residualValues: Map<Value, Set<Scope>>,\n    residualFunctionBindings: Map<FunctionValue, VisitedBindings>,\n    residualFunctionInfos: Map<BabelNodeBlockStatement, FunctionInfo>,\n    delayInitializations: boolean,\n    referencedDeclaredValues: Set<AbstractValue>\n  ) {\n    this.realm = realm;\n    this.logger = logger;\n    this.modules = modules;\n    this.residualHeapValueIdentifiers = residualHeapValueIdentifiers;\n\n    let realmGenerator = this.realm.generator;\n    invariant(realmGenerator);\n    this.generator = realmGenerator;\n    let realmPreludeGenerator = this.realm.preludeGenerator;\n    invariant(realmPreludeGenerator);\n    this.preludeGenerator = realmPreludeGenerator;\n\n    this.declarativeEnvironmentRecordsBindings = new Map();\n    this.prelude = [];\n    this.descriptors = new Map();\n    this.needsEmptyVar = false;\n    this.needsAuxiliaryConstructor = false;\n    this.valueNameGenerator = this.preludeGenerator.createNameGenerator(\"_\");\n    this.descriptorNameGenerator = this.preludeGenerator.createNameGenerator(\"$$\");\n    this.factoryNameGenerator = this.preludeGenerator.createNameGenerator(\"$_\");\n    this.intrinsicNameGenerator = this.preludeGenerator.createNameGenerator(\"$i_\");\n    this.requireReturns = new Map();\n    this.statistics = new SerializerStatistics();\n    this.serializedValues = new Set();\n    this.residualFunctions = new ResidualFunctions(\n      this.realm,\n      this.statistics,\n      this.modules,\n      this.requireReturns,\n      {\n        getLocation: value => this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCountOptional(value),\n        createLocation: () => {\n          let location = t.identifier(this.valueNameGenerator.generate(\"initialized\"));\n          this.mainBody.push(t.variableDeclaration(\"var\", [t.variableDeclarator(location)]));\n          return location;\n        },\n      },\n      this.prelude,\n      this.preludeGenerator.createNameGenerator(\"__init_\"),\n      this.factoryNameGenerator,\n      this.preludeGenerator.createNameGenerator(\"__scope_\"),\n      residualFunctionInfos\n    );\n    this.emitter = new Emitter(this.residualFunctions);\n    this.mainBody = this.emitter.getBody();\n    this.residualHeapInspector = residualHeapInspector;\n    this.residualValues = residualValues;\n    this.residualFunctionBindings = residualFunctionBindings;\n    this.residualFunctionInfos = residualFunctionInfos;\n    this.delayInitializations = delayInitializations;\n    this.referencedDeclaredValues = referencedDeclaredValues;\n    this.activeGeneratorBodies = new Map();\n  }\n\n  emitter: Emitter;\n  declarativeEnvironmentRecordsBindings: Map<VisitedBinding, SerializedBinding>;\n  functions: Map<BabelNodeBlockStatement, Array<FunctionInstance>>;\n  functionInstances: Array<FunctionInstance>;\n  prelude: Array<BabelNodeStatement>;\n  body: Array<BabelNodeStatement>;\n  mainBody: Array<BabelNodeStatement>;\n  realm: Realm;\n  preludeGenerator: PreludeGenerator;\n  generator: Generator;\n  descriptors: Map<string, BabelNodeIdentifier>;\n  needsEmptyVar: boolean;\n  needsAuxiliaryConstructor: boolean;\n  valueNameGenerator: NameGenerator;\n  descriptorNameGenerator: NameGenerator;\n  factoryNameGenerator: NameGenerator;\n  intrinsicNameGenerator: NameGenerator;\n  logger: Logger;\n  modules: Modules;\n  residualHeapValueIdentifiers: ResidualHeapValueIdentifiers;\n  requireReturns: Map<number | string, BabelNodeExpression>;\n  statistics: SerializerStatistics;\n  timingStats: TimingStatistics;\n  residualHeapInspector: ResidualHeapInspector;\n  residualValues: Map<Value, Set<Scope>>;\n  residualFunctionBindings: Map<FunctionValue, VisitedBindings>;\n  residualFunctionInfos: Map<BabelNodeBlockStatement, FunctionInfo>;\n  serializedValues: Set<Value>;\n  residualFunctions: ResidualFunctions;\n  delayInitializations: boolean;\n  referencedDeclaredValues: Set<AbstractValue>;\n  activeGeneratorBodies: Map<Generator, Array<BabelNodeStatement>>;\n\n  // Configures all mutable aspects of an object, in particular:\n  // symbols, properties, prototype.\n  // For every created object that corresponds to a value,\n  // this function should be invoked once.\n  // Thus, as a side effects, we gather statistics here on all emitted objects.\n  _emitObjectProperties(\n    obj: ObjectValue,\n    properties: Map<string, PropertyBinding> = obj.properties,\n    objectPrototypeAlreadyEstablished: boolean = false,\n    cleanupDummyProperties: ?Set<string>\n  ) {\n    //inject symbols\n    for (let [symbol, propertyBinding] of obj.symbols) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      this.emitter.emitNowOrAfterWaitingForDependencies(this._getDescriptorValues(desc).concat([symbol, obj]), () => {\n        invariant(desc !== undefined);\n        return this._emitProperty(obj, symbol, desc);\n      });\n    }\n\n    // inject properties\n    for (let [key, propertyBinding] of properties) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      if (this.residualHeapInspector.canIgnoreProperty(obj, key)) continue;\n      invariant(desc !== undefined);\n      this.emitter.emitNowOrAfterWaitingForDependencies(this._getDescriptorValues(desc).concat(obj), () => {\n        invariant(desc !== undefined);\n        return this._emitProperty(obj, key, desc, cleanupDummyProperties != null && cleanupDummyProperties.has(key));\n      });\n    }\n\n    // inject properties with computed names\n    if (obj.unknownProperty !== undefined) {\n      let desc = obj.unknownProperty.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        this.emitter.emitNowOrAfterWaitingForDependencies(this._getNestedAbstractValues(val, [obj]), () => {\n          invariant(val instanceof AbstractValue);\n          this._emitPropertiesWithComputedNames(obj, val);\n        });\n      }\n    }\n\n    // prototype\n    this._emitObjectPrototype(obj, objectPrototypeAlreadyEstablished);\n    if (obj instanceof FunctionValue) this._emitConstructorPrototype(obj);\n\n    this.statistics.objects++;\n    this.statistics.objectProperties += obj.properties.size;\n  }\n\n  _emitObjectPrototype(obj: ObjectValue, objectPrototypeAlreadyEstablished: boolean) {\n    let kind = obj.getKind();\n    let proto = obj.$Prototype;\n    if (objectPrototypeAlreadyEstablished) {\n      // Emitting an assertion. This can be removed in the future, or put under a DEBUG flag.\n      this.emitter.emitNowOrAfterWaitingForDependencies([proto, obj], () => {\n        invariant(proto);\n        let serializedProto = this.serializeValue(proto);\n        let uid = this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(obj);\n        let condition = t.binaryExpression(\"!==\", t.memberExpression(uid, protoExpression), serializedProto);\n        let throwblock = t.blockStatement([\n          t.throwStatement(t.newExpression(t.identifier(\"Error\"), [t.stringLiteral(\"unexpected prototype\")])),\n        ]);\n        this.emitter.emit(t.ifStatement(condition, throwblock));\n      });\n      return;\n    }\n    if (proto === this.realm.intrinsics[kind + \"Prototype\"]) return;\n\n    this.emitter.emitNowOrAfterWaitingForDependencies([proto, obj], () => {\n      invariant(proto);\n      let serializedProto = this.serializeValue(proto);\n      let uid = this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(obj);\n      if (!this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION))\n        this.emitter.emit(\n          t.expressionStatement(\n            t.callExpression(this.preludeGenerator.memoizeReference(\"Object.setPrototypeOf\"), [uid, serializedProto])\n          )\n        );\n      else {\n        this.emitter.emit(\n          t.expressionStatement(t.assignmentExpression(\"=\", t.memberExpression(uid, protoExpression), serializedProto))\n        );\n      }\n    });\n  }\n\n  _emitConstructorPrototype(func: FunctionValue) {\n    // If the original prototype object was mutated,\n    // request its serialization here as this might be observable by\n    // residual code.\n    let prototype = ResidualHeapInspector.getPropertyValue(func, \"prototype\");\n    if (prototype instanceof ObjectValue && this.residualValues.has(prototype)) {\n      this.emitter.emitNowOrAfterWaitingForDependencies([func], () => {\n        invariant(prototype);\n        this.serializeValue(prototype);\n      });\n    }\n  }\n\n  _getNestedAbstractValues(absVal: AbstractValue, values: Array<Value>): Array<Value> {\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      values.push(P);\n      let V = absVal.args[1];\n      values.push(V);\n      let W = absVal.args[2];\n      if (W instanceof AbstractValue) this._getNestedAbstractValues(W, values);\n      else values.push(W);\n    } else {\n      // conditional assignment\n      values.push(cond);\n      let consequent = absVal.args[1];\n      invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2];\n      invariant(alternate instanceof AbstractValue);\n      this._getNestedAbstractValues(consequent, values);\n      this._getNestedAbstractValues(alternate, values);\n    }\n    return values;\n  }\n\n  _emitPropertiesWithComputedNames(obj: ObjectValue, absVal: AbstractValue) {\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0];\n      invariant(P instanceof AbstractValue);\n      let V = absVal.args[1];\n      let earlier_props = absVal.args[2];\n      if (earlier_props instanceof AbstractValue) this._emitPropertiesWithComputedNames(obj, earlier_props);\n      let uid = this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(obj);\n      let serializedP = this.serializeValue(P);\n      let serializedV = this.serializeValue(V);\n      this.emitter.emit(\n        t.expressionStatement(t.assignmentExpression(\"=\", t.memberExpression(uid, serializedP, true), serializedV))\n      );\n    } else {\n      // conditional assignment\n      let serializedCond = this.serializeValue(cond);\n      let consequent = absVal.args[1];\n      invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2];\n      invariant(alternate instanceof AbstractValue);\n      let oldBody = this.emitter.beginEmitting(\"consequent\", []);\n      this._emitPropertiesWithComputedNames(obj, consequent);\n      let consequentBody = this.emitter.endEmitting(\"consequent\", oldBody);\n      let consequentStatement = t.blockStatement(consequentBody);\n      oldBody = this.emitter.beginEmitting(\"alternate\", []);\n      this._emitPropertiesWithComputedNames(obj, alternate);\n      let alternateBody = this.emitter.endEmitting(\"alternate\", oldBody);\n      let alternateStatement = t.blockStatement(alternateBody);\n      this.emitter.emit(t.ifStatement(serializedCond, consequentStatement, alternateStatement));\n    }\n  }\n\n  _emitProperty(\n    val: ObjectValue,\n    key: string | SymbolValue,\n    desc: Descriptor,\n    cleanupDummyProperty: boolean = false\n  ): void {\n    if (this._canEmbedProperty(val, key, desc)) {\n      let descValue = desc.value;\n      invariant(descValue instanceof Value);\n      invariant(!this.emitter.getReasonToWaitForDependencies([descValue, val]), \"precondition of _emitProperty\");\n      let mightHaveBeenDeleted = descValue.mightHaveBeenDeleted();\n      // The only case we do not need to remove the dummy property is array index property.\n      this._assignProperty(\n        () => {\n          let serializedKey =\n            key instanceof SymbolValue ? this.serializeValue(key) : this.generator.getAsPropertyNameExpression(key);\n          let computed = key instanceof SymbolValue || !t.isIdentifier(serializedKey);\n          return t.memberExpression(\n            this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val),\n            serializedKey,\n            computed\n          );\n        },\n        () => {\n          invariant(descValue instanceof Value);\n          return this.serializeValue(descValue);\n        },\n        mightHaveBeenDeleted,\n        cleanupDummyProperty\n      );\n    } else {\n      let descProps = [];\n\n      let boolKeys = [\"enumerable\", \"configurable\"];\n      let valKeys = [];\n\n      if (!desc.get && !desc.set) {\n        boolKeys.push(\"writable\");\n        valKeys.push(\"value\");\n      } else {\n        valKeys.push(\"set\", \"get\");\n      }\n\n      let descriptorsKey = [];\n      for (let boolKey of boolKeys) {\n        if (boolKey in desc) {\n          let b = desc[boolKey];\n          invariant(b !== undefined);\n          descProps.push(t.objectProperty(t.identifier(boolKey), t.booleanLiteral(b)));\n          descriptorsKey.push(`${boolKey}:${b.toString()}`);\n        }\n      }\n\n      for (let descKey of valKeys) {\n        if (descKey in desc) descriptorsKey.push(descKey);\n      }\n\n      descriptorsKey = descriptorsKey.join(\",\");\n      let descriptorId = this.descriptors.get(descriptorsKey);\n      if (descriptorId === undefined) {\n        descriptorId = t.identifier(this.descriptorNameGenerator.generate(descriptorsKey));\n        let declar = t.variableDeclaration(\"var\", [t.variableDeclarator(descriptorId, t.objectExpression(descProps))]);\n        // The descriptors are used across all scopes, and thus must be declared in the prelude.\n        this.prelude.push(declar);\n        this.descriptors.set(descriptorsKey, descriptorId);\n      }\n      invariant(descriptorId !== undefined);\n\n      for (let descKey of valKeys) {\n        if (descKey in desc) {\n          let descValue = desc[descKey];\n          invariant(descValue instanceof Value);\n          invariant(!this.emitter.getReasonToWaitForDependencies([descValue]), \"precondition of _emitProperty\");\n          this.emitter.emit(\n            t.expressionStatement(\n              t.assignmentExpression(\n                \"=\",\n                t.memberExpression(descriptorId, t.identifier(descKey)),\n                this.serializeValue(descValue)\n              )\n            )\n          );\n        }\n      }\n      let serializedKey =\n        key instanceof SymbolValue\n          ? this.serializeValue(key)\n          : this.generator.getAsPropertyNameExpression(key, /*canBeIdentifier*/ false);\n      invariant(!this.emitter.getReasonToWaitForDependencies([val]), \"precondition of _emitProperty\");\n      let uid = this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val);\n      this.emitter.emit(\n        t.expressionStatement(\n          t.callExpression(this.preludeGenerator.memoizeReference(\"Object.defineProperty\"), [\n            uid,\n            serializedKey,\n            descriptorId,\n          ])\n        )\n      );\n    }\n  }\n\n  _serializeDeclarativeEnvironmentRecordBinding(visitedBinding: VisitedBinding): SerializedBinding {\n    let serializedBinding = this.declarativeEnvironmentRecordsBindings.get(visitedBinding);\n    if (!serializedBinding) {\n      let value = visitedBinding.value;\n      invariant(value);\n      invariant(visitedBinding.declarativeEnvironmentRecord);\n\n      // Set up binding identity before starting to serialize value. This is needed in case of recursive dependencies.\n      serializedBinding = {\n        serializedValue: undefined,\n        value,\n        modified: visitedBinding.modified,\n        referentialized: false,\n        declarativeEnvironmentRecord: visitedBinding.declarativeEnvironmentRecord,\n      };\n      this.declarativeEnvironmentRecordsBindings.set(visitedBinding, serializedBinding);\n      let serializedValue = this.serializeValue(value);\n      serializedBinding.serializedValue = serializedValue;\n      if (value.mightBeObject()) {\n        // Increment ref count one more time to ensure that this object will be assigned a unique id.\n        // This ensures that only once instance is created across all possible residual function invocations.\n        this.residualHeapValueIdentifiers.incrementReferenceCount(value);\n      }\n    }\n    return serializedBinding;\n  }\n\n  // Determine whether initialization code for a value should go into the main body, or a more specific initialization body.\n  _getTarget(val: Value, scopes: Set<Scope>): { body: Array<BabelNodeStatement>, usedOnlyByResidualFunctions?: true } {\n    // All relevant values were visited in at least one scope.\n    invariant(scopes.size >= 1);\n\n    // First, let's figure out from which function and generator scopes this value is referenced.\n    let functionValues = [];\n    let generators = [];\n    for (let scope of scopes) {\n      if (scope instanceof FunctionValue) functionValues.push(scope);\n      else {\n        invariant(scope instanceof Generator);\n        if (scope === this.realm.generator) {\n          // This value is used from the main generator scope. This means that we need to emit the value and its\n          // initialization code into the main body, and cannot delay initialization.\n          return { body: this.mainBody };\n        }\n        generators.push(scope);\n      }\n    }\n\n    if (generators.length === 0) {\n      // This value is only referenced from residual functions.\n      invariant(functionValues.length > 0);\n      if (this.delayInitializations) {\n        // We can delay the initialization, and move it into a conditional code block in the residual functions!\n        let body = this.residualFunctions.residualFunctionInitializers.registerValueOnlyReferencedByResidualFunctions(\n          functionValues,\n          val\n        );\n        return { body, usedOnlyByResidualFunctions: true };\n      } else {\n        // We can just emit it into the main body which will get executed unconditionally.\n        return { body: this.mainBody };\n      }\n    }\n\n    // This value is referenced from more than one generator or function.\n    // We can emit the initialization of this value into the body associated with their common ancestor.\n    let commonAncestor = Array.from(scopes).reduce((x, y) => commonAncestorOf(x, y), generators[0]);\n    invariant(commonAncestor instanceof Generator); // every scope is either the root, or a descendant\n    let body = commonAncestor === this.generator ? this.mainBody : this.activeGeneratorBodies.get(commonAncestor);\n    invariant(body !== undefined);\n    return { body: body };\n  }\n\n  serializeValue(val: Value, referenceOnly?: boolean, bindingType?: BabelVariableKind): BabelNodeExpression {\n    let scopes = this.residualValues.get(val);\n    invariant(scopes !== undefined);\n\n    let ref = this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCountOptional(val);\n    if (ref) {\n      return ref;\n    }\n\n    this.serializedValues.add(val);\n    if (!referenceOnly && ResidualHeapInspector.isLeaf(val)) {\n      let res = this._serializeValue(val);\n      invariant(res !== undefined);\n      return res;\n    }\n\n    let target = this._getTarget(val, scopes);\n\n    let name = this.valueNameGenerator.generate(val.__originalName || \"\");\n    let id = t.identifier(name);\n    this.residualHeapValueIdentifiers.setIdentifier(val, id);\n    let oldBody = this.emitter.beginEmitting(val, target.body);\n    let init = this._serializeValue(val);\n    let result = id;\n    this.residualHeapValueIdentifiers.incrementReferenceCount(val);\n\n    if (this.residualHeapValueIdentifiers.needsIdentifier(val)) {\n      if (init) {\n        if (init !== id) {\n          if (target.usedOnlyByResidualFunctions) {\n            let declar = t.variableDeclaration(bindingType ? bindingType : \"var\", [t.variableDeclarator(id)]);\n            this.mainBody.push(declar);\n            let assignment = t.expressionStatement(t.assignmentExpression(\"=\", id, init));\n            this.emitter.emit(assignment);\n          } else {\n            let declar = t.variableDeclaration(bindingType ? bindingType : \"var\", [t.variableDeclarator(id, init)]);\n            this.emitter.emit(declar);\n          }\n        }\n        this.statistics.valueIds++;\n        if (target.usedOnlyByResidualFunctions) this.statistics.delayedValues++;\n      }\n    } else {\n      if (init) {\n        this.residualHeapValueIdentifiers.deleteIdentifier(val);\n        result = init;\n        this.statistics.valuesInlined++;\n      }\n    }\n\n    this.emitter.endEmitting(val, oldBody);\n    return result;\n  }\n\n  _serializeValueIntrinsic(val: Value): BabelNodeExpression {\n    let intrinsicName = val.intrinsicName;\n    invariant(intrinsicName);\n    let intrinsicId = t.identifier(this.valueNameGenerator.generate(intrinsicName));\n    let declar = t.variableDeclaration(\"var\", [\n      t.variableDeclarator(intrinsicId, this.preludeGenerator.convertStringToMember(intrinsicName)),\n    ]);\n    if (val instanceof ObjectValue && val.intrinsicNameGenerated) {\n      // TODO #882: The value came into existance as a template for an abstract object.\n      // Unfortunately, we are not properly tracking which generate it's associated with.\n      // Until this gets fixed, let's stick to the historical behavior: Emit to the current emitter body.\n      this.emitter.emit(declar);\n    } else {\n      invariant(this.emitter.getBody() === this.mainBody);\n      this.prelude.push(declar);\n    }\n    return intrinsicId;\n  }\n\n  _getDescriptorValues(desc: Descriptor): Array<Value> {\n    if (desc.value !== undefined) return [desc.value];\n    invariant(desc.get !== undefined);\n    invariant(desc.set !== undefined);\n    return [desc.get, desc.set];\n  }\n\n  _assignProperty(\n    locationFn: () => BabelNodeLVal,\n    valueFn: () => BabelNodeExpression,\n    mightHaveBeenDeleted: boolean,\n    cleanupDummyProperty: boolean = false\n  ) {\n    let location = locationFn();\n    let value = valueFn();\n    let assignment = t.expressionStatement(t.assignmentExpression(\"=\", location, value));\n    if (mightHaveBeenDeleted) {\n      let condition = t.binaryExpression(\"!==\", value, this.serializeValue(this.realm.intrinsics.empty));\n      let deletion = null;\n      if (cleanupDummyProperty) {\n        invariant(location.type === \"MemberExpression\");\n        deletion = t.expressionStatement(\n          t.unaryExpression(\"delete\", ((location: any): BabelNodeMemberExpression), true)\n        );\n      }\n      this.emitter.emit(t.ifStatement(condition, assignment, deletion));\n    } else {\n      this.emitter.emit(assignment);\n    }\n  }\n\n  _serializeArrayIndexProperties(\n    array: ObjectValue,\n    indexPropertyLength: number,\n    remainingProperties: Map<string, PropertyBinding>\n  ) {\n    let elems = [];\n    for (let i = 0; i < indexPropertyLength; i++) {\n      let key = i + \"\";\n      let propertyBinding = remainingProperties.get(key);\n      let elem = null;\n      // \"propertyBinding === undefined\" means array has a hole in the middle.\n      if (propertyBinding !== undefined) {\n        let descriptor = propertyBinding.descriptor;\n        // \"descriptor === undefined\" means this array item has been deleted.\n        if (\n          descriptor !== undefined &&\n          descriptor.value !== undefined &&\n          this._canEmbedProperty(array, key, descriptor)\n        ) {\n          let elemVal = descriptor.value;\n          invariant(elemVal instanceof Value);\n          let mightHaveBeenDeleted = elemVal.mightHaveBeenDeleted();\n          let delayReason =\n            this.emitter.getReasonToWaitForDependencies(elemVal) ||\n            this.emitter.getReasonToWaitForActiveValue(array, mightHaveBeenDeleted);\n          if (!delayReason) {\n            elem = this.serializeValue(elemVal);\n            remainingProperties.delete(key);\n          }\n        }\n      }\n      elems.push(elem);\n    }\n    return elems;\n  }\n\n  _serializeArrayLengthIfNeeded(\n    val: ObjectValue,\n    numberOfIndexProperties: number,\n    remainingProperties: Map<string, PropertyBinding>\n  ): void {\n    const realm = this.realm;\n    let lenProperty = Get(realm, val, \"length\");\n    // Need to serialize length property if:\n    // 1. array length is abstract.\n    // 2. array length is concrete, but different from number of index properties\n    //  we put into initialization list.\n    if (lenProperty instanceof AbstractValue || ToLength(realm, lenProperty) !== numberOfIndexProperties) {\n      this.emitter.emitNowOrAfterWaitingForDependencies([val], () => {\n        this._assignProperty(\n          () =>\n            t.memberExpression(\n              this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val),\n              t.identifier(\"length\")\n            ),\n          () => {\n            return this.serializeValue(lenProperty);\n          },\n          false /*mightHaveBeenDeleted*/\n        );\n      });\n      remainingProperties.delete(\"length\");\n    }\n  }\n\n  _serializeValueArray(val: ObjectValue): BabelNodeExpression {\n    let remainingProperties = new Map(val.properties);\n\n    const indexPropertyLength = getSuggestedArrayLiteralLength(this.realm, val);\n    // Use the serialized index properties as array initialization list.\n    const initProperties = this._serializeArrayIndexProperties(val, indexPropertyLength, remainingProperties);\n    this._serializeArrayLengthIfNeeded(val, indexPropertyLength, remainingProperties);\n    this._emitObjectProperties(val, remainingProperties);\n    return t.arrayExpression(initProperties);\n  }\n\n  _serializeValueMap(val: ObjectValue): BabelNodeExpression {\n    let kind = val.getKind();\n    let elems = [];\n\n    let entries;\n    if (kind === \"Map\") {\n      entries = val.$MapData;\n    } else {\n      invariant(kind === \"WeakMap\");\n      entries = val.$WeakMapData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n    let mapConstructorDoesntTakeArguments = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION);\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      let key = entry.$Key;\n      let value = entry.$Value;\n      if (key === undefined || value === undefined) continue;\n      let mightHaveBeenDeleted = key.mightHaveBeenDeleted();\n      let delayReason =\n        this.emitter.getReasonToWaitForDependencies(key) ||\n        this.emitter.getReasonToWaitForDependencies(value) ||\n        this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted || mapConstructorDoesntTakeArguments);\n      if (delayReason) {\n        this.emitter.emitAfterWaiting(delayReason, [key, value, val], () => {\n          invariant(key !== undefined);\n          invariant(value !== undefined);\n          this.emitter.emit(\n            t.expressionStatement(\n              t.callExpression(\n                t.memberExpression(\n                  this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val),\n                  t.identifier(\"set\")\n                ),\n                [this.serializeValue(key), this.serializeValue(value)]\n              )\n            )\n          );\n        });\n      } else {\n        let serializedKey = this.serializeValue(key);\n        let serializedValue = this.serializeValue(value);\n        let elem = t.arrayExpression([serializedKey, serializedValue]);\n        elems.push(elem);\n      }\n    }\n\n    this._emitObjectProperties(val);\n    let args = elems.length > 0 ? [t.arrayExpression(elems)] : [];\n    return t.newExpression(this.preludeGenerator.memoizeReference(kind), args);\n  }\n\n  _serializeValueSet(val: ObjectValue): BabelNodeExpression {\n    let kind = val.getKind();\n    let elems = [];\n\n    let entries;\n    if (kind === \"Set\") {\n      entries = val.$SetData;\n    } else {\n      invariant(kind === \"WeakSet\");\n      entries = val.$WeakSetData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n    let setConstructorDoesntTakeArguments = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION);\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      if (entry === undefined) continue;\n      let mightHaveBeenDeleted = entry.mightHaveBeenDeleted();\n      let delayReason =\n        this.emitter.getReasonToWaitForDependencies(entry) ||\n        this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted || setConstructorDoesntTakeArguments);\n      if (delayReason) {\n        this.emitter.emitAfterWaiting(delayReason, [entry, val], () => {\n          invariant(entry !== undefined);\n          this.emitter.emit(\n            t.expressionStatement(\n              t.callExpression(\n                t.memberExpression(\n                  this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val),\n                  t.identifier(\"add\")\n                ),\n                [this.serializeValue(entry)]\n              )\n            )\n          );\n        });\n      } else {\n        let elem = this.serializeValue(entry);\n        elems.push(elem);\n      }\n    }\n\n    this._emitObjectProperties(val);\n    let args = elems.length > 0 ? [t.arrayExpression(elems)] : [];\n    return t.newExpression(this.preludeGenerator.memoizeReference(kind), args);\n  }\n\n  _serializeValueTypedArrayOrDataView(val: ObjectValue): BabelNodeExpression {\n    let buf = val.$ViewedArrayBuffer;\n    invariant(buf !== undefined);\n    let outlinedArrayBuffer = this.serializeValue(buf, true);\n    this._emitObjectProperties(val);\n    return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [outlinedArrayBuffer]);\n  }\n\n  _serializeValueArrayBuffer(val: ObjectValue): BabelNodeExpression {\n    let elems = [];\n\n    let len = val.$ArrayBufferByteLength;\n    let db = val.$ArrayBufferData;\n    invariant(len !== undefined);\n    invariant(db);\n    let allzero = true;\n    for (let i = 0; i < len; i++) {\n      if (db[i] !== 0) {\n        allzero = false;\n      }\n      let elem = t.numericLiteral(db[i]);\n      elems.push(elem);\n    }\n\n    this._emitObjectProperties(val);\n    if (allzero) {\n      // if they're all zero, just emit the array buffer constructor\n      return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [t.numericLiteral(len)]);\n    } else {\n      // initialize from a byte array otherwise\n      let arrayValue = t.arrayExpression(elems);\n      let consExpr = t.newExpression(this.preludeGenerator.memoizeReference(\"Uint8Array\"), [arrayValue]);\n      // access the Uint8Array.buffer property to extract the created buffer\n      return t.memberExpression(consExpr, t.identifier(\"buffer\"));\n    }\n  }\n\n  _serializeValueFunction(val: FunctionValue): void | BabelNodeExpression {\n    if (val instanceof BoundFunctionValue) {\n      this._emitObjectProperties(val);\n      return t.callExpression(\n        t.memberExpression(this.serializeValue(val.$BoundTargetFunction), t.identifier(\"bind\")),\n        [].concat(\n          this.serializeValue(val.$BoundThis),\n          val.$BoundArguments.map((boundArg, i) => this.serializeValue(boundArg))\n        )\n      );\n    }\n\n    invariant(!(val instanceof NativeFunctionValue), \"all native function values should be intrinsics\");\n\n    let residualBindings = this.residualFunctionBindings.get(val);\n    invariant(residualBindings);\n\n    invariant(val instanceof ECMAScriptSourceFunctionValue);\n    let serializedBindings = Object.create(null);\n    let instance: FunctionInstance = {\n      serializedBindings,\n      functionValue: val,\n      scopeInstances: new Set(),\n    };\n\n    let delayed = 1;\n    let undelay = () => {\n      if (--delayed === 0) {\n        instance.insertionPoint = this.emitter.getBodyReference();\n        this.residualFunctions.addFunctionInstance(instance);\n      }\n    };\n    for (let boundName in residualBindings) {\n      let residualBinding = residualBindings[boundName];\n      let referencedValues = [];\n      let serializeBindingFunc;\n      if (!residualBinding.declarativeEnvironmentRecord) {\n        serializeBindingFunc = () => this._serializeGlobalBinding(boundName, residualBinding);\n      } else {\n        serializeBindingFunc = () => {\n          return this._serializeDeclarativeEnvironmentRecordBinding(residualBinding);\n        };\n        invariant(residualBinding.value !== undefined);\n        referencedValues.push(residualBinding.value);\n      }\n      delayed++;\n      this.emitter.emitNowOrAfterWaitingForDependencies(referencedValues, () => {\n        let serializedBinding = serializeBindingFunc();\n        invariant(serializedBinding);\n        serializedBindings[boundName] = serializedBinding;\n        undelay();\n      });\n    }\n\n    undelay();\n\n    this._emitObjectProperties(val);\n  }\n\n  // Checks whether a property can be defined via simple assignment, or using object literal syntax.\n  _canEmbedProperty(obj: ObjectValue, key: string | SymbolValue, prop: Descriptor): boolean {\n    if ((obj instanceof FunctionValue && key === \"prototype\") || (obj.getKind() === \"RegExp\" && key === \"lastIndex\"))\n      return !!prop.writable && !prop.configurable && !prop.enumerable && !prop.set && !prop.get;\n    else return !!prop.writable && !!prop.configurable && !!prop.enumerable && !prop.set && !prop.get;\n  }\n\n  _findLastObjectPrototype(obj: ObjectValue): ObjectValue {\n    while (obj.$Prototype instanceof ObjectValue) obj = obj.$Prototype;\n    return obj;\n  }\n\n  _serializeValueObject(val: ObjectValue): BabelNodeExpression {\n    // If this object is a prototype object that was implicitly created by the runtime\n    // for a constructor, then we can obtain a reference to this object\n    // in a special way that's handled alongside function serialization.\n    let constructor = val.originalConstructor;\n    if (constructor !== undefined) {\n      let prototypeId = this.residualHeapValueIdentifiers.getIdentifier(val);\n      this.emitter.emitNowOrAfterWaitingForDependencies([constructor], () => {\n        invariant(constructor !== undefined);\n        invariant(prototypeId !== undefined);\n        this.serializeValue(constructor);\n        this._emitObjectProperties(val);\n        invariant(prototypeId.type === \"Identifier\");\n        this.residualFunctions.setFunctionPrototype(constructor, prototypeId);\n      });\n      return prototypeId;\n    }\n\n    let kind = val.getKind();\n    switch (kind) {\n      case \"RegExp\":\n        let source = val.$OriginalSource;\n        let flags = val.$OriginalFlags;\n        invariant(typeof source === \"string\");\n        invariant(typeof flags === \"string\");\n        this._emitObjectProperties(val);\n        source = new RegExp(source).source; // add escapes as per 21.2.3.2.4\n        return t.regExpLiteral(source, flags);\n      case \"Number\":\n        let numberData = val.$NumberData;\n        invariant(numberData !== undefined);\n        numberData.throwIfNotConcreteNumber();\n        invariant(numberData instanceof NumberValue, \"expected number data internal slot to be a number value\");\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Number\"), [t.numericLiteral(numberData.value)]);\n      case \"String\":\n        let stringData = val.$StringData;\n        invariant(stringData !== undefined);\n        stringData.throwIfNotConcreteString();\n        invariant(stringData instanceof StringValue, \"expected string data internal slot to be a string value\");\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"String\"), [t.stringLiteral(stringData.value)]);\n      case \"Boolean\":\n        let booleanData = val.$BooleanData;\n        invariant(booleanData !== undefined);\n        booleanData.throwIfNotConcreteBoolean();\n        invariant(booleanData instanceof BooleanValue, \"expected boolean data internal slot to be a boolean value\");\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Boolean\"), [\n          t.booleanLiteral(booleanData.value),\n        ]);\n      case \"Date\":\n        let dateValue = val.$DateValue;\n        invariant(dateValue !== undefined);\n        let serializedDateValue = this.serializeValue(dateValue);\n        this._emitObjectProperties(val);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Date\"), [serializedDateValue]);\n      case \"Float32Array\":\n      case \"Float64Array\":\n      case \"Int8Array\":\n      case \"Int16Array\":\n      case \"Int32Array\":\n      case \"Uint8Array\":\n      case \"Uint16Array\":\n      case \"Uint32Array\":\n      case \"Uint8ClampedArray\":\n      case \"DataView\":\n        return this._serializeValueTypedArrayOrDataView(val);\n      case \"ArrayBuffer\":\n        return this._serializeValueArrayBuffer(val);\n      case \"Map\":\n      case \"WeakMap\":\n        return this._serializeValueMap(val);\n      case \"Set\":\n      case \"WeakSet\":\n        return this._serializeValueSet(val);\n      default:\n        invariant(kind === \"Object\", \"invariant established by visitor\");\n        invariant(this.$ParameterMap === undefined, \"invariant established by visitor\");\n\n        let proto = val.$Prototype;\n        let createViaAuxiliaryConstructor =\n          proto !== this.realm.intrinsics.ObjectPrototype &&\n          this._findLastObjectPrototype(val) === this.realm.intrinsics.ObjectPrototype &&\n          proto instanceof ObjectValue;\n\n        let remainingProperties = new Map(val.properties);\n        const dummyProperties = new Set();\n        let props = [];\n        for (let [key, propertyBinding] of val.properties) {\n          let descriptor = propertyBinding.descriptor;\n          if (descriptor === undefined || descriptor.value === undefined) continue; // deleted\n          if (!createViaAuxiliaryConstructor && this._canEmbedProperty(val, key, descriptor)) {\n            let propValue = descriptor.value;\n            invariant(propValue instanceof Value);\n            if (this.residualHeapInspector.canIgnoreProperty(val, key)) continue;\n            let mightHaveBeenDeleted = propValue.mightHaveBeenDeleted();\n            let serializedKey = this.generator.getAsPropertyNameExpression(key);\n            let delayReason =\n              this.emitter.getReasonToWaitForDependencies(propValue) ||\n              this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted);\n            // Although the property needs to be delayed, we still want to emit dummy \"undefined\"\n            // value as part of the object literal to ensure a consistent property ordering.\n            let serializedValue = voidExpression;\n            if (delayReason) {\n              // May need to be cleaned up later.\n              dummyProperties.add(key);\n            } else {\n              remainingProperties.delete(key);\n              serializedValue = this.serializeValue(propValue);\n            }\n            props.push(t.objectProperty(serializedKey, serializedValue));\n          }\n        }\n        this._emitObjectProperties(val, remainingProperties, createViaAuxiliaryConstructor, dummyProperties);\n\n        if (createViaAuxiliaryConstructor) {\n          this.needsAuxiliaryConstructor = true;\n          let serializedProto = this.serializeValue(proto);\n          return t.sequenceExpression([\n            t.assignmentExpression(\n              \"=\",\n              t.memberExpression(constructorExpression, t.identifier(\"prototype\")),\n              serializedProto\n            ),\n            t.newExpression(constructorExpression, []),\n          ]);\n        } else {\n          return t.objectExpression(props);\n        }\n    }\n  }\n\n  _serializeValueSymbol(val: SymbolValue): BabelNodeExpression {\n    let args = [];\n    if (val.$Description instanceof Value) {\n      let serializedArg = this.serializeValue(val.$Description);\n      invariant(serializedArg);\n      args.push(serializedArg);\n    }\n    return t.callExpression(this.preludeGenerator.memoizeReference(\"Symbol\"), args);\n  }\n\n  _serializeValueProxy(val: ProxyValue): BabelNodeExpression {\n    return t.newExpression(this.preludeGenerator.memoizeReference(\"Proxy\"), [\n      this.serializeValue(val.$ProxyTarget),\n      this.serializeValue(val.$ProxyHandler),\n    ]);\n  }\n\n  _serializeAbstractValue(val: AbstractValue): BabelNodeExpression {\n    invariant(val.kind !== \"sentinel member expression\", \"invariant established by visitor\");\n    let serializedArgs = val.args.map((abstractArg, i) => this.serializeValue(abstractArg));\n    let serializedValue = val.buildNode(serializedArgs);\n    if (serializedValue.type === \"Identifier\") {\n      let id = ((serializedValue: any): BabelNodeIdentifier);\n      invariant(!this.preludeGenerator.derivedIds.has(id.name) || this.emitter.hasBeenDeclared(val));\n    }\n    return serializedValue;\n  }\n\n  _serializeValue(val: Value): void | BabelNodeExpression {\n    if (val instanceof AbstractValue) {\n      return this._serializeAbstractValue(val);\n    } else if (val.isIntrinsic()) {\n      return this._serializeValueIntrinsic(val);\n    } else if (val instanceof EmptyValue) {\n      this.needsEmptyVar = true;\n      return emptyExpression;\n    } else if (val instanceof UndefinedValue) {\n      return voidExpression;\n    } else if (ResidualHeapInspector.isLeaf(val)) {\n      return t.valueToNode(val.serialize());\n    } else if (IsArray(this.realm, val)) {\n      invariant(val instanceof ObjectValue);\n      return this._serializeValueArray(val);\n    } else if (val instanceof ProxyValue) {\n      return this._serializeValueProxy(val);\n    } else if (val instanceof FunctionValue) {\n      return this._serializeValueFunction(val);\n    } else if (val instanceof SymbolValue) {\n      return this._serializeValueSymbol(val);\n    } else {\n      invariant(val instanceof ObjectValue);\n      return this._serializeValueObject(val);\n    }\n  }\n\n  _serializeGlobalBinding(boundName: string, visitedBinding: VisitedBinding): SerializedBinding {\n    invariant(!visitedBinding.declarativeEnvironmentRecord);\n    if (boundName === \"undefined\") {\n      // The global 'undefined' property is not writable and not configurable, and thus we can just use 'undefined' here,\n      // encoded as 'void 0' to avoid the possibility of interference with local variables named 'undefined'.\n      return { serializedValue: voidExpression, value: undefined, modified: true, referentialized: true };\n    }\n\n    let value = this.realm.getGlobalLetBinding(boundName);\n    // Check for let binding vs global property\n    if (value) {\n      let id = this.serializeValue(value, true, \"let\");\n      // increment ref count one more time as the value has been\n      // referentialized (stored in a variable) by serializeValue\n      this.residualHeapValueIdentifiers.incrementReferenceCount(value);\n      return { serializedValue: id, value: undefined, modified: true, referentialized: true };\n    } else {\n      return {\n        serializedValue: this.preludeGenerator.globalReference(boundName),\n        value: undefined,\n        modified: true,\n        referentialized: true,\n      };\n    }\n  }\n\n  _getContext(): SerializationContext {\n    // TODO #482: Values serialized by nested generators would currently only get defined\n    // along the code of the nested generator; their definitions need to get hoisted\n    // or repeated so that they are accessible and defined from all using scopes\n    let context = {\n      serializeValue: this.serializeValue.bind(this),\n      serializeGenerator: (generator: Generator) => {\n        let newBody = [];\n        let oldBody = this.emitter.beginEmitting(generator, newBody);\n        this.activeGeneratorBodies.set(generator, newBody);\n        generator.serialize(context);\n        this.activeGeneratorBodies.delete(generator);\n        return this.emitter.endEmitting(generator, oldBody);\n      },\n      emit: (statement: BabelNodeStatement) => {\n        this.emitter.emit(statement);\n      },\n      canOmit: (value: AbstractValue) => {\n        return !this.referencedDeclaredValues.has(value);\n      },\n      declare: (value: AbstractValue) => {\n        this.emitter.declare(value);\n      },\n    };\n    return context;\n  }\n\n  _shouldBeWrapped(body: Array<any>) {\n    for (let i = 0; i < body.length; i++) {\n      let item = body[i];\n      if (item.type === \"ExpressionStatement\") {\n        continue;\n      } else if (item.type === \"VariableDeclaration\" || item.type === \"FunctionDeclaration\") {\n        return true;\n      } else if (item.type === \"BlockStatement\") {\n        if (this._shouldBeWrapped(item.body)) {\n          return true;\n        }\n      } else if (item.type === \"IfStatement\") {\n        if (item.alternate) {\n          if (this._shouldBeWrapped(item.alternate.body)) {\n            return true;\n          }\n        }\n        if (item.consequent) {\n          if (this._shouldBeWrapped(item.consequent.body)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  serialize(): BabelNodeFile {\n    this.generator.serialize(this._getContext());\n    invariant(this.emitter._declaredAbstractValues.size <= this.preludeGenerator.derivedIds.size);\n\n    Array.prototype.push.apply(this.prelude, this.preludeGenerator.prelude);\n\n    // TODO #20: add timers\n\n    // TODO #21: add event listeners\n    for (let [moduleId, moduleValue] of this.modules.initializedModules)\n      this.requireReturns.set(moduleId, this.serializeValue(moduleValue));\n\n    this.emitter.finalize();\n\n    let { unstrictFunctionBodies, strictFunctionBodies, requireStatistics } = this.residualFunctions.spliceFunctions();\n    if (requireStatistics.replaced > 0 && !this.residualHeapValueIdentifiers.collectValToRefCountOnly) {\n      console.log(\n        `=== ${this.modules.initializedModules.size} of ${this.modules.moduleIds\n          .size} modules initialized, ${requireStatistics.replaced} of ${requireStatistics.count} require calls inlined.`\n      );\n    }\n\n    // add strict modes\n    let strictDirective = t.directive(t.directiveLiteral(\"use strict\"));\n    let globalDirectives = [];\n    if (!this.realm.isStrict && !unstrictFunctionBodies.length && strictFunctionBodies.length) {\n      // no unstrict functions, only strict ones\n      globalDirectives.push(strictDirective);\n    } else if (unstrictFunctionBodies.length && strictFunctionBodies.length) {\n      // strict and unstrict functions\n      funcLoop: for (let func of strictFunctionBodies) {\n        if (func.body.directives) {\n          for (let directive of func.body.directives) {\n            if (directive.value.value === \"use strict\") {\n              // already have a use strict directive\n              continue funcLoop;\n            }\n          }\n        } else func.body.directives = [];\n\n        func.body.directives.unshift(strictDirective);\n      }\n    }\n\n    // build ast\n    if (this.needsEmptyVar) {\n      this.prelude.push(t.variableDeclaration(\"var\", [t.variableDeclarator(emptyExpression, t.objectExpression([]))]));\n    }\n    if (this.needsAuxiliaryConstructor) {\n      this.prelude.push(\n        t.variableDeclaration(\"var\", [\n          t.variableDeclarator(constructorExpression, t.functionExpression(null, [], t.blockStatement([]))),\n        ])\n      );\n    }\n    let body = this.prelude.concat(this.emitter.getBody());\n    factorifyObjects(body, this.factoryNameGenerator);\n\n    let ast_body = [];\n    if (this.preludeGenerator.declaredGlobals.size > 0)\n      ast_body.push(\n        t.variableDeclaration(\n          \"var\",\n          Array.from(this.preludeGenerator.declaredGlobals).map(key => t.variableDeclarator(t.identifier(key)))\n        )\n      );\n    if (body.length) {\n      if (this.realm.isCompatibleWith(\"node-source-maps\")) {\n        ast_body.push(\n          t.expressionStatement(\n            t.callExpression(\n              t.memberExpression(\n                t.callExpression(t.identifier(\"require\"), [t.stringLiteral(\"source-map-support\")]),\n                t.identifier(\"install\")\n              ),\n              []\n            )\n          )\n        );\n      }\n\n      if (this._shouldBeWrapped(body)) {\n        let globalExpression = this.realm.isCompatibleWith(\"node-cli\") ? t.identifier(\"global\") : t.thisExpression();\n\n        let functionExpression = t.functionExpression(null, [], t.blockStatement(body, globalDirectives));\n        let callExpression = this.preludeGenerator.usesThis\n          ? t.callExpression(t.memberExpression(functionExpression, t.identifier(\"call\")), [globalExpression])\n          : t.callExpression(functionExpression, []);\n        ast_body.push(t.expressionStatement(callExpression));\n      } else {\n        ast_body = body;\n      }\n    }\n\n    invariant(\n      this.serializedValues.size === this.residualValues.size,\n      \"serialized \" + this.serializedValues.size + \" of \" + this.residualValues.size\n    );\n\n    let program_directives = [];\n    if (this.realm.isStrict) program_directives.push(strictDirective);\n    return t.file(t.program(ast_body, program_directives));\n  }\n}\n"]}