{"version":3,"sources":["../../src/serializer/serializer.js"],"names":["t","Serializer","realm","serializerOptions","useAbstractInterpretation","generator","logger","internalDebug","modules","logModules","delayUnsupportedRequires","functions","additionalFunctions","moduleTracer","trace","tracers","push","options","sources","sourceMaps","$GlobalEnv","executeSources","realmPreludeGenerator","preludeGenerator","forbiddenNames","nameGenerator","ast","isIdentifier","node","add","name","res","code","context","pushContext","logCompletion","popContext","diagnostic","location","handleError","timingStats","profile","undefined","totalTime","Date","now","globalCodeTime","_execute","hasErrors","resolveInitializedModules","checkThatFunctionsAreIndependent","initializeMoreModules","initializeMoreModulesTime","deepTraversalTime","residualHeapVisitor","visitRoots","residualHeapValueIdentifiers","inlineExpressions","referenceCountsTime","initPass1","inspector","values","functionBindings","functionInfos","delayInitializations","referencedDeclaredValues","serialize","initPass2","serializePassTime","residualHeapSerializer","generated","logStatistics","statistics","log","map"],"mappings":"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","file":"serializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\nimport type { SourceFile } from \"../types.js\";\nimport { AbruptCompletion } from \"../completions.js\";\nimport { Generator } from \"../utils/generator.js\";\nimport generate from \"babel-generator\";\nimport type SourceMap from \"babel-generator\";\nimport traverseFast from \"../utils/traverse-fast.js\";\nimport invariant from \"../invariant.js\";\nimport type { SerializerOptions } from \"../options.js\";\nimport { TimingStatistics, SerializerStatistics } from \"./types.js\";\nimport { Functions } from \"./functions.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { LoggingTracer } from \"./LoggingTracer.js\";\nimport { ResidualHeapVisitor } from \"./ResidualHeapVisitor.js\";\nimport { ResidualHeapSerializer } from \"./ResidualHeapSerializer.js\";\nimport { ResidualHeapValueIdentifiers } from \"./ResidualHeapValueIdentifiers.js\";\nimport * as t from \"babel-types\";\n\nexport class Serializer {\n  constructor(realm: Realm, serializerOptions: SerializerOptions = {}) {\n    invariant(realm.useAbstractInterpretation);\n    // Start tracking mutations\n    realm.generator = new Generator(realm);\n\n    this.realm = realm;\n    this.logger = new Logger(this.realm, !!serializerOptions.internalDebug);\n    this.modules = new Modules(\n      this.realm,\n      this.logger,\n      !!serializerOptions.logModules,\n      !!serializerOptions.delayUnsupportedRequires\n    );\n    this.functions = new Functions(this.realm, serializerOptions.additionalFunctions, this.modules.moduleTracer);\n    if (serializerOptions.trace) this.realm.tracers.push(new LoggingTracer(this.realm));\n\n    this.options = serializerOptions;\n  }\n\n  realm: Realm;\n  functions: Functions;\n  logger: Logger;\n  modules: Modules;\n  options: SerializerOptions;\n\n  _execute(sources: Array<SourceFile>, sourceMaps?: boolean = false) {\n    let realm = this.realm;\n    let [res, code] = realm.$GlobalEnv.executeSources(sources, \"script\", ast => {\n      let realmPreludeGenerator = realm.preludeGenerator;\n      invariant(realmPreludeGenerator);\n      let forbiddenNames = realmPreludeGenerator.nameGenerator.forbiddenNames;\n      traverseFast(ast, node => {\n        if (!t.isIdentifier(node)) return false;\n\n        forbiddenNames.add(((node: any): BabelNodeIdentifier).name);\n        return true;\n      });\n    });\n\n    if (res instanceof AbruptCompletion) {\n      let context = new ExecutionContext();\n      realm.pushContext(context);\n      try {\n        this.logger.logCompletion(res);\n      } finally {\n        realm.popContext(context);\n      }\n      let diagnostic = new CompilerDiagnostic(\"Global code may end abruptly\", res.location, \"PP0016\", \"FatalError\");\n      realm.handleError(diagnostic);\n      throw new FatalError();\n    }\n    return code;\n  }\n\n  init(\n    sources: Array<SourceFile>,\n    sourceMaps?: boolean = false\n  ): void | {\n    code: string,\n    map: void | SourceMap,\n    statistics?: SerializerStatistics,\n    timingStats?: TimingStatistics,\n  } {\n    // Phase 1: Let's interpret.\n    let timingStats = this.options.profile ? new TimingStatistics() : undefined;\n    if (timingStats !== undefined) {\n      timingStats.totalTime = Date.now();\n      timingStats.globalCodeTime = Date.now();\n    }\n    let code = this._execute(sources);\n    if (timingStats !== undefined) timingStats.globalCodeTime = Date.now() - timingStats.globalCodeTime;\n    if (this.logger.hasErrors()) return undefined;\n    this.modules.resolveInitializedModules();\n    if (this.options.additionalFunctions) {\n      this.functions.checkThatFunctionsAreIndependent();\n    }\n    if (this.options.initializeMoreModules) {\n      if (timingStats !== undefined) timingStats.initializeMoreModulesTime = Date.now();\n      this.modules.initializeMoreModules();\n      if (this.logger.hasErrors()) return undefined;\n      if (timingStats !== undefined)\n        timingStats.initializeMoreModulesTime = Date.now() - timingStats.initializeMoreModulesTime;\n    }\n\n    //Deep traversal of the heap to identify the necessary scope of residual functions\n\n    if (timingStats !== undefined) timingStats.deepTraversalTime = Date.now();\n    let residualHeapVisitor = new ResidualHeapVisitor(this.realm, this.logger, this.modules);\n    residualHeapVisitor.visitRoots();\n    if (this.logger.hasErrors()) return undefined;\n    if (timingStats !== undefined) timingStats.deepTraversalTime = Date.now() - timingStats.deepTraversalTime;\n\n    // Phase 2: Let's serialize the heap and generate code.\n    // Serialize for the first time in order to gather reference counts\n    let residualHeapValueIdentifiers = new ResidualHeapValueIdentifiers();\n    if (this.options.inlineExpressions) {\n      if (timingStats !== undefined) timingStats.referenceCountsTime = Date.now();\n      residualHeapValueIdentifiers.initPass1();\n      new ResidualHeapSerializer(\n        this.realm,\n        this.logger,\n        this.modules,\n        residualHeapValueIdentifiers,\n        residualHeapVisitor.inspector,\n        residualHeapVisitor.values,\n        residualHeapVisitor.functionBindings,\n        residualHeapVisitor.functionInfos,\n        !!this.options.delayInitializations,\n        residualHeapVisitor.referencedDeclaredValues\n      ).serialize();\n      if (this.logger.hasErrors()) return undefined;\n      if (timingStats !== undefined) timingStats.referenceCountsTime = Date.now() - timingStats.referenceCountsTime;\n      residualHeapValueIdentifiers.initPass2();\n    }\n\n    // Serialize for a second time, using reference counts to minimize number of generated identifiers\n    if (timingStats !== undefined) timingStats.serializePassTime = Date.now();\n\n    let residualHeapSerializer = new ResidualHeapSerializer(\n      this.realm,\n      this.logger,\n      this.modules,\n      residualHeapValueIdentifiers,\n      residualHeapVisitor.inspector,\n      residualHeapVisitor.values,\n      residualHeapVisitor.functionBindings,\n      residualHeapVisitor.functionInfos,\n      !!this.options.delayInitializations,\n      residualHeapVisitor.referencedDeclaredValues\n    );\n    let ast = residualHeapSerializer.serialize();\n    let generated = generate(ast, { sourceMaps: sourceMaps }, (code: any));\n    if (timingStats !== undefined) {\n      timingStats.serializePassTime = Date.now() - timingStats.serializePassTime;\n      timingStats.totalTime = Date.now() - timingStats.totalTime;\n    }\n    invariant(!this.logger.hasErrors());\n    if (this.options.logStatistics) residualHeapSerializer.statistics.log();\n    return {\n      code: generated.code,\n      map: generated.map,\n      statistics: residualHeapSerializer.statistics,\n      timingStats: timingStats,\n    };\n  }\n}\n"]}