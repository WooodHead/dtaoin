"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResidualFunctions = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * This source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * of patent rights can be found in the PATENTS file in the same directory.


var _environment = require("../environment.js");

var _errors = require("../errors.js");

var _realm = require("../realm.js");

var _index = require("../values/index.js");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _generator = require("../utils/generator.js");

var _babelTraverse = require("babel-traverse");

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _types = require("./types.js");

var _visitors = require("./visitors.js");

var _modules = require("./modules.js");

var _ResidualFunctionInitializers = require("./ResidualFunctionInitializers.js");

var _internalizer = require("../utils/internalizer.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ResidualFunctions = exports.ResidualFunctions = function () {
  function ResidualFunctions(realm, statistics, modules, requireReturns, locationService, prelude, initializerNameGenerator, factoryNameGenerator, scopeNameGenerator, residualFunctionInfos) {
    _classCallCheck(this, ResidualFunctions);

    this.realm = realm;
    this.statistics = statistics;
    this.modules = modules;
    this.requireReturns = requireReturns;
    this.locationService = locationService;
    this.prelude = prelude;
    this.factoryNameGenerator = factoryNameGenerator;
    this.scopeNameGenerator = scopeNameGenerator;
    this.capturedScopeInstanceIdx = 0;
    this.capturedScopesArray = t.identifier(this.scopeNameGenerator.generate("main"));
    this.serializedScopes = new Map();
    this.functionPrototypes = new Map();
    this.firstFunctionUsages = new Map();
    this.functions = new Map();
    this.functionInstances = [];
    this.residualFunctionInitializers = new _ResidualFunctionInitializers.ResidualFunctionInitializers(locationService, prelude, initializerNameGenerator);
    this.residualFunctionInfos = residualFunctionInfos;
  }

  _createClass(ResidualFunctions, [{
    key: "addFunctionInstance",
    value: function addFunctionInstance(instance) {
      this.functionInstances.push(instance);
      var code = instance.functionValue.$ECMAScriptCode;
      (0, _invariant2.default)(code != null);
      var functionInstances = this.functions.get(code);
      if (functionInstances === undefined) this.functions.set(code, functionInstances = []);
      functionInstances.push(instance);
    }
  }, {
    key: "setFunctionPrototype",
    value: function setFunctionPrototype(constructor, prototypeId) {
      this.functionPrototypes.set(constructor, prototypeId);
    }
  }, {
    key: "addFunctionUsage",
    value: function addFunctionUsage(val, bodyReference) {
      if (!this.firstFunctionUsages.has(val)) this.firstFunctionUsages.set(val, bodyReference);
    }
  }, {
    key: "_getSerializedBindingScopeInstance",
    value: function _getSerializedBindingScopeInstance(serializedBinding) {
      var declarativeEnvironmentRecord = serializedBinding.declarativeEnvironmentRecord;
      (0, _invariant2.default)(declarativeEnvironmentRecord);

      var scope = this.serializedScopes.get(declarativeEnvironmentRecord);
      if (!scope) {
        scope = {
          name: this.scopeNameGenerator.generate(),
          id: this.capturedScopeInstanceIdx++,
          initializationValues: new Map()
        };
        this.serializedScopes.set(declarativeEnvironmentRecord, scope);
      }

      serializedBinding.scope = scope;
      return scope;
    }
  }, {
    key: "_referentialize",
    value: function _referentialize(unbound, instances) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = instances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var instance = _step.value;

          var serializedBindings = instance.serializedBindings;

          for (var name in unbound) {
            var serializedBinding = serializedBindings[name];
            (0, _invariant2.default)(serializedBinding !== undefined);
            if (serializedBinding.modified) {
              // Initialize captured scope at function call instead of globally
              if (!serializedBinding.referentialized) {
                var scope = this._getSerializedBindingScopeInstance(serializedBinding);
                var capturedScope = "__captured" + scope.name;
                // Save the serialized value for initialization at the top of
                // the factory.
                // This can serialize more variables than are necessary to execute
                // the function because every function serializes every
                // modified variable of its parent scope. In some cases it could be
                // an improvement to split these variables into multiple
                // scopes.
                (0, _invariant2.default)(serializedBinding.serializedValue);
                scope.initializationValues.set(name, serializedBinding.serializedValue);
                scope.capturedScope = capturedScope;

                // Replace binding usage with scope references
                serializedBinding.serializedValue = t.memberExpression(t.identifier(capturedScope), t.identifier(name), false);

                serializedBinding.referentialized = true;
                this.statistics.referentialized++;
              }

              // Already referentialized in prior scope
              if (serializedBinding.declarativeEnvironmentRecord) {
                (0, _invariant2.default)(serializedBinding.scope);
                instance.scopeInstances.add(serializedBinding.scope);
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_getReferentializedScopeInitialization",
    value: function _getReferentializedScopeInitialization(scope) {
      var properties = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = scope.initializationValues.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _ref = _step2.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var variableName = _ref2[0];
          var value = _ref2[1];

          properties.push(t.objectProperty(t.identifier(variableName), value));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var initExpression = t.memberExpression(this.capturedScopesArray, t.identifier(scope.name), true);
      (0, _invariant2.default)(scope.capturedScope);
      var capturedScope = scope.capturedScope;
      var capturedScopeId = t.identifier(capturedScope);

      return [t.variableDeclaration("var", [t.variableDeclarator(capturedScopeId, initExpression)]), t.ifStatement(t.unaryExpression("!", capturedScopeId), t.expressionStatement(t.assignmentExpression("=", initExpression, t.assignmentExpression("=", capturedScopeId, t.objectExpression(properties)))))];
    }
  }, {
    key: "spliceFunctions",
    value: function spliceFunctions() {
      var _this = this;

      this.residualFunctionInitializers.scrubFunctionInitializers();

      var functionBodies = new Map();
      function getFunctionBody(instance) {
        var b = functionBodies.get(instance);
        if (b === undefined) functionBodies.set(instance, b = []);
        return b;
      }

      var requireStatistics = { replaced: 0, count: 0 };

      var functionEntries = Array.from(this.functions.entries());
      this.statistics.functions = functionEntries.length;
      var unstrictFunctionBodies = [];
      var strictFunctionBodies = [];
      var funcNodes = new Map();

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = functionEntries[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _ref3 = _step3.value;

          var _ref4 = _slicedToArray(_ref3, 2);

          var funcBody = _ref4[0];
          var instances = _ref4[1];

          var functionInfo = this.residualFunctionInfos.get(funcBody);
          (0, _invariant2.default)(functionInfo);
          this._referentialize(functionInfo.unbound, instances);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = functionEntries[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _ref5 = _step4.value;

          var _ref6 = _slicedToArray(_ref5, 2);

          var _funcBody = _ref6[0];
          var _instances = _ref6[1];

          var functionInfo = this.residualFunctionInfos.get(_funcBody);
          (0, _invariant2.default)(functionInfo);
          var unbound = functionInfo.unbound,
              modified = functionInfo.modified,
              usesThis = functionInfo.usesThis,
              usesArguments = functionInfo.usesArguments;

          var params = _instances[0].functionValue.$FormalParameters;
          (0, _invariant2.default)(params !== undefined);

          var shouldInline = !_funcBody;
          if (!shouldInline && _funcBody.start && _funcBody.end) {
            var bodySize = _funcBody.end - _funcBody.start;
            shouldInline = bodySize <= 30;
          }

          var define = function define(instance, funcId, funcNode) {
            var functionValue = instance.functionValue;

            var body = void 0;
            if (t.isFunctionExpression(funcNode)) {
              funcNodes.set(functionValue, funcNode);
              body = _this.prelude;
            } else {
              (0, _invariant2.default)(t.isCallExpression(funcNode)); // .bind call
              body = getFunctionBody(instance);
            }
            var declaration = t.variableDeclaration("var", [t.variableDeclarator(funcId, funcNode)]);
            body.push(declaration);
            var prototypeId = _this.functionPrototypes.get(functionValue);
            if (prototypeId !== undefined) {
              var id = _this.locationService.getLocation(functionValue);
              (0, _invariant2.default)(id !== undefined);
              body.push(t.variableDeclaration("var", [t.variableDeclarator(prototypeId, t.memberExpression(id, t.identifier("prototype")))]));
            }
          };

          if (shouldInline || _instances.length === 1 || usesArguments) {
            this.statistics.functionClones += _instances.length - 1;

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = _instances[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var _instance = _step7.value;
                var _functionValue = _instance.functionValue,
                    serializedBindings = _instance.serializedBindings,
                    scopeInstances = _instance.scopeInstances;

                var id = this.locationService.getLocation(_functionValue);
                (0, _invariant2.default)(id !== undefined);
                var funcParams = params.slice();
                var _funcNode = t.functionExpression(null, funcParams, t.cloneDeep(_funcBody));
                var scopeInitialization = [];
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = undefined;

                try {
                  for (var _iterator8 = scopeInstances[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var scope = _step8.value;

                    scopeInitialization.push(t.variableDeclaration("var", [t.variableDeclarator(t.identifier(scope.name), t.numericLiteral(scope.id))]));
                    scopeInitialization = scopeInitialization.concat(this._getReferentializedScopeInitialization(scope));
                  }
                } catch (err) {
                  _didIteratorError8 = true;
                  _iteratorError8 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                      _iterator8.return();
                    }
                  } finally {
                    if (_didIteratorError8) {
                      throw _iteratorError8;
                    }
                  }
                }

                _funcNode.body.body = scopeInitialization.concat(_funcNode.body.body);

                (0, _babelTraverse2.default)(t.file(t.program([t.expressionStatement(_funcNode)])), _visitors.ClosureRefReplacer, null, {
                  serializedBindings: serializedBindings,
                  modified: modified,
                  requireReturns: this.requireReturns,
                  requireStatistics: requireStatistics,
                  isRequire: this.modules.getIsRequire(funcParams, [_functionValue])
                });

                if (_functionValue.$Strict) {
                  strictFunctionBodies.push(_funcNode);
                } else {
                  unstrictFunctionBodies.push(_funcNode);
                }

                define(_instance, id, _funcNode);
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                  _iterator7.return();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }
          } else {
            // Group instances with modified bindings
            var instanceBatches = [_instances];
            for (var name in modified) {
              var newInstanceBatches = [];

              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = instanceBatches[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var batch = _step9.value;

                  // Map from representative binding to function instances that use it
                  var bindingLookup = new Map();

                  var _iteratorNormalCompletion10 = true;
                  var _didIteratorError10 = false;
                  var _iteratorError10 = undefined;

                  try {
                    for (var _iterator10 = batch[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                      var functionInstance = _step10.value;

                      var serializedBinding = functionInstance.serializedBindings[name];
                      (0, _invariant2.default)(serializedBinding !== undefined);
                      var found = false;
                      var _iteratorNormalCompletion11 = true;
                      var _didIteratorError11 = false;
                      var _iteratorError11 = undefined;

                      try {
                        for (var _iterator11 = bindingLookup.entries()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                          var _ref9 = _step11.value;

                          var _ref10 = _slicedToArray(_ref9, 2);

                          var binding = _ref10[0];
                          var group = _ref10[1];

                          if ((0, _types.AreSameSerializedBindings)(this.realm, serializedBinding, binding)) {
                            group.push(functionInstance);
                            found = true;
                            break;
                          }
                        }
                      } catch (err) {
                        _didIteratorError11 = true;
                        _iteratorError11 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion11 && _iterator11.return) {
                            _iterator11.return();
                          }
                        } finally {
                          if (_didIteratorError11) {
                            throw _iteratorError11;
                          }
                        }
                      }

                      if (!found) {
                        var matchingInstances = [functionInstance];
                        bindingLookup.set(serializedBinding, matchingInstances);
                        newInstanceBatches.push(matchingInstances);
                      }
                    }
                  } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion10 && _iterator10.return) {
                        _iterator10.return();
                      }
                    } finally {
                      if (_didIteratorError10) {
                        throw _iteratorError10;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9.return) {
                    _iterator9.return();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }

              instanceBatches = newInstanceBatches;
            }
            this.statistics.functionClones += instanceBatches.length - 1;

            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
              for (var _iterator12 = instanceBatches[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                _instances = _step12.value;

                var suffix = _instances[0].functionValue.__originalName || "";
                var factoryId = t.identifier(this.factoryNameGenerator.generate(suffix));

                // filter included variables to only include those that are different
                var factoryNames = [];
                var sameSerializedBindings = Object.create(null);
                for (var _name in unbound) {
                  var isDifferent = false;
                  var lastBinding = void 0;

                  if (_instances[0].serializedBindings[_name].modified) {
                    // Must modify for traversal
                    sameSerializedBindings[_name] = _instances[0].serializedBindings[_name];
                    continue;
                  }

                  var _iteratorNormalCompletion13 = true;
                  var _didIteratorError13 = false;
                  var _iteratorError13 = undefined;

                  try {
                    for (var _iterator13 = _instances[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                      var _ref11 = _step13.value;
                      var _serializedBindings = _ref11.serializedBindings;

                      var _serializedBinding = _serializedBindings[_name];

                      (0, _invariant2.default)(!_serializedBinding.modified);
                      if (!lastBinding) {
                        lastBinding = _serializedBinding;
                      } else if (!(0, _types.AreSameSerializedBindings)(this.realm, _serializedBinding, lastBinding)) {
                        isDifferent = true;
                        break;
                      }
                    }
                  } catch (err) {
                    _didIteratorError13 = true;
                    _iteratorError13 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion13 && _iterator13.return) {
                        _iterator13.return();
                      }
                    } finally {
                      if (_didIteratorError13) {
                        throw _iteratorError13;
                      }
                    }
                  }

                  if (isDifferent) {
                    factoryNames.push(_name);
                  } else {
                    (0, _invariant2.default)(lastBinding);
                    sameSerializedBindings[_name] = { serializedValue: lastBinding.serializedValue };
                  }
                }
                //

                var factoryParams = [];
                var _iteratorNormalCompletion14 = true;
                var _didIteratorError14 = false;
                var _iteratorError14 = undefined;

                try {
                  for (var _iterator14 = factoryNames[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                    var key = _step14.value;

                    factoryParams.push(t.identifier(key));
                  }
                } catch (err) {
                  _didIteratorError14 = true;
                  _iteratorError14 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                      _iterator14.return();
                    }
                  } finally {
                    if (_didIteratorError14) {
                      throw _iteratorError14;
                    }
                  }
                }

                var _scopeInitialization = [];
                var _iteratorNormalCompletion15 = true;
                var _didIteratorError15 = false;
                var _iteratorError15 = undefined;

                try {
                  for (var _iterator15 = _instances[0].scopeInstances[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                    var _scope = _step15.value;

                    factoryParams.push(t.identifier(_scope.name));
                    _scopeInitialization = _scopeInitialization.concat(this._getReferentializedScopeInitialization(_scope));
                  }
                } catch (err) {
                  _didIteratorError15 = true;
                  _iteratorError15 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion15 && _iterator15.return) {
                      _iterator15.return();
                    }
                  } finally {
                    if (_didIteratorError15) {
                      throw _iteratorError15;
                    }
                  }
                }

                factoryParams = factoryParams.concat(params).slice();

                // The Replacer below mutates the AST, so let's clone the original AST to avoid modifying it
                var factoryNode = t.functionExpression(null, factoryParams, t.cloneDeep(_funcBody));

                factoryNode.body.body = _scopeInitialization.concat(factoryNode.body.body);

                // factory functions do not depend on any nested generator scope, so they go to the prelude
                var factoryDeclaration = t.variableDeclaration("var", [t.variableDeclarator(factoryId, factoryNode)]);
                this.prelude.push(factoryDeclaration);

                (0, _babelTraverse2.default)(t.file(t.program([t.expressionStatement(factoryNode)])), _visitors.ClosureRefReplacer, null, {
                  serializedBindings: sameSerializedBindings,
                  modified: modified,
                  requireReturns: this.requireReturns,
                  requireStatistics: requireStatistics,
                  isRequire: this.modules.getIsRequire(factoryParams, _instances.map(function (instance) {
                    return instance.functionValue;
                  }))
                });

                var _loop = function _loop(_instance2) {
                  var functionValue = _instance2.functionValue,
                      serializedBindings = _instance2.serializedBindings,
                      insertionPoint = _instance2.insertionPoint;

                  var functionId = _this.locationService.getLocation(functionValue);
                  (0, _invariant2.default)(functionId !== undefined);
                  var flatArgs = factoryNames.map(function (name) {
                    var serializedValue = serializedBindings[name].serializedValue;
                    (0, _invariant2.default)(serializedValue);
                    return serializedValue;
                  });
                  var _iteratorNormalCompletion17 = true;
                  var _didIteratorError17 = false;
                  var _iteratorError17 = undefined;

                  try {
                    for (var _iterator17 = _instance2.scopeInstances[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                      var _ref12 = _step17.value;
                      var _id = _ref12.id;

                      flatArgs.push(t.numericLiteral(_id));
                    }
                  } catch (err) {
                    _didIteratorError17 = true;
                    _iteratorError17 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion17 && _iterator17.return) {
                        _iterator17.return();
                      }
                    } finally {
                      if (_didIteratorError17) {
                        throw _iteratorError17;
                      }
                    }
                  }

                  var funcNode = void 0;
                  var firstUsage = _this.firstFunctionUsages.get(functionValue);
                  (0, _invariant2.default)(insertionPoint !== undefined);
                  if (_this.residualFunctionInitializers.hasInitializerStatement(functionValue) || usesThis || firstUsage !== undefined && !firstUsage.isNotEarlierThan(insertionPoint) || _this.functionPrototypes.get(functionValue) !== undefined) {
                    var callArgs = [t.thisExpression()];
                    var _iteratorNormalCompletion18 = true;
                    var _didIteratorError18 = false;
                    var _iteratorError18 = undefined;

                    try {
                      for (var _iterator18 = flatArgs[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                        var flatArg = _step18.value;
                        callArgs.push(flatArg);
                      }
                    } catch (err) {
                      _didIteratorError18 = true;
                      _iteratorError18 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion18 && _iterator18.return) {
                          _iterator18.return();
                        }
                      } finally {
                        if (_didIteratorError18) {
                          throw _iteratorError18;
                        }
                      }
                    }

                    var _iteratorNormalCompletion19 = true;
                    var _didIteratorError19 = false;
                    var _iteratorError19 = undefined;

                    try {
                      for (var _iterator19 = params[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                        var param = _step19.value;

                        if (param.type !== "Identifier") {
                          throw new _errors.FatalError("TODO: do not know how to deal with non-Identifier parameters");
                        }
                        callArgs.push(param);
                      }
                    } catch (err) {
                      _didIteratorError19 = true;
                      _iteratorError19 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion19 && _iterator19.return) {
                          _iterator19.return();
                        }
                      } finally {
                        if (_didIteratorError19) {
                          throw _iteratorError19;
                        }
                      }
                    }

                    var callee = t.memberExpression(factoryId, t.identifier("call"));

                    var childBody = t.blockStatement([t.returnStatement(t.callExpression(callee, callArgs))]);

                    funcNode = t.functionExpression(null, params, childBody);
                  } else {
                    funcNode = t.callExpression(t.memberExpression(factoryId, t.identifier("bind")), [_internalizer.nullExpression].concat(flatArgs));
                  }

                  define(_instance2, functionId, funcNode);
                };

                var _iteratorNormalCompletion16 = true;
                var _didIteratorError16 = false;
                var _iteratorError16 = undefined;

                try {
                  for (var _iterator16 = _instances[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                    var _instance2 = _step16.value;

                    _loop(_instance2);
                  }
                } catch (err) {
                  _didIteratorError16 = true;
                  _iteratorError16 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion16 && _iterator16.return) {
                      _iterator16.return();
                    }
                  } finally {
                    if (_didIteratorError16) {
                      throw _iteratorError16;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError12 = true;
              _iteratorError12 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion12 && _iterator12.return) {
                  _iterator12.return();
                }
              } finally {
                if (_didIteratorError12) {
                  throw _iteratorError12;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      if (this.capturedScopeInstanceIdx) {
        var scopeVar = t.variableDeclaration("var", [t.variableDeclarator(this.capturedScopesArray, t.callExpression(t.identifier("Array"), [t.numericLiteral(this.capturedScopeInstanceIdx)]))]);
        // The `scopeVar` must be visible in all scopes.
        this.prelude.unshift(scopeVar);
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.functionInstances.reverse()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var instance = _step5.value;

          var functionBody = functionBodies.get(instance);
          if (functionBody !== undefined) {
            var insertionPoint = instance.insertionPoint;
            (0, _invariant2.default)(insertionPoint instanceof _types.BodyReference);
            // v8 seems to do something clever with array splicing, so this potentially
            // expensive operations seems to be actually cheap.
            Array.prototype.splice.apply(insertionPoint.body, [insertionPoint.index, 0].concat(functionBody));
          }
        }

        // Inject initializer code for indexed vars into functions
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = funcNodes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _ref7 = _step6.value;

          var _ref8 = _slicedToArray(_ref7, 2);

          var functionValue = _ref8[0];
          var funcNode = _ref8[1];

          var initializerStatement = this.residualFunctionInitializers.getInitializerStatement(functionValue);
          if (initializerStatement !== undefined) {
            (0, _invariant2.default)(t.isFunctionExpression(funcNode));
            var blockStatement = funcNode.body;
            blockStatement.body.unshift(initializerStatement);
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return { unstrictFunctionBodies: unstrictFunctionBodies, strictFunctionBodies: strictFunctionBodies, requireStatistics: requireStatistics };
    }
  }]);

  return ResidualFunctions;
}();
//# sourceMappingURL=ResidualFunctions.js.map