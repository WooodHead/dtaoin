{"version":3,"sources":["../scripts/test-runner.js"],"names":["FatalError","require","prepackSources","Serializer","default","construct_realm","initializeGlobals","util","chalk","path","fs","vm","os","minimist","EOL","search","dir","relative","tests","readdirSync","name","loc","join","stat","statSync","isFile","push","file","readFileSync","isDirectory","concat","__dirname","exec","code","script","Script","cachedDataProduced","result","logOutput","write","prefix","values","runInNewContext","setTimeout","setInterval","clearTimeout","clearInterval","report","s","console","log","warn","error","runTest","options","args","inverse","inspect","compatibility","includes","undefined","initializeMoreModules","delayUnsupportedRequires","functionCloneCountMatch","match","Object","assign","debugNames","errorHandler","internalDebug","serialize","uniqueSuffix","inlineExpressions","additionalFunctions","realmOptions","realm","serializerOptions","serializer","sources","filePath","fileContents","serialized","init","red","err","sourceMapContents","trim","underline","marker","searchStart","indexOf","searchEnd","value","substring","length","count","parseInt","regex","RegExp","matches","expected","actual","codeIterations","markersToFind","positive","i","start","addedCode","injectAtRuntime","unique","oldUniqueSuffix","max","oldCode","anyDelayedValues","newUniqueSuffix","statistics","delayedValues","newCode","verbose","markersIssue","found","functionCount","functionClones","replace","run","failed","passed","total","test","basename","endsWith","filter","delayInitializations","Math","round","ProgramArgs","main","argsParse","process","exit","e","ArgsParseError","message","usage","argv","parsedArgs","slice","string","boolean","programArgs"],"mappings":"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","file":"test-runner.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nlet FatalError = require(\"../lib/errors.js\").FatalError;\nlet prepackSources = require(\"../lib/prepack-node.js\").prepackSources;\n\nlet Serializer = require(\"../lib/serializer/index.js\").default;\nlet construct_realm = require(\"../lib/construct_realm.js\").default;\nlet initializeGlobals = require(\"../lib/globals.js\").default;\nlet util = require(\"util\");\nlet chalk = require(\"chalk\");\nlet path = require(\"path\");\nlet fs = require(\"fs\");\nlet vm = require(\"vm\");\nlet os = require(\"os\");\nlet minimist = require(\"minimist\");\nconst EOL = os.EOL;\n\nfunction search(dir, relative) {\n  let tests = [];\n\n  for (let name of fs.readdirSync(dir)) {\n    let loc = path.join(dir, name);\n    let stat = fs.statSync(loc);\n\n    if (stat.isFile()) {\n      tests.push({\n        file: fs.readFileSync(loc, \"utf8\"),\n        name: path.join(relative, name),\n      });\n    } else if (stat.isDirectory()) {\n      tests = tests.concat(search(loc, path.join(relative, name)));\n    }\n  }\n\n  return tests;\n}\n\nlet tests = search(`${__dirname}/../test/serializer`, \"test/serializer\");\n\nfunction exec(code) {\n  let script = new vm.Script(\n    `var global = this; var self = this; ${code}; // keep newline here as code may end with comment\nreport(inspect());`,\n    { cachedDataProduced: false }\n  );\n\n  let result = \"\";\n  let logOutput = \"\";\n\n  function write(prefix, values) {\n    logOutput += \"\\n\" + prefix + values.join(\"\");\n  }\n\n  script.runInNewContext({\n    setTimeout: setTimeout,\n    setInterval: setInterval,\n    clearTimeout: clearTimeout,\n    clearInterval: clearInterval,\n    report: function(s) {\n      result = s;\n    },\n    console: {\n      log(...s) {\n        write(\"\", s);\n      },\n      warn(...s) {\n        write(\"WARN:\", s);\n      },\n      error(...s) {\n        write(\"ERROR:\", s);\n      },\n    },\n  });\n  return result + logOutput;\n}\n\nfunction runTest(name, code, options, args) {\n  console.log(chalk.inverse(name) + \" \" + util.inspect(options));\n  let compatibility = code.includes(\"// jsc\") ? \"jsc-600-1-4-17\" : undefined;\n  let initializeMoreModules = code.includes(\"// initialize more modules\");\n  let delayUnsupportedRequires = code.includes(\"// delay unsupported requires\");\n  let functionCloneCountMatch = code.match(/\\/\\/ serialized function clone count: (\\d+)/);\n  options = Object.assign({}, options, {\n    compatibility,\n    debugNames: args.debugNames,\n    initializeMoreModules,\n    delayUnsupportedRequires,\n    errorHandler: diag => \"Fail\",\n    internalDebug: true,\n    serialize: true,\n    uniqueSuffix: \"\",\n  });\n  if (code.includes(\"// inline expression\")) options.inlineExpressions = true;\n  if (code.includes(\"// additional functions\")) options.additionalFunctions = [\"additional1\", \"additional2\"];\n  if (code.includes(\"// throws introspection error\")) {\n    try {\n      let realmOptions = { serialize: true, compatibility, uniqueSuffix: \"\", errorHandler: diag => \"Fail\" };\n      let realm = construct_realm(realmOptions);\n      initializeGlobals(realm);\n      let serializerOptions = {\n        initializeMoreModules,\n        delayUnsupportedRequires,\n        internalDebug: true,\n        additionalFunctions: options.additionalFunctions,\n      };\n      let serializer = new Serializer(realm, serializerOptions);\n      let sources = [{ filePath: name, fileContents: code }];\n      let serialized = serializer.init(sources, false);\n      if (!serialized) {\n        console.log(chalk.red(\"Error during serialization\"));\n      } else {\n        console.log(chalk.red(\"Test should have caused introspection error!\"));\n      }\n    } catch (err) {\n      if (err instanceof FatalError) return true;\n      console.log(\"Test should have caused introspection error, but instead caused a different internal error!\");\n      console.log(err);\n    }\n    return false;\n  } else if (code.includes(\"// cannot serialize\")) {\n    try {\n      prepackSources([{ filePath: name, fileContents: code, sourceMapContents: \"\" }], options);\n    } catch (err) {\n      if (err instanceof FatalError) {\n        return true;\n      }\n    }\n    console.log(chalk.red(\"Test should have caused error during serialization!\"));\n    return false;\n  } else if (code.includes(\"// no effect\")) {\n    try {\n      let serialized = prepackSources([{ filePath: name, fileContents: code, sourceMapContents: \"\" }], options);\n      if (!serialized) {\n        console.log(chalk.red(\"Error during serialization!\"));\n        return false;\n      }\n      if (!serialized.code.trim()) {\n        return true;\n      }\n      console.log(chalk.red(\"Generated code should be empty but isn't!\"));\n      console.log(chalk.underline(\"original code\"));\n      console.log(code);\n      console.log(chalk.underline(`generated code`));\n      console.log(serialized.code);\n    } catch (err) {\n      console.log(err);\n    }\n    return false;\n  } else if (code.includes(\"// Copies of \")) {\n    let marker = \"// Copies of \";\n    let searchStart = code.indexOf(marker);\n    let searchEnd = code.indexOf(\":\", searchStart);\n    let value = code.substring(searchStart + marker.length, searchEnd);\n    let count = parseInt(code.substring(searchEnd + 1, code.indexOf(\"\\n\", searchStart)), 10);\n    try {\n      let serialized = prepackSources([{ filePath: name, fileContents: code, sourceMapContents: \"\" }], options);\n      if (!serialized) {\n        console.log(chalk.red(\"Error during serialization!\"));\n        return false;\n      }\n      let regex = new RegExp(value, \"gi\");\n      let matches = serialized.code.match(regex);\n      if (!matches || matches.length !== count) {\n        console.log(\n          chalk.red(`Wrong number of occurrances of ${value} got ${matches ? matches.length : 0} instead of ${count}`)\n        );\n        return false;\n      }\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n    return true;\n  } else {\n    let expected, actual;\n    let codeIterations = [];\n    let markersToFind = [];\n    for (let [positive, marker] of [[true, \"// does contain:\"], [false, \"// does not contain:\"]]) {\n      if (code.includes(marker)) {\n        let i = code.indexOf(marker);\n        let value = code.substring(i + marker.length, code.indexOf(\"\\n\", i));\n        markersToFind.push({ positive, value, start: i + marker.length });\n      }\n    }\n    let addedCode = \"\";\n    let injectAtRuntime = \"// add at runtime:\";\n    if (code.includes(injectAtRuntime)) {\n      let i = code.indexOf(injectAtRuntime);\n      addedCode = code.substring(i + injectAtRuntime.length, code.indexOf(\"\\n\", i));\n    }\n    let unique = 27277;\n    let oldUniqueSuffix = \"\";\n    try {\n      expected = exec(`${addedCode}\\n(function () {${code} // keep newline here as code may end with comment\n}).call(this);`);\n\n      let i = 0;\n      let max = addedCode ? 1 : 4;\n      let oldCode = code;\n      let anyDelayedValues = false;\n      for (; i < max; i++) {\n        let newUniqueSuffix = `_unique${unique++}`;\n        options.uniqueSuffix = newUniqueSuffix;\n        let serialized = prepackSources([{ filePath: name, fileContents: code, sourceMapContents: \"\" }], options);\n        if (serialized.statistics && serialized.statistics.delayedValues > 0) anyDelayedValues = true;\n        if (!serialized) {\n          console.log(chalk.red(\"Error during serialization!\"));\n          break;\n        }\n        let newCode = serialized.code;\n        codeIterations.push(newCode);\n        if (args.verbose) console.log(newCode);\n        let markersIssue = false;\n        for (let { positive, value, start } of markersToFind) {\n          let found = newCode.indexOf(value, start) !== -1;\n          if (found !== positive) {\n            console.log(chalk.red(`Output ${positive ? \"does not contain\" : \"contains\"} forbidden string: ${value}`));\n            markersIssue = true;\n          }\n        }\n        if (markersIssue) break;\n        actual = exec(addedCode + newCode);\n        if (expected !== actual) {\n          console.log(chalk.red(\"Output mismatch!\"));\n          break;\n        }\n        // Test the number of clone functions generated with the inital prepack call\n        if (i === 0 && functionCloneCountMatch) {\n          let functionCount = parseInt(functionCloneCountMatch[1], 10);\n          if (serialized.statistics && functionCount !== serialized.statistics.functionClones) {\n            console.log(\n              chalk.red(\n                `Code generation serialized an unexpected number of clone functions. Expected: ${functionCount}, Got: ${serialized\n                  .statistics.functionClones}`\n              )\n            );\n            break;\n          }\n        }\n        if (\n          oldCode.replace(new RegExp(oldUniqueSuffix, \"g\"), \"\") ===\n            newCode.replace(new RegExp(newUniqueSuffix, \"g\"), \"\") ||\n          delayUnsupportedRequires\n        ) {\n          // The generated code reached a fixed point!\n          return true;\n        }\n        oldCode = newCode;\n        oldUniqueSuffix = newUniqueSuffix;\n      }\n      if (i === 1) return true;\n      if (i === max) {\n        if (anyDelayedValues) {\n          // TODO #835: Make delayed initializations logic more sophisticated in order to still reach a fixed point.\n          return true;\n        }\n        console.log(chalk.red(`Code generation did not reach fixed point after ${max} iterations!`));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    console.log(chalk.underline(\"original code\"));\n    console.log(code);\n    console.log(chalk.underline(\"output of inspect() on original code\"));\n    console.log(expected);\n    for (let i = 0; i < codeIterations.length; i++) {\n      console.log(chalk.underline(`generated code in iteration ${i}`));\n      console.log(codeIterations[i]);\n    }\n    console.log(chalk.underline(\"output of inspect() on last generated code iteration\"));\n    console.log(actual);\n    return false;\n  }\n}\nfunction run(args) {\n  let failed = 0;\n  let passed = 0;\n  let total = 0;\n\n  for (let test of tests) {\n    // filter hidden files\n    if (path.basename(test.name)[0] === \".\") continue;\n    if (test.name.endsWith(\"~\")) continue;\n    if (test.file.includes(\"// skip\")) continue;\n    //only run specific tests if desired\n    if (!test.name.includes(args.filter)) continue;\n\n    for (let [delayInitializations, inlineExpressions] of [[false, false], [true, true]]) {\n      total++;\n      let options = { delayInitializations, inlineExpressions };\n      if (runTest(test.name, test.file, options, args)) passed++;\n      else failed++;\n    }\n  }\n\n  console.log(\"Passed:\", `${passed}/${total}`, (Math.round(passed / total * 100) || 0) + \"%\");\n  return failed === 0;\n}\n\n// Object to store all command line arguments\nclass ProgramArgs {\n  debugNames: boolean;\n  verbose: boolean;\n  filter: string;\n  constructor(debugNames: boolean, verbose: boolean, filter: string) {\n    this.debugNames = debugNames;\n    this.verbose = verbose;\n    this.filter = filter; //lets user choose specific test files, runs all tests if omitted\n  }\n}\n\n// Execution of tests begins here\nfunction main(): number {\n  try {\n    let args = argsParse();\n    if (!run(args)) {\n      process.exit(1);\n    } else {\n      return 0;\n    }\n  } catch (e) {\n    if (e instanceof ArgsParseError) {\n      console.log(\"Illegal argument: %s.\\n%s\", e.message, usage());\n    } else {\n      console.log(e);\n    }\n    return 1;\n  }\n  return 0;\n}\n\n// Helper function to provide correct usage information to the user\nfunction usage(): string {\n  return `Usage: ${process.argv[0]} ${process.argv[1]} ` + EOL + `[--verbose] [--filter <string>]`;\n}\n\n// NOTE: inheriting from Error does not seem to pass through an instanceof\n// check\nclass ArgsParseError {\n  message: string;\n  constructor(message: string) {\n    this.message = message;\n  }\n}\n\n// Parses through the command line arguments and throws errors if usage is incorrect\nfunction argsParse(): ProgramArgs {\n  let parsedArgs = minimist(process.argv.slice(2), {\n    string: [\"filter\"],\n    boolean: [\"debugNames\", \"verbose\"],\n    default: {\n      debugNames: false,\n      verbose: false,\n      filter: \"\",\n    },\n  });\n  if (typeof parsedArgs.debugNames !== \"boolean\") {\n    throw new ArgsParseError(\"debugNames must be a boolean (either --debugNames or not)\");\n  }\n  if (typeof parsedArgs.verbose !== \"boolean\") {\n    throw new ArgsParseError(\"verbose must be a boolean (either --verbose or not)\");\n  }\n  if (typeof parsedArgs.filter !== \"string\") {\n    throw new ArgsParseError(\n      \"filter must be a string (relative path from serialize directory) (--filter abstract/Residual.js)\"\n    );\n  }\n  let programArgs = new ProgramArgs(parsedArgs.debugNames, parsedArgs.verbose, parsedArgs.filter);\n  return programArgs;\n}\n\nmain();\n"]}