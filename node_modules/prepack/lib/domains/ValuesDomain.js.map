{"version":3,"sources":["../../src/domains/ValuesDomain.js"],"names":["ValuesDomain","values","valueSet","Set","add","_elements","undefined","type","isTop","getElements","cval","mightBeFalse","mightNotBeFalse","y","union","forEach","v","intersection","elements","has","newSet","$Realm","intrinsics","realm","v1","v2","joinWith","meetWith","topVal"],"mappings":"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","file":"ValuesDomain.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../invariant.js\";\nimport type { Realm } from \"../realm.js\";\nimport { AbstractValue, ConcreteValue, EmptyValue, Value } from \"../values/index.js\";\n\n/* An abstract domain that collects together a set of concrete values\n   that might be the value of a variable at runtime.\n   Initially, every variable has the value undefined.\n   A property that has been weakly deleted will have more than\n   one value, one of which will by the EmptyValue.  */\n\nexport default class ValuesDomain {\n  constructor(values: void | Set<ConcreteValue> | ConcreteValue) {\n    if (values instanceof ConcreteValue) {\n      let valueSet = new Set();\n      valueSet.add(values);\n      values = valueSet;\n    }\n    this._elements = values;\n  }\n\n  static topVal = new ValuesDomain(undefined);\n\n  _elements: void | Set<ConcreteValue>;\n\n  isTop() {\n    return this._elements === undefined;\n  }\n\n  getElements() {\n    invariant(this._elements !== undefined);\n    return this._elements;\n  }\n\n  includesValueNotOfType(type: typeof Value): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (!(cval instanceof type)) return true;\n    }\n    return false;\n  }\n\n  includesValueOfType(type: typeof Value): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval instanceof type) return true;\n    }\n    return false;\n  }\n\n  mightBeFalse(): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval.mightBeFalse()) return true;\n    }\n    return false;\n  }\n\n  mightNotBeFalse(): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval.mightNotBeFalse()) return true;\n    }\n    return false;\n  }\n\n  static joinValues(realm: Realm, v1: void | Value, v2: void | Value): ValuesDomain {\n    if (v1 === undefined) v1 = realm.intrinsics.undefined;\n    if (v2 === undefined) v2 = realm.intrinsics.undefined;\n    if (v1 instanceof AbstractValue) return v1.values.joinWith(v2);\n    if (v2 instanceof AbstractValue) return v2.values.joinWith(v1);\n    let union = new Set();\n    invariant(v1 instanceof ConcreteValue);\n    union.add(v1);\n    invariant(v2 instanceof ConcreteValue);\n    union.add(v2);\n    return new ValuesDomain(union);\n  }\n\n  joinWith(y: Value): ValuesDomain {\n    if (this.isTop()) return this;\n    let union = new Set(this.getElements());\n    if (y instanceof AbstractValue) {\n      if (y.values.isTop()) return y.values;\n      y.values.getElements().forEach(v => union.add(v));\n    } else {\n      invariant(y instanceof ConcreteValue);\n      union.add(y);\n    }\n    return new ValuesDomain(union);\n  }\n\n  static meetValues(realm: Realm, v1: void | Value, v2: void | Value): ValuesDomain {\n    if (v1 === undefined) v1 = realm.intrinsics.undefined;\n    if (v2 === undefined) v2 = realm.intrinsics.undefined;\n    if (v1 instanceof AbstractValue) return v1.values.meetWith(v2);\n    if (v2 instanceof AbstractValue) return v2.values.meetWith(v1);\n    let intersection = new Set();\n    invariant(v1 instanceof ConcreteValue);\n    invariant(v2 instanceof ConcreteValue);\n    if (v1 === v2) intersection.add(v1);\n    return new ValuesDomain(intersection);\n  }\n\n  meetWith(y: Value): ValuesDomain {\n    let intersection = new Set();\n    let elements = this._elements;\n    if (y instanceof AbstractValue) {\n      if (y.values.isTop()) return this;\n      y.values.getElements().forEach(v => {\n        if (elements === undefined || elements.has(v)) intersection.add(v);\n      });\n    } else {\n      invariant(y instanceof ConcreteValue);\n      if (elements === undefined || elements.has(y)) intersection.add(y);\n    }\n    return new ValuesDomain(intersection);\n  }\n\n  promoteEmptyToUndefined(): ValuesDomain {\n    if (this.isTop()) return this;\n    let newSet = new Set();\n    for (let cval of this.getElements()) {\n      if (cval instanceof EmptyValue) newSet.add(cval.$Realm.intrinsics.undefined);\n      else newSet.add(cval);\n    }\n    return new ValuesDomain(newSet);\n  }\n}\n"]}